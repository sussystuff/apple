
INTRODUCTION

In the absence if an identified group, I have called this long-running group operation Stealth Developer Mode (SDM). The Stealthy Developers are using this exploit to gather survelliance data in the same way as Pegasus and its predecessors.

The exploit is still currently active and observed on macOS (2021 M1 MacBook Pro, 2020 M1 Mac mini) iOS (iPhone 6GS Plus, iPad 5th gen, 9th gen, Air), AppleTV, CarPlay, Android (Motorola phone), Chromebook/ChromeOS (2023 Lenovo Chromebook Laptop), GoogleTV and Google Home smart mini speakers. Evidence also includes the Apple Watch and HomePods. I suspect an active Windows issue too judging by similar signs on one Windows 10 laptop used here, however, I have concentrated my investigation on Apple as that is our largest group of affected products.

It is important to note that the Apple 2021 M1 MacBook Pro, 2020 M1 Mac mini and iPads were 'wiped and factory reset' at the Apple Store. I sat and waited for 9 hours, so I am sure they did what they assumed was a thorough job. I have since then approached Google, Apple and Motorola to both report and (hopefully) receive some assistance. Google said the issue was not reproducable and closed the case. Their web based chat help were unhelpful, but upon inspecting the chat window code I realised I was conversing with the attackers. Google Workspace on Twitter would not confirm if interactive logins, service logins and the WorkSpace service itself were available to regular users. They referred me to the online help. 

The Apple store eventually said it was over their heads and to contact Apple online. Attempts to do this are futile because they've blocked my ability to submit security reports, the Apple 'live chat' and telephone number are both diverted to the attackers call centres. You can't contact Apple without an Apple ID and as mine is hostage these avenues are unhelpfulul. Motorola confirmed the email communication with them was not legimate and to use their reset tool connected to a computer. The irony is not lost on me that I don't have a computer that isn't captive to the Stealth Developer Mode. Attempts to attract the attention of security researchers went unanswered, but this could be that those tweets were blocked from being viewed.

Unfortunately, it has been passed on to family, friends and business contacts. Forums online are littered with people as far back as 2019 who are in the same position. Their pleas for help either go unanswered or they are ridiculed. Interestingly, these bullies consistently appear to be 'false alarms'. Like the timeless movie Labryinth, these people appear to be planted to post responses that conflict with the evidence cited. Especially when the victim is on the right path.  

Thus, I present what I have discovered in the hope someone will take notice. I have tried to organise information in sections along with examples and links. The typos are theirs, not mine.

It should also be noted that a group has been created by the attackers, its public name is 'NULL'.

<--
ControlCenter: (CoreUtils) [com.apple.airplay:APReceiverSystemInfo] [APReceiverSystemInfo] Initial config: Group Public Name 'NULL'
-->


SUMMARY
Observed data interactions include: 
- Very detailed statistics
- Remote recording of voice and video
- Screenshots, screen recording
- Call monitoring: voice call listening, conference and multi-way, call interception, impersonation, call redirection and termination
- SMS, FaceTime message and iMessage interception and impersonation
- Sophisticated location monitoring including personalised triggers set for movement away from the base location, evidence of CarPlay interference and GPS tracking.
- There is the initial bulk migration of all folders to a seperate virtualised disk which uses SMB, FTP and modifications for the users home directory to be also mirrored off-device. Copies of recent files are extracted. 
- Existing and new files are injected with binary data (see https://www.github.com/sussystuff for a list of VirusTotal sample links)
- Contact address book monitoring and any close contacts are also compromised for further communication monitoring
- Email hijacking: monitoring, impersonation, interception and removal of emails. Emails are routed through another server.
- Pasteboard hijack
- Bluetooth hijacking


ENTRY POINT
The entry point of the exploit is currently unknown. Considering the many similarities to Pegusus and following infiltration operations, I propose that first a close contact of the victim is compromised first by the usual phishing methods. With the 2021 M1 MacBook Pro, 2020 Mac mini and iPads in lockdown mode, it is still possible for messages to be received if sent from someone in the contact address book. Relating to my case, my mother (who is also a victim) has instances where the attackers have sent SMS messages from her phone people in her contacts list that did not appear in her message outbox on the Google Pixel phone. It is possible these messages could contain links or images as a large message size is seen to be set. The attackers have created a method to inject binary data into existing and new files. Documents and images checked with VirusTotal show that these contain actions for the compromise of whatever device they are opened on. Another possibility is the misuse of TrustedPeers via TrustedPeersHelper.

I have observed instances of fake contacts in the following format being invoked:

<--
<DNDMutableContact: 0x******e90; contactIdentifier: (null); firstName: XXXXXXC2; middleName: 0; lastName: XXXXXX08; nickName: 0; organizationName: 0; phoneNumbers: (
    XXXXXXXXXXXXXBDE,
    XXXXXXXXXXXXXACA
); emailAddresses: (
    XXXXXXXXXXXXXACE
);>
-->


FACETIME, SMS/MESSAGES AND IMESSAGE

We do not use FaceTime or iMessages. iPhone messages are not set to sync to iCloud. However, I have observed these being activated and messages and data being sent out via SMS, iMessage and FaceTime on iOS and macOS.

Initially, CompanionLink is declined due to the devices being in Lockdown Mode. Yet identityservicesd makes them active. 

<--
identityservicesd: [com.apple.IDS:Delivery] Registering for events {eventID: ids-message, options: allowUnauthenticated}
identityservicesd: [com.apple.IDS:Delivery] Start companionLinkClient setup
identityservicesd: [com.apple.Transport:UTun] use skywalk channel for utun
identityservicesd: [com.apple.Registration:RegistrationListener] Starting Up
identityservicesd: [com.apple.IDS:Registration] Loading device properties
callservicesd: [com.apple.calls.callservicesd:CompanionLinkManager] Failed to activate CompanionLink because lockdown mode is enabled
identityservicesd: [com.apple.IDS:Delivery] Activated companionLinkClient {self: <private>}
identityservicesd: [com.apple.IDS:Delivery] Updated local device {device: <private>, publicIdentifier: (null)}
sharingd: (CoreUtils) [com.apple.sharing:TetheringAgent] Companion link state: Pref no, Host Count 1, Family Count 0, HSA2 yes, ManateeAvailable yes, SysMon no, Browser yes, Inactive no
sharingd: (CoreUtils) [com.apple.sharing:SDXPCServer] DeviceDiscoveryActivate: SFDeviceDiscovery (SetupAgent), 0x*****90 < Action AppleTVSetup LegacyHomePodSetup iOSSetup WHA WPS ApplePay RemoteAutoFill CompanionLinkProx RemoteManagement Repair ProxHandoff HomePodSetup >, cflags 0x5 < AdvData RSSI >, ScanRate Normal, FastScan Match, RSSI >= -70, from sharingd:442
-->


In the examples below, the options for FaceTime, iMessage and Messages/SMS are deactivated and the devices are in Apples Lockdown Mode. 'Changing SMS Push Hander Regiration State to: YES' and 'lockdown passThrought handler for command' indicates imagent is likely to be an an imposter.

Forcing SMS activation:

<--
imagent: (SMS) [com.apple.Messages:SMS] Setting up SMS service
imagent: (SMS) [com.apple.Messages:SMS] Finished setting Up Relay Service (Service: com.apple.private.alloy.sms), number of accounts: 1
imagent: (IDS) [com.apple.IDS:_IDSService] Finalized check in -- finishing {service: com.apple.private.alloy.sms}
imagent: (SMS) [com.apple.Messages:SMServiceSession] Relay service set to sms relay, accounts count 1 devices count 1
imagent: (SMS) [com.apple.Messages:SMS]   => Done: <private>
imagent: (SMS) [com.apple.Messages:SMS] Updating
imagent: (SMS) [com.apple.IDS:Registration] Updating SMS service with number:
imagent: (IMDaemonCore) [com.apple.Messages:IMDAccount] <private> - write account defaults: <private>
imagent: (IMDaemonCore) [com.apple.Messages:IMDAccount] <private> - write account defaults: <private>
imagent: (SMS) [com.apple.Messages:SMS] Setting up push handler
imagent: (SMS) [com.apple.Messages:SMS] Initing Push Handler 0x******600
imagent: (SMS) [com.apple.Messages:SMSRelayPushHandler] Changing SMS Push Hander Regiration State to: YES
imagent: (SMS) [com.apple.Messages:SMSRelayPushHandler] Accepting incoming pushes
imagent: (SMS) [com.apple.Messages:SMS] ...done
-->


Forcing iMessage activation:

<--
imagent: (iMessage) [com.apple.Messages:MessageService] ...done
imagent: (iMessage) [com.apple.Messages:MessageService] Setting up push handler
imagent: (iMessage) [com.apple.Messages:MessagePushHandler] Adding Handler for command: <private> (120)
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] blastdoor handler for command '120' in <private>: ADDED
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] added noop lockdown handler for command '120' in <private>
imagent: (iMessage) [com.apple.Messages:MessagePushHandler] Adding Handler for command: <private> (101)
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] handler for command '101' in <private>: NOT ADDED (Command not ready for Blastdoor)
imagent: (iMessage) [com.apple.Messages:MessagePushHandler] Adding Handler for command: <private> (107)
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] blastdoor handler for command '107' in <private>: ADDED
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] added noop lockdown handler for command '107' in <private>
imagent: (iMessage) [com.apple.Messages:MessagePushHandler] Adding Handler for command: <private> (102)
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] handler for command '102' in <private>: NOT ADDED (Command not ready for Blastdoor)
imagent: (iMessage) [com.apple.Messages:MessagePushHandler] Adding Handler for command: <private> (108)
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] blastdoor handler for command '108' in <private>: ADDED
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] added noop lockdown handler for command '108' in <private>
imagent: (iMessage) [com.apple.Messages:MessagePushHandler] Adding Handler for command: <private> (105)
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] handler for command '105' in <private>: NOT ADDED (Command not ready for Blastdoor)
imagent: (iMessage) [com.apple.Messages:MessagePushHandler] Adding Handler for command: <private> (106)
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] blastdoor handler for command '106' in <private>: ADDED
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] added noop lockdown handler for command '106' in <private>
imagent: (iMessage) [com.apple.Messages:MessagePushHandler] Adding Handler for command: <private> (100)
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] handler for command '100' in <private>: NOT ADDED (Command not ready for Blastdoor)
imagent: (iMessage) [com.apple.Messages:MessagePushHandler] Adding Handler for command: <private> (195)
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] blastdoor handler for command '195' in <private>: ADDED
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] added noop lockdown handler for command '195' in <private>
imagent: (iMessage) [com.apple.Messages:MessagePushHandler] Adding Handler for command: <private> (180)
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] blastdoor handler for command '180' in <private>: ADDED
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] added noop lockdown handler for command '180' in <private>
imagent: (iMessage) [com.apple.Messages:MessagePushHandler] Adding Handler for command: <private> (131)
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] blastdoor handler for command '131' in <private>: ADDED
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] added noop lockdown handler for command '131' in <private>
imagent: (iMessage) [com.apple.Messages:MessagePushHandler] Adding Handler for command: <private> (181)
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] blastdoor handler for command '181' in <private>: ADDED
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] added noop lockdown handler for command '181' in <private>
imagent: (iMessage) [com.apple.Messages:MessagePushHandler] Adding Handler for command: <private> (182)
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] blastdoor handler for command '182' in <private>: ADDED
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] added noop lockdown handler for command '182' in <private>
imagent: (iMessage) [com.apple.Messages:MessagePushHandler] Adding Handler for command: <private> (190)
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] blastdoor handler for command '190' in <private>: ADDED
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] added noop lockdown handler for command '190' in <private>
imagent: (iMessage) [com.apple.Messages:MessagePushHandler] Adding Handler for command: <private> (196)
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] blastdoor handler for command '196' in <private>: ADDED
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] added noop lockdown handler for command '196' in <private>
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] lockdown passThrough handler for command '181' in <private>: ADDED
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] lockdown passThrough handler for command '190' in <private>: ADDED
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] lockdown passThrought handler for command '100' in <private>: NOT ADDED (Command not ready for Blastdoor)
imagent: (IMFoundation) [com.apple.IDS:XPC] Created XPC service with name: <private>  (Connection: 0x******b40)
imagent: (IDS) [com.apple.IDS:_IDSService] Client setup service -- checked in {service: com.apple.madrid}
imagent: (IDS) Framework init with service, commands
imagent: (IDS) [com.apple.IDS:_IDSService] _IDSService - initing {self: 0x******fc0, service: com.apple.madrid, commands: <private>, manualAck: NO}
imagent: (iMessage) [com.apple.Messages:MessagePushHandler] supports commands: <private>
imagent: (iMessage) [com.apple.Messages:MessageService] Setting up darwin notification observer for read receipts
imagent: (IMFoundation) [com.apple.IDS:Registration] Dispatch registration success {name: <private>}
imagent: (iMessage) [com.apple.Messages:MessageService] Setting up darwin notification observer for Keep Messages Updated
imagent: (IMFoundation) [com.apple.IDS:Registration] Dispatch registration success {name: com.apple.MobileSMS.KeepMessages.shouldUpdateDevices}
imagent: (iMessage) [com.apple.Messages:MessageService] Setting up darwin notification observer for Keep Messages Reset
imagent: (IMFoundation) [com.apple.IDS:Registration] Dispatch registration success {name: com.apple.MobileSMS.KeepMessages.shouldResetSetting}
imagent: (IMFoundation) [com.apple.IDS:XPC] Created XPC service with name: <private>  (Connection: 0x******950)
imagent: (IDS) [com.apple.IDS:_IDSService] Client setup service -- checked in {service: com.apple.private.alloy.biz}
imagent: (IDS) [com.apple.IDS:IDSConnection] _IDSConnection - initing {self: 0x******7e0, account.serviceName: com.apple.madrid}
launchd: [gui/501 [100007]:] failed activation: name = com.apple.private.alloy.biz-idswake, flags = 0x0, requestor = imagent[472], error = 1: Operation not permitted
imagent: (IDS) [com.apple.IDS:DaemonController] Set commands: <private>  (Previous: (null))
imagent: (IDS) [com.apple.IDS:DaemonController] Sending down new services <private> commands <private> capabilities 72
imagent: (IDS) [com.apple.IDS:_IDSService] Setting up new connection for <private>
imagent: (IDS) [com.apple.IDS:_IDSService] Connection map:
imagent: (IDS) [com.apple.IDS:_IDSService]    <private> => <private>
imagent: (IDS) [com.apple.IDS:_IDSService] Finished processing accounts set.
imagent: (IDS) [com.apple.IDS:_IDSService] Connection map:
imagent: (IDS) [com.apple.IDS:_IDSService]    <private> => <private>
imagent: (IDS) [com.apple.IDS:_IDSService] _IDSService - added delegate {self: 0x******fc0, serviceName Messenger, listenerCaps <private>, delegates: 1, wantsPseudonymUpdates: NO}
-->


The following appears to be related to FaceTime commands. 

<--
imagent: (ApplePushService) [com.apple.apsd:connection] <private> setLargeMessageSize: 51200
imagent: (ApplePushService) [com.apple.apsd:connection] <private> Delivering did reconnect apsd
imagent: (IMDaemonCore) [com.apple.Messages:IMDCKRecordManager] Created push connection <private> with enabled topics <private>
imagent: (IMDaemonCore) [com.apple.Messages:IMDCKRecordManager] Going to create subscription on deDupe zone for subscriptionID: ExitRecordKeyManateeZoneSubscription recordType: Exit
imagent: (IMDaemonCore) [com.apple.Messages:IMDCKDatabaseManager] Using Manatee Container
imagent: (IMDaemonCore) [com.apple.Messages:IMDCKExitManager] writeInitialSyncCompletedRecordIfNeeded We have already done this. Not doing again unless you do defaults delete com.apple.madrid initialSyncRecordHasBeenWritten
imagent: (IMDaemonCore) [com.apple.Messages:ReceivePipeline] Adding Handler for command: FTCommandIDDeliveryReceipt (101)
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] blastdoor handler for command '101' in <private>: ADDED
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] added noop lockdown handler for command '101' in <private>
imagent: (IMDaemonCore) [com.apple.Messages:ReceivePipeline] Adding Handler for command: FTCommandIDChatSessionClose (170)
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] blastdoor handler for command '170' in <private>: ADDED
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] added noop lockdown handler for command '170' in <private>
imagent: (IMDaemonCore) [com.apple.Messages:ReceivePipeline] Adding Handler for command: FTCommandIDReadReceipt (102)
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] blastdoor handler for command '102' in <private>: ADDED
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] added noop lockdown handler for command '102' in <private>
imagent: (IMDaemonCore) [com.apple.Messages:ReceivePipeline] Adding Handler for command: FTCommandIDMarkAsUnreadMessage (111)
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] blastdoor handler for command '111' in <private>: ADDED
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] added noop lockdown handler for command '111' in <private>
imagent: (IMDaemonCore) [com.apple.Messages:ReceivePipeline] Adding Handler for command: FTCommandIDPlayedReceipt (105)
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] blastdoor handler for command '105' in <private>: ADDED
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] added noop lockdown handler for command '105' in <private>
imagent: (IMDaemonCore) [com.apple.Messages:ReceivePipeline] Adding Handler for command: FTCommandIDDeliveredQuietly (112)
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] blastdoor handler for command '112' in <private>: ADDED
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] added noop lockdown handler for command '112' in <private>
imagent: (IMDaemonCore) [com.apple.Messages:ReceivePipeline] Adding Handler for command: FTCommandIDNotifyRecipient (113)
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] blastdoor handler for command '113' in <private>: ADDED
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] added noop lockdown handler for command '113' in <private>
imagent: (IMDaemonCore) [com.apple.Messages:ReceivePipeline] Adding Handler for command: FTCommandIDTextMessage (100)
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] blastdoor handler for command '100' in <private>: ADDED
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] added noop lockdown handler for command '100' in <private>
imagent: (IMDaemonCore) [com.apple.Messages:ReceivePipeline] Adding Handler for command: FTCommandIDSyndicationAction (116)
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] blastdoor handler for command '116' in <private>: ADDED
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] added noop lockdown handler for command '116' in <private>
imagent: (IMDaemonCore) [com.apple.Messages:ReceivePipeline] Adding Handler for command: 118 (118)
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] blastdoor handler for command '118' in <private>: ADDED
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] added noop lockdown handler for command '118' in <private>
imagent: (IMDaemonCore) [com.apple.Messages:ReceivePipeline] Adding Handler for command: 119 (119)
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] blastdoor handler for command '119' in <private>: ADDED
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] added noop lockdown handler for command '119' in <private>
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] lockdown handler for command '100' in <private>: ADDED
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] lockdown passThrough handler for command '101' in <private>: ADDED
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] lockdown passThrough handler for command '102' in <private>: ADDED
imagent: (IMDaemonCore) [com.apple.Messages:IMDiMessageIDSDelegate] supports commands: <private>
imagent: (IMDaemonCore) [com.apple.Messages:ReceivePipeline] IDS Delegate Loaded service: <private> handling commands <private>
imagent: (IMDaemonCore) [com.apple.Messages:DaemonClientConnections] Starting to accept incoming connections
-->

<--
ControlCenter: (TelephonyUtilities) [com.apple.calls.telephonyutilities:Default] FaceTime availability changed from (audio=0 video=1) to (audio=1 video=1)
identityservicesd: (ApplePushService) [com.apple.apsd:connection] <private> _sendOutgoingMessage: <private> [id=xxxxxxxxx] com.apple.private.alloy.nearby <private> fake: NO syncToIvarQueue: NO
identityservicesd: (FTServices) [com.apple.IDS:FaceTime] Sent outgoing message: <private> to command:    (Request ID: <private>   Connection: <private>)
imagent: (SMS) [com.apple.Messages:SMSRelayPushHandler] Changing SMS Push Hander Regiration State to: YES
imagent: (IMDaemonCore) [com.apple.MessagesEvents:ChatRegistry] Loading Chats... (Chat Caching: YES)
identityservicesd: (FTServices) [com. apple. IDS: Registration] Updating supported service status { iMessageSupported: YES, faceTimeAudioSupported: YES, faceTimeMultiwaySupported: YES, supportedServicesFlags: 7 }
-->


I am unsure whether the reference to Lockdown relates to the safety feature introduced to assist those targeted by attackers or another function of Apple processes. From reviewing hundreds and thousands lines of code, it seems that my address book contacts are obfuscated within the daemon and process data files. Each file contains a plist, commands, and a clang compiler plist. Each contact appears to be referenced with 'BH' and a unique identifier code. In the following example, 'lockdown passThrought handler' message adds further weight to the hypothesis that imagent is an imposter.

<--
usbmuxd: [com.apple.usbmux:daemon] USBMuxBonjourDeviceListenerCreate: LOCKDOWN_V2_BONJOUR_SERVICE_NAME is _apple-mobdev2._tcp,******f0
-->

<--
identityservicesd: (BlastDoor) [com. apple. Messages.blastdoor: BlastDoorPipeline] Starting unpack with type: BlastDoor.APSUserPayload
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] lockdown passThrough handler for command '181' in <private>: ADDED
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] lockdown passThrough handler for command '190' in <private>: ADDED
imagent: (IMSharedUtilities) [com.apple.Messages:IMBaseCommandHandlerRegistry] lockdown passThrought handler for command '100' in <private>: NOT ADDED (Command not ready for Blastdoor)
imagent: (IMFoundation) [com.apple.IDS:XPC] Created XPC service with name: <private>  (Connection: 0x******b40)
imagent: (IDS) [com.apple.IDS:_IDSService] Client setup service -- checked in {service: com.apple.madrid}
imagent: (IDS) Framework init with service, commands
imagent: (IDS) [com.apple.IDS:_IDSService] _IDSService - initing {self: 0x******fc0, service: com.apple.madrid, commands: <private>, manualAck: NO}
imagent: (iMessage) [com.apple.Messages:MessagePushHandler] supports commands: <private>
imagent: (iMessage) [com.apple.Messages:MessageService] Setting up darwin notification observer for read receipts
imagent: (IMFoundation) [com.apple.IDS:Registration] Dispatch registration success {name: <private>}
imagent: (iMessage) [com.apple.Messages:MessageService] Setting up darwin notification observer for Keep Messages Updated
imagent: (IMFoundation) [com.apple.IDS:Registration] Dispatch registration success {name: com.apple.MobileSMS.KeepMessages.shouldUpdateDevices}
imagent: (IDS) [com.apple.IDS:IDSConnection] _IDSConnection - initing {self: 0x******e80, account.serviceName: com.apple.madrid}
-->

<--
identityservicesd: (FTServices) [com.apple.IDS:FaceTime] Starting retry for message: (null)   (Request ID: <private>)
identityservicesd: (FTServices) [com.apple.IDS:Registration] Building URL request with topic: com.apple.private.alloy.nearby  bagKey:
identityservicesd: (FTServices) [com.apple.IDS:MessageDelivery]        User Agent: com.apple.madrid-lookup
identityservicesd: (FTServices) [com.apple.IDS:MessageDelivery]             Agent: <private>
identityservicesd: (FTServices) [com.apple.IDS:MessageDelivery]        <private>: <private>
identityservicesd: (FTServices) [com.apple.IDS:MessageDelivery]        <private>: <private>
identityservicesd: (FTServices) [com.apple.IDS:MessageDelivery]        x-apple-apns-dual-mode-delivery-type: <private>
identityservicesd: (FTServices) [com.apple.IDS:MessageDelivery]        x-id-sub-service: com.apple.private.alloy.nearby
identityservicesd: (FTServices) [com.apple.IDS:MessageDelivery]        x-push-token: <private>
identityservicesd: (FTServices) [com.apple.IDS:MessageDelivery]        <private>: <private>
identityservicesd: (FTServices) [com.apple.IDS:MessageDelivery]        x-id-self-uri: <private>
identityservicesd: (FTServices) [com.apple.IDS:MessageDelivery]        x-protocol-version: <private>
identityservicesd: (FTServices) REQUIRED_ATTRIBUTE - Warning, missing u to add to dictionary
identityservicesd: (FTServices) [com.apple.IDS:MessageDelivery] Final delivery payload: <private>
identityservicesd: (FTServices) [com.apple.IDS:MessageDelivery] Sending message: <private> as binary push
identityservicesd: (FTServices) [com.apple.IDS:FaceTime]    => Setting send timeout time: 10.000000
identityservicesd: (FTServices) [com.apple.IDS:FaceTime] Mapping messageID: <private>  message: <private>   APSMessage: <private>   timeout: 12.000000  timeoutSelector: <private>
identityservicesd: (FTServices) [com.apple.IDS:FaceTime] Noting message sent: <private>   (Request ID: <private>  Remaining: 1  Attempt: 1)
identityservicesd: (FTServices) [com.apple.IDS:FaceTime] Enabling required topics: <private>
identityservicesd: (ApplePushService) [com.apple.apsd:connection] <private> _sendOutgoingMessage: <private> [id=XXXXXXXXXX] com.apple.private.alloy.nearby <private> fake: NO syncToIvarQueue: NO
identityservicesd: (FTServices) [com.apple.IDS:FaceTime] Sent outgoing message: <private> to command:    (Request ID: <private>   Connection: <private>)
-->

<--
com.apple.IDS: IDSDelivery] Sending messageDictionary: {suppressed} peerMessage <private> wantsResponse YES timeout Mon Aug 21 19:19:41 2023 fromID: <private> toID (null) toPeople <private> topic com.apple.private.alloy.facetime.sync toMyself:YES
com.apple.IDS: IDSDelivery] Sending messageDictionary: {suppressed} peerMessage <private> wantsResponse YES timeout Mon Aug 21 19:20:08 2023 fromID: <private> toID (null) toPeople <private> topic com.apple.private.alloy.facetime.sync toMyself:YES
-->


The following is an unusual set of tasks by identityservicesd on the FTServices WebTunnel for 'Message Allow Dual Delivery'. After a diceroll ends with 'Diceroll Sucesss, dual query will be performed', the attackers declare 'Server says yes for APS delivery, lets go ahead and use that'.

<--
sharingd: (IDS) [com.apple.Registration:AccountEnabled] Notified account enabled <private> for service <private>
identityservicesd: (FTServices) [com.apple.IDS:WebTunnel] Message Allow Dual Delivery
identityservicesd: (FTServices) [com.apple.IDS:WebTunnel] Server Bag provided us with 2 Web Tunnel Version
identityservicesd: (FTServices) [com.apple.IDS:WebTunnel] Server Bag provided us with 100 Web Tunnel Percentage
identityservicesd: (FTServices) [com.apple.IDS:WebTunnel] Diceroll Was 71
identityservicesd: (FTServices) [com.apple.IDS:WebTunnel] Diceroll Sucesss, dual query will be performed
identityservicesd: (FTServices) [com.apple.IDS:WebTunnel] Server says yes for APS delivery, lets go ahead and use that
-->


Another example of the attackers activating service that the user has not turned on. These options are toggled off in the device settings:

<--
sharingd: [com.apple.sharing:Daemon] Device Capabilities (Auto Unlock:YES, Handoff:YES, Instant Hotspot:YES, AirDrop:YES, Remote Disc:NO)
-->


STEALTH DEVELOPER MODE

Once higher priveledges have been gained, it is possible for the group to begin the process of transforming the device into what is effectively a 'test-device'. This theory is confirmed in the snippet below of an Xcode output message for an emulator. 

<--
mobileactivationd: (libMobileGestalt.dylib) No persisted cache on this platform.
mobileactivationd: (libMobileGestalt.dylib) Property avd[ads-present] found <private>
mobileactivationd: [com.apple.mobileactivationd:daemon] Internal Build: false
mobileactivationd: [com.apple.mobileactivationd:daemon] Hardware Model: J274AP
mobileactivationd: [com.apple.mobileactivationd:daemon] Should Hactivate: false
mobileactivationd: [com.apple.mobileactivationd:daemon] FPGA: false
mobileactivationd: [com.apple.mobileactivationd:daemon] Dev-fused Undemoted: false
mobileactivationd: [com.apple.mobileactivationd:daemon] Prod-fused Demoted: false
mobileactivationd: [com.apple.mobileactivationd:daemon] Activation State: Activated
mobileactivationd: [com.apple.mobileactivationd:daemon] ____________________________________________________________________
mobileactivationd: (libbootpolicy.dylib) [com.apple.BootPolicy:Library] BootPolicy: bootpolicy_get_oic: entry
mobileactivationd: (libbootpolicy.dylib) [com.apple.BootPolicy:Library] BootPolicy: SEP command 38 (v7) returned 0
mobileactivationd: (libbootpolicy.dylib) [com.apple.BootPolicy:Library] BootPolicy: bootpolicy_get_oic: exit: success (0)
mobileactivationd: (libbootpolicy.dylib) [com.apple.BootPolicy:Library] BootPolicy: bootpolicy_get_blessed_remote_policy_nonce_digest: entry
mobileactivationd: (libbootpolicy.dylib) [com.apple.BootPolicy:Library] BootPolicy: SEP command 15 (v7) returned 0
mobileactivationd: (libbootpolicy.dylib) [com.apple.BootPolicy:Library] BootPolicy: bootpolicy_get_blessed_remote_policy_nonce_digest: exit: success (0)
mobileactivationd: (libbootpolicy.dylib) [com.apple.BootPolicy:Library] BootPolicy: bootpolicy_get_blessed_remote_policy_nonce_digest: entry
mobileactivationd: (libbootpolicy.dylib) [com.apple.BootPolicy:Library] BootPolicy: SEP command 15 (v7) returned 0
mobileactivationd: (libbootpolicy.dylib) [com.apple.BootPolicy:Library] BootPolicy: bootpolicy_get_blessed_remote_policy_nonce_digest: exit: success (0)
mobileactivationd: [com.apple.mobileactivationd:daemon] Activation State: Activated
...
mobileactivationd: (libxpc.dylib) [com.apple.xpc.activity:Client] xpc_activity_set_criteria: com.apple.mobileactivationd.UCRT.OOB (0x******770), check-in
mobileactivationd: (libxpc.dylib) [com.apple.xpc.activity:Client] xpc_activity_set_criteria, lower half: com.apple.mobileactivationd.UCRT.OOB (0x******770), check-in
mobileactivationd: (libxpc.dylib) [com.apple.xpc.activity:Client] _xpc_activity_set_criteria: com.apple.mobileactivationd.UCRT.OOB (0x******770), check-in
mobileactivationd: (libxpc.dylib) [com.apple.xpc.activity:Client] _xpc_activity_set_state: com.apple.mobileactivationd.UCRT.OOB (0x******770), 1
mobileactivationd: (libxpc.dylib) [com.apple.xpc.activity:Client] xpc_activity_set_criteria: com.apple.mobileactivationd.DCRT.OOB (0x******980), check-in
mobileactivationd: (libxpc.dylib) [com.apple.xpc.activity:Client] xpc_activity_set_criteria, lower half: com.apple.mobileactivationd.DCRT.OOB (0x******980), check-in
mobileactivationd: (libxpc.dylib) [com.apple.xpc.activity:Client] _xpc_activity_set_state: com.apple.mobileactivationd.DCRT.OOB (0x******980), 1
-->
https://www.virustotal.com/gui/ip-address/103.157.154.249
<--
useractivityd: [com.apple.useractivity:main] SIMULATOR: Created listener for child simulators, port=3c**
locationd: (LocationSupport) [com.apple.LocationSupport:Intersilo] {"msg":"#Manufacturing service complete", "EffectiveServiceName":"CLSimulatedLocationProvider"}
locationd: [com.apple.locationd.Core:Simulation] {"msg":"Do we have a listener?", "listtner":"<NSXPCListener: 0x******cc0> service: com.apple.locationd.simulation"}
com.apple.WebKit.Networking: (libnetwork.dylib) [com.apple.network:] __nwlog_err_simulate_crash simulate crash already simulated "nw_protocol_http2_connected protocol unknown has invalid connected callback"
nsurlsessiond: [com.apple.nsurlsessiond:background] Simulating network change event since 1 seconds have passed
ContextStoreAgent: (CoreDuet) Simulating crash. Reason: <private>
SoftwareUpdateNotificationManager: (SoftwareUpdateCoreSupport) [com.apple.su:SU] [SIMULATE] DISPATCH: created simulate dispatch queue domain(com.apple.su.core.simulate)
mobileassetd: (SoftwareUpdateCoreSupport) [com.apple.su:SU] [SIMULATE] DISPATCH: created simulate dispatch queue domain(com.apple.MAAuto.core.simulate)
Finder: [com.apple.Finder:Thumbnailing] ThumbnailCache (0x******ba8, kIconified) -- Retrieve: 'SimulatorPaymentPass.json' (0x*********160), Container: 'Resources' (0x*********a80), found: no
Finder: [com.apple.Finder:Thumbnailing] ThumbnailCache (0x******ba8, kIconified) -- Adding: 'SimulatorPaymentPass.json' (0x*********160), Container: 'Resources' (0x*********a80)
-->

<--
    "name" : "betaenrollmentd",
-->

<--
appstoreagent: (PlugInKit) [com.apple.PlugInKit:discovery] [d <private>] <PKHost:0x*****6f0> Beginning discovery for flags: 0, point: com.apple.appstored-services.testflight
appstoreagent: (PlugInKit) [com.apple.PlugInKit:discovery] [d <private>] <PKHost:0x******6f0> Query: {
    NSExtensionIdentifier = "com.apple.TestFlight.ServiceExtension";
    NSExtensionPointName = "com.apple.appstored-services.testflight";
}
appstoreagent: (libxpc.dylib) [com.apple.xpc.activity:Client] _xpc_activity_unregister: com.apple.appstored.activities.TestFlightExtensionSyncActivity 0, last registration: true
launchd: [pid/2795/com.apple.remotemanagement.ManagementTestSubscriber [2810]:] service state: exited
appstoreagent: [com.apple.appstored:General] [AgentRunLoop]: Starting TestFlightFeedback service
nearbyd: [com.apple.nearbyd:general] #ses-container,client <private> entitlements. BG: 1, SRTest: (null)
-->


The group use developer mode to operate between demo, development, production and unknown. Other enviroments include variables PV00, AS00 and SB-AS00. 

<--
apsd: [com.apple.apsd:connectionServer] <private>: Initializing connection server with environmentName 'development' and connectionPortName '<private>'
apsd: [com.apple.apsd:courier] <private>: Logging user with uid <private> into environment development
apsd: [com.apple.apsd:daemon] Unknown environment '<private>'
AddressBookSourceSync: (ApplePushService) [com.apple.apsd:connection] Initializing APSConnection <private>: env=production port=com.apple.AddressBook.PushNotification darkWakeEnabled=YES queue=<private>
remindd: (ApplePushService) [com.apple.apsd:connection] Initializing APSConnection <private>: env=demo port=com.apple.aps.remindd.dataaccess.demo darkWakeEnabled=YES queue=<private>
appstoreagent: (AppleMediaServices) [com.apple.AppleMediaServices:general] AMSURLProtocolHandler: [*****035] StatusCode: 200; <private>; Environment: PV00
itunescloudd: [com.apple.amp.itunescloudd:XPC] <Key Refresh> - Setting timer to perform periodic subscription tasks for 86400s (value from bag: 86400s; bag's server correlation key: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX; server environment: AS00).
amsaccountsd: (AppleMediaServices) [com.apple.AppleMediaServices:general] AMSURLProtocolHandler: [*****CA4] StatusCode: 200; <private>; Environment: SB-AS00
itunescloudd: (ApplePushService) [com.apple.apsd:connection] Initializing APSConnection <private>: env=demo port=com.apple.aps.itunescloudd darkWakeEnabled=YES queue=<private>
itunescloudd: (ApplePushService) [com.apple.apsd:connection] Illegal attempt to use port com.apple.aps.itunescloudd with environment 'demo' when already used for '<private>'
-->


When you have a non-compromised device it just runs normally in production mode. The activation of developer mode enables far greater freedom to make modifications and swap to beta app versions. Importantly, it allows for a lower security level. On macOS, developer mode is normally selected by toggling the option in settings and confirming via a pop-up. On my 2021 Macbook Pro M1 and 2020 Mac mini M1, the option is one of the options not available, but has been activated via the terminal by the attackers. Apple have certain safe guards which are meant to show user notifications to 'opt-in', however the Stealth Developer circumvents this by hiding notifications.

<--
distnoted: [com.apple.distnoted:diagnostic] register name: PHXDistributedSourceRemovedNotification object: kCFNotificationAnyObject token: XXXXXX003 pid: 1160
distnoted: [com.apple.distnoted:diagnostic] register name: AppleInterfaceMenuBarHidingChangedNotification object: kCFNotificationAnyObject token: XXXXXX003 pid: 8011
corespeechd: (AVFAudio) [com.apple.avfaudio:avvc] AVVCAudioDeviceManager.mm:1116  suppressRecordingIndicator - 1
-->


With developer mode force enabled, softwareupdated is able to download (via the service 'PKDownloader') a 10.15 version of XProtect.app, its plist and the MRT.app. It is then installed by PackageKit. When launched, AMFI raises a launch contraint violation, but allows it to continue (Process was launched as a system service unexpectedly but met System Service constraints). Oddly, XProtect does not run the malware scanners found. 

<--
kernel: attempting to load 2 external trust cache modules
kernel: loaded external trust cache module: 0
kernel: loaded external trust cache module: 1
kernel: completed loading external trust cache modules
kernel: initialized XNU provisioning profile data
kernel: initialized PPL provisioning profile data
kernel: (FairPlayIOKit) Warning: arc4random not implemented
kernel: (InvalidateHmac) Beginning SIO HMAC invalidation...
kernel: (InvalidateHmac) SIO HMAC invalidation config = 0
kernel: (InvalidateHmac) Finished SIO HMAC invalidation.
kernel: (AppleMobileFileIntegrity) AMFI: developer mode is force enabled on this platform
kernel: (AppleMobileFileIntegrity) AMFI: finished: 1 1
-->

<--
softwareupdated[253]: 032-10409: Starting download of XProtectPlistConfigData_10_15.pkg (Size:976727, HasIntegrityInformation:NO) with URL https://swcdn.apple.com/content/downloads/40/36/032-10409-A_0XOUESZHRK/95vzbq9sli4k3bg6y7ojjg5qq3brvow9sn/XProtectPlistConfigData_10_15.pkg
softwareupdated[253]: 032-59639: Starting download of XProtectPayloads_10_15.pkg (Size:15373225, HasIntegrityInformation:NO) with URL https://swcdn.apple.com/content/downloads/17/27/032-59639-A_ENSP9W21IT/1gk3of2vsp8ndazrxicc3d86vvpii5z8k4/XProtectPayloads_10_15.pkg
softwareupdated[253]: 012-04872: Starting download of MRTConfigData_10_15.pkg (Size:4705550, HasIntegrityInformation:NO) with URL https://swcdn.apple.com/content/downloads/01/16/012-04872-A_87SVGKDW9Y/b6gq6ejaampbg8x7auivl9h3rbabfxi8cu/MRTConfigData_10_15.pkg
softwareupdated[253]: SUUpdateSession: Skipping preflighting firmware since we're not on relevant hardware
system_installd[717]: PackageKit: Writing system content receipt for com.apple.pkg.XProtectPlistConfigData_10_15.16U4241 to /
system_installd[717]: Installed "XProtectPlistConfigData" (2166)
system_installd[717]: PackageKit: Writing system content receipt for com.apple.pkg.MRTConfigData_10_15.16U4211 to /
system_installd[717]: PackageKit: Touched bundle /Library/Apple/System/Library/CoreServices/MRT.app
system_installd[717]: Installed "MRTConfigData" (1.93)
system_installd[717]: PackageKit: Writing system content receipt for com.apple.pkg.XProtectPayloads_10_15.16U4244 to /
system_installd[717]: PackageKit: Touched bundle /Library/Apple/System/Library/CoreServices/XProtect.app
system_installd[717]: Installed "XProtectPayloads" (93)
-->

<--
kernel: (AppleMobileFileIntegrity) AMFI: Launch Constraint Violation (not enforcing), error info: c[6]p[2]m[3]e[255], (Process was launched as a system service unexpectedly but met System Service constraints) launching proc[vc: 1 pid: 319]: /Library/Apple/System/Library/CoreServices/XProtect.app/Contents/XPCServices/XProtectPluginService.xpc/Contents/MacOS/XProtectPluginService, launch type 1, failure proc [vc: 1 pid: 1]: /sbin/launchd
launchd: [system/com.apple.XprotectFramework.PluginService [319]:] service state: running
launchd: [system/com.apple.XprotectFramework.PluginService [319]:] internal event: INIT, code = 0
launchd: [system/com.apple.XprotectFramework.PluginService [319]:] Successfully spawned XProtectPluginService[319] because ipc (mach)
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] XprotectUpdateStorage singleton up!
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] PluginDispatcher coming online: 319 <_NSMainThread: 0x******a00>{number = 1, name = main}
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Service name: Optional("com.apple.XprotectFramework.PluginService")
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] XPC Info: Optional({
    ServiceType = Application;
})
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] XProtectPluginService connected to process with PID: 88
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Queuing a scan - Priority: XPPluginPriority(rawValue: 3)
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Refreshing executables
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Discovering executables @ ./ -- file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/
XProtectPluginService: (CarbonCore) [com.apple.CarbonCore:coreservicesdaemon] SCSession():SCSession( id=100, this=0x0x******1a0 option=65538) created, forUID=0 mach_port_t=0x2503.
XProtectPluginService: (CarbonCore) [com.apple.CarbonCore:coreservicesdaemon] SCSession():SCSession( id=101, this=0x0x******670 option=65538) created, forUID=0 mach_port_t=0x2403.
XProtectPluginService: (CarbonCore) [com.apple.CarbonCore:coreservicesdaemon] connectToCoreServicesD():Instantiating server (coreservicesd based) SCSession, port=0x2503 serverOptions=0x10002.
XProtectPluginService: (Security) SecTrustEvaluateIfNecessary
XProtectPluginService: (Security) [com.apple.securityd:keychain] System Keychain Always Supported set via feature flag to disabled
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found XProtect plugin: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorAdload
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Discovered remediator: com.apple.XProtectFramework.plugins.Adload
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Discovered scanner: com.apple.XProtectFramework.plugins.Adload
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found XProtect plugin: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorGreenAcre
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Discovered remediator: com.apple.XProtectFramework.plugins.GreenAcre
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Discovered scanner: com.apple.XProtectFramework.plugins.GreenAcre
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found XProtect plugin: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorKeySteal
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Discovered remediator: com.apple.XProtectFramework.plugins.KeySteal
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Discovered scanner: com.apple.XProtectFramework.plugins.KeySteal
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found XProtect plugin: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorPirrit
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Discovered remediator: com.apple.XProtectFramework.plugins.Pirrit
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Discovered scanner: com.apple.XProtectFramework.plugins.Pirrit
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found XProtect plugin: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorDubRobber
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Discovered remediator: com.apple.XProtectFramework.plugins.DubRobber
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Discovered scanner: com.apple.XProtectFramework.plugins.DubRobber
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found XProtect plugin: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorMRTv3
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Discovered remediator: com.apple.XProtectFramework.plugins.MRTv3
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Discovered scanner: com.apple.XProtectFramework.plugins.MRTv3
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found XProtect plugin: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorTrovi
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Discovered remediator: com.apple.XProtectFramework.plugins.Trovi
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Discovered scanner: com.apple.XProtectFramework.plugins.Trovi
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found XProtect plugin: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorSnowDrift
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Discovered remediator: com.apple.XProtectFramework.plugins.SnowDrift
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Discovered scanner: com.apple.XProtectFramework.plugins.SnowDrift
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found XProtect plugin: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorSnowBeagle
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Discovered remediator: com.apple.XProtectFramework.plugins.SnowBeagle
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Discovered scanner: com.apple.XProtectFramework.plugins.SnowBeagle
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found XProtect plugin: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorEicar
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Discovered remediator: com.apple.XProtectFramework.plugins.Eicar
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Discovered scanner: com.apple.XProtectFramework.plugins.Eicar
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found XProtect plugin: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorWaterNet
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Discovered remediator: com.apple.XProtectFramework.plugins.WaterNet
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Discovered scanner: com.apple.XProtectFramework.plugins.WaterNet
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found XProtect plugin: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorFloppyFlipper
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Discovered remediator: com.apple.XProtectFramework.plugins.FloppyFlipper
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Discovered scanner: com.apple.XProtectFramework.plugins.FloppyFlipper
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found XProtect plugin: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorBadGacha
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Discovered remediator: com.apple.XProtectFramework.plugins.BadGacha
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Discovered scanner: com.apple.XProtectFramework.plugins.BadGacha
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found XProtect plugin: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorGenieo
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Discovered remediator: com.apple.XProtectFramework.plugins.Genieo
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Discovered scanner: com.apple.XProtectFramework.plugins.Genieo
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found XProtect plugin: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorSheepSwap
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Discovered remediator: com.apple.XProtectFramework.plugins.SheepSwap
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Discovered scanner: com.apple.XProtectFramework.plugins.SheepSwap
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found XProtect plugin: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorToyDrop
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Discovered remediator: com.apple.XProtectFramework.plugins.ToyDrop
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Discovered scanner: com.apple.XProtectFramework.plugins.ToyDrop
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found remediator: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorFloppyFlipper
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Priority: XPPluginPriority(rawValue: 1)
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found remediator: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorTrovi
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Priority: XPPluginPriority(rawValue: 1)
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found remediator: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorGreenAcre
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Priority: XPPluginPriority(rawValue: 1)
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found remediator: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorAdload
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Priority: XPPluginPriority(rawValue: 1)
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found remediator: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorMRTv3
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Priority: XPPluginPriority(rawValue: 1)
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found remediator: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorGenieo
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Priority: XPPluginPriority(rawValue: 1)
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found remediator: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorWaterNet
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Priority: XPPluginPriority(rawValue: 1)
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found remediator: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorSnowDrift
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Priority: XPPluginPriority(rawValue: 1)
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found remediator: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorPirrit
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Priority: XPPluginPriority(rawValue: 1)
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found remediator: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorSnowBeagle
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Priority: XPPluginPriority(rawValue: 1)
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found remediator: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorSheepSwap
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Priority: XPPluginPriority(rawValue: 1)
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found remediator: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorToyDrop
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Priority: XPPluginPriority(rawValue: 1)
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found remediator: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorBadGacha
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Priority: XPPluginPriority(rawValue: 1)
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found remediator: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorEicar
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Priority: XPPluginPriority(rawValue: 2)
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found remediator: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorDubRobber
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Priority: XPPluginPriority(rawValue: 1)
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found remediator: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorKeySteal
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Priority: XPPluginPriority(rawValue: 1)
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found scanner: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorBadGacha
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found scanner: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorKeySteal
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found scanner: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorGenieo
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found scanner: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorPirrit
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found scanner: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorTrovi
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found scanner: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorDubRobber
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found scanner: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorSnowDrift
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found scanner: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorToyDrop
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found scanner: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorAdload
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found scanner: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorWaterNet
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found scanner: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorFloppyFlipper
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found scanner: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorEicar
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found scanner: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorSheepSwap
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found scanner: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorSnowBeagle
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found scanner: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorGreenAcre
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] Found scanner: file:///Library/Apple/System/Library/CoreServices/XProtect.app/Contents/MacOS/XProtectRemediatorMRTv3
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] No scanners to run...
XProtectPluginService: [com.apple.XProtectFramework:XProtectPluginService] 0 scanners completed in 1.7097649574279785s
XProtect: [com.apple.XProtectFramework:Runner] Finished system scan, ran as 0, with priority Startup
launchd: [system/com.apple.XProtect.daemon.scan.startup [88]:] exited due to exit(0)
launchd: [system/com.apple.XProtect.daemon.scan.startup [88]:] service state: exited
launchd: [system/com.apple.XProtect.daemon.scan.startup [88]:] internal event: EXITED, code = 0
launchd: [system:] service inactive: com.apple.XProtect.daemon.scan.startup
launchd: [system/com.apple.XProtect.daemon.scan.startup [88]:] service state: not running
launchd: [pid/88 [XProtect]:] shutting down
launchd: [pid/88 [XProtect]:] cleaning up
...
launchd: [pid/146 [syspolicyd]:] Service stub created for com.apple.XProtectBehaviorService
launchd: [pid/146 [syspolicyd]:] Service stub created for com.apple.XProtectFramework.UpdateService
launchd: [pid/146 [syspolicyd]:] Service stub created for com.apple.XprotectFramework.AnalysisService
launchd: [pid/146 [syspolicyd]:] Service stub initialized for com.apple.XProtectBehaviorService
-->


I had suspected there was something suspicious happening during boot up. The login screen would appear briefly and then disappear again and some time would pass before I was presented with the password login screen. Even that was glitchy, I would start typing and it would flicker off again and return. As I've come to learn more, the 'HideUntilCheckIn' on various display items now makes more sense. 

<--
launchd: [gui/501/com.apple.SystemUIServer.agent:] (lint): The HideUntilCheckIn property is an architectural performance issue. Please transition away from it.
-->

Then I located the com.apple.windowserver.plist

<--
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict> <key>Label</key>
	<string>com.apple.WindowServer</string>
	<key>MachServices</key>
	<dict> 
	<key>com.apple.iohideventsystem</key>
	<dict> 
		<key>ResetAtClose</key>
		<true/>
	</dict>
	<key>com.apple.windowserver</keys
	<true/>
	<key>com.apple.windowserver.active</key>
	<dict> 
		<key>HideUntilCheckIn</key>
		<true/>
	</dict>
	<key>com.apple.windowserver.watchdog</key>
	<dict> 
		<key>HideUntilCheckIn</key>
		<true/>
	</dict>
	<key>com.apple.CARenderServer</key>
	<dict> 
		<key>HideUntilCheckIn</key>
		<true/>
	</dict>
	<key>com.apple.CoreDisplay.master</key>
	<dict> 
		<key>HideUntilCheckIn</key>
		<true/>
	</dict>
	<key>com.apple.CoreDisplay.Notification</key>
	<dict> 
		<key>HideUntilCheckIn</key>
		<true/>
		<key>ResetAtClose</key>
		<true/>
	</dict>
	<key>com.apple.VirtualDisplay</key>
	<dict> 
		<key>HideUntilCheckIn</key>
		<true/>
	</dict>
	<key>POSIXSpawnType</key>
	<string>Interactive</string>
	<key>ProgramArguments</key>
	<array>
		<string>/System/Library/PrivateFrameworks/SkyLight.framework/Resources/WindowServer</string>
		<string>-daemon</string>
	</array>
</dict>
</plist>
-->


Developer Attestation Certificates.

<--
identityservicesd: (DeviceIdentity) Returning cached certificates:
* <cert(0x*******70) s: xxxxx redacted xxxxx i: Basic Attestation User Sub CA1>
    Not Valid Before: Fri Jul 14 17:34:21 2023
  Not Valid After: Mon Sep 25 16:34:21 2023
* <cert(0x*******f0) s: Basic Attestation User Sub CA1 i: Basic Attestation User Root CA>
    Not Valid Before: Thu Apr 20 10:42:00 2017
  Not Valid After: Mon Mar 22 11:00:00 2032
* Server Timestamp: Sat Mar 18 17:34:21 2023
identityservicesd: [com.apple.IDS:Registration] Completed fetch of device identity for validation session {referenceKey: YES, certificates: 2, error: (null)}
identityservicesd: [com.apple.IDS:Registration] Device identity fetch final block called {timedOut: NO}
identityservicesd: [com.apple.IDS:Registration] Completed device identity fetch {success: YES, referenceKey: YES, certificates: 2, error: (null)}
identityservicesd: [com.apple.IDS:Registration] Using BAA-only validation
identityservicesd: [com.apple.IDS:Registration] Adding option to new validation session
identityservicesd: [com.apple.IDS:Registration] Successfully added option to validation session
...
networkserviceproxy: (NetworkServiceProxy) [com.apple.networkserviceproxy:Large] Validated configuration <NSPPrivacyProxyConfiguration: 0x******c50> {
    authInfo =     {
        accessTokenKnownOrigins =         (
            "challenges.cloudflare.com",
            "hcaptcha.com",
            "recaptcha.net"
        );
        accessTokenTypes =         (
        );
        accessTokenURL = "https://attester.gateway.icloud.com/token-request";
        authType = "BAA_ANISETTE";
        authURL = "https://mask-api.icloud.com/v1/fetchAuthTokens";
    };
    bootstrapResolver =     {
        dohURL = "https://mask.icloud.com/dns-query";
    };
    enabled = 1;
-->


Here are some further login window events. 'UNKNOWN' is possibly a remote server, an environment or one of the many disks.

<--
loginwindow: [com.apple.loginwindow.logging:Standard] -[Login1 deleteUpgradeInstallIfNeeded] | Enter
loginwindow: [com.apple.loginwindow.logging:Standard] -[Login1 doLogin] | shortUsername = *****, userID = 501, groupID = 20
loginwindow: [com.apple.loginwindow.logging:Standard] -[ScreenShots delayedCopyAndShowLWScreenShotsIfNeeded] |                 finishLaunching - initIfScreenshotNeedsToShowInFinder
loginwindow: [com.apple.loginwindow.logging:Standard] -[Login1 doLogin] | call login notification for screen sharing
launchd: [loginwindow/7896:] failed lookup: name = com.apple.screensharing.server, flags = 0x1, requestor = loginwindow[7896], error = 3: No such process
loginwindow: [com.apple.loginwindow.logging:Standard] ScreensharingLoginNotification | Failed GetScreensharingPort, returned error BOOTSTRAP_UNKNOWN_SERVICE, expected if machine is not being remotely controlled
...
loginwindow: [com.apple.loginwindow.logging:Standard] -[ScreenShots delayedCopyAndShowLWScreenShotsIfNeeded]_block_invoke | enter
loginwindow: [com.apple.loginwindow.logging:Standard] -[ScreenShots copyScreenShotsToPath:from:] | enter, checking: /var/log/LWScreenshots
loginwindow: [com.apple.loginwindow.logging:Standard] -[ScreenShots copyScreenShotsToPath:from:] | enter, checking: /var/log/SetupUserScreenshots
-->


A crash log during loginwindow transformation gave some insight into some of the developer related services in use during boot up. 

<--
launchd: [loginwindow/150:] removing service: com.apple.dt.xcodepreviewsapp
launchd: [loginwindow/150:] removing service: com.apple.preference.displays.MirrorDisplays
launchd: [loginwindow/150:] removing service: com.apple.dt.previewsviewservice
launchd: [loginwindow/150:] removing service: com.apple.universalaccesscontrol
launchd: [loginwindow/150:] removing service: com.apple.findmymacmessenger
launchd: [loginwindow/150:] removing service: com.apple.uikitsystemapp
launchd: [loginwindow/150:] removing service: com.apple.DistributionKit.DistributionHelper
launchd: [loginwindow/150:] removing service: com.apple.netauth.user.gui
launchd: [loginwindow/150:] removing service: com.apple.LocalAuthentication.UIAgent
launchd: [loginwindow/150:] removing service: com.apple.security.XPCTimeStampingService
launchd: [loginwindow/150:] removing service: com.apple.pluginkit.pkd
launchd: [loginwindow/150:] removing service: com.apple.RemoteDesktop.agent
launchd: [loginwindow/150:] removing service: com.apple.CoreAuthentication.agent
launchd: [pid/325/com.apple.audio.AUHostingService.x86-64:] internal event: PETRIFIED, code = 0
launchd: [pid/325/com.apple.audio.AUHostingService.arm64e:] internal event: PETRIFIED, code = 0
launchd: [loginwindow/150:] removing service: com.apple.controlstrip
launchd: [loginwindow/150:] removing service: com.apple.storelegacy
launchd: [loginwindow/150:] removing service: com.apple.iokit.IOServiceAuthorizeAgent
launchd: [loginwindow/150:] removing service: com.apple.dt.AutomationModeUI
launchd: [loginwindow/150:] removing service: com.apple.coreservices.UASharedPasteboardProgressUI
launchd: [loginwindow/150:] removing service: com.apple.btsa
launchd: [loginwindow/150:] removing service: com.apple.DwellControl
launchd: [loginwindow/150:] removing service: com.apple.screensharing.menuextra
launchd: [loginwindow/150:] removing service: com.apple.screensharing.agent
launchd: [loginwindow/150:] removing service: com.apple.security.XPCKeychainSandboxCheck
launchd: [loginwindow/150:] removing service: com.apple.package-script-service
launchd: [loginwindow/150:] removing service: com.apple.speech.speechsynthesisd.arm64
launchd: [loginwindow/150:] removing service: com.apple.speech.speechsynthesisd.x86_64
launchd: [loginwindow/150:] removing service: com.apple.CryptoTokenKit.ahp.agent
-->

<--
kernel: [System Event] [*********300] [INFO] [Subsystem: nvram] [Event: delete] boot-image
kernel: [System Event] [*********123] [INFO] [Subsystem: nvram] [Event: delete] boot-image
kernel: [System Event] [*********653] [INFO] [Subsystem: nvram] [Event: delete] boot-image
kernel: [System Event] [*********208] [INFO] [Subsystem: nvram] [Event: delete] boot-image
kernel: [System Event] [*********674] [INFO] [Subsystem: nvram] [Event: delete] boot-image
kernel: [System Event] [*********410] [INFO] [Subsystem: nvram] [Event: delete] boot-image
-->


DEVELOPER TOOLS

There is a variety of tools found to be used on the Apple, Android and Chromebook products we have. Firebase, App Attest, Managed Device Attestation, Crashlytics, Google Tag Manager, Appium are just a few of many. 

<--
DemoDisk
ImageFactory
DemoDiskImageFactory
/Developer/private/var/personalized_automation/private/var/personalized_demo/private/var/personalized_debug/System/DeveloperLibrary/Frameworks/DTRemoteServices.frameworkversion.plist/private/var/personalized_factory
/System/Volumes/FieldService
/System/Volumes/FieldServiceDiagnostic
/System/Volumes/FieldServiceRepair/private/var/personalized_quality/private/var/run/com.apple.security.crypted/mntremovablev2
/AppleInternal/Library/
BuildRoots/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/
MacosX13.2.Internal.sdk/usr/local/lib/
-->


ARCHITECTURE

The Macs are 'weird machines', there is a variety of MacGyver'd cobbled together operating systems detected and my limited knowledge prevents me from understanding how these all hang together. There are commands for Windows Subsytem for Linux and PowerPC too. There is evidence of Linux, QEMU, Windows, OS X (an early version), macOS and iOS. There are also many vintage scripts hidden in a variety of buried folders.

<--
kernelmanagerd: (Security) [com.apple.securityd:security_exception] UNIX error exception: 8
SecurityAgent: (loginsupport) [com.apple.loginwindow:Users] user can't login because the password is not allowed: <LWUIUser: 0xXXXXXXXXX700: Unix to Unix Copy Protocol>
kernel: (Sandbox) 1 duplicate report for Sandbox: sharingd(442) deny(1) syscall-unix 322
-->


DISK STRUCTURE MODIFICATIONS

The disks on the Macs are now structured as per below. I've come to know is 'Container Hell'. Disk 3 is the disk that seems have the various 'platforms' on it. 

<--
/dev/disk5s2
/dev/disk4s3
/dev/disk4s1
/dev/disk4
/dev/disk3s6
/dev/disk3s5
/dev/disk3s4
/dev/disk3s3s1
/dev/disk3s3
/dev/disk3s2
/dev/disk3s1
/dev/disk3
/dev/disk2s2
/dev/disk2s1
/dev/disk2
/dev/disk1s4
/dev/disk1s3
/dev/disk1s2
/dev/disk1s1
/dev/disk1
/dev/disk0s3
/dev/disk0s2
/dev/disk0s1
/dev/disk0
-->

<--
kernel: (Sandbox) identified disk4 as a disk image
kernel: (Sandbox) identified disk4s1 as a disk image
kernel: imageboot_pivot_image: attached disk image /System/Volumes/Recovery/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX525/boot/XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXA6A/usr/standalone/firmware/arm64eBaseSystem.dmg as disk4s1
-->


DATA PATHS

In daemon and process data file plists there are mentions of:

<--
Failed to enter sandbox: %{public}s 
$HOME not set, falling back to using getpwuid 
failed to resolve user's home directory: %{darwin.errno}d
/AppleInternal/Library/
BuildRoots/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/
MacosX13.2.Internal.sdk/usr/local/lib/
-->

Command:          containermanagerd
Path:             /usr/libexec/containermanagerd
Resource Coalition ID: 87
Architecture:     arm64
Parent:           launchd [1]
PID:              69

Event:            disk writes
Action taken:     none
Writes:           1073.75 MB of file backed memory dirtied over 635 seconds (1692.09 KB per second average), exceeding limit of 12.43 KB per second over 86400 seconds
Writes limit:     1073.74 MB
Limit duration:   86400s
Writes caused:    1073.75 MB
Writes duration:  635s
Duration:         634.57s
Duration Sampled: 634.14s
Steps:            169 (10.49 MB/step)


DMG GRAFT

<--
kernel: (apfs) graft_dev_init:377: disk3 os.dmg GRAFT (compiled @ Aug 14 2023 21:25:19)
kernel: (apfs) graft_dev_init:380: disk3 os.dmg device_handle block size 4096 real block size 4096 block count 1076736 features 0 internal
kernel: (apfs) authenticate_root_hash:624: os.dmgs1 successfully validated on-disk root hash
kernel: (apfs) apfs_graft:674: disk3s4 successfully grafted ino 999 on dir 1239, dev_name [os.dmg]
...
kernel: (apfs) graft_dev_init:377: disk3 app.dmg GRAFT (compiled @ Aug 14 2023 21:25:19)
kernel: (apfs) authenticate_root_hash:624: app.dmgs1 successfully validated on-disk root hash
kernel: (apfs) apfs_graft:674: disk3s4 successfully grafted ino 1003 on dir 1240, dev_name [app.dmg]
...
kernel: (apfs) apfs_graft:455: disk3s4 Grafting a clone, share blockmap lut with os.dmg
kernel: (apfs) graft_dev_init:377: disk3 os.clone.dmg GRAFT (compiled @ Aug 14 2023 21:25:19)
kernel: (apfs) authenticate_root_hash:624: os.clone.dmgs1 successfully validated on-disk root hash
kernel: (apfs) apfs_graft:674: disk3s4 successfully grafted ino 1000 on dir 1242, dev_name [os.clone.dmg]
-->


RPCSVCHOST

MobileAssetBrain is one of the logs on the iOS devices. There isn't any information about what it is.

<--
launchd: [pid/207 [awdd]:] uncorking exec source upfront
launchd: [pid/207 [awdd]:] created
launchd: [system/com.apple.msrpc.netlogon [230]:] service state: running
launchd: [system/com.apple.msrpc.netlogon [230]:] internal event: INIT, code = 0
launchd: [system/com.apple.msrpc.netlogon [230]:] Successfully spawned rpcsvchost[230] because ipc (socket)
launchd: [pid/230 [rpcsvchost]:] uncorking exec source upfront
launchd: [pid/230 [rpcsvchost]:] created
mobileassetd: [MAB] Successfully updated launch history with new record:
{
    LaunchDate = "2023-08-04 21:47:38 +0000";
    PID = 177;
}
mobileassetd: [MAB] Attempting to load MobileAssetBrain at /usr/lib/libmobileassetd.dylib
-->


MACOS REINSTALL

Looking at the logs of the first start-up after the Apple Store full-reset, it is clear that there is a persistence method for the reapplication of the exploit. 

The following is an example of information in shared memory with a seed number that is deemed as still valid. The system then uses that cached information. A fresh reinstall does not actually fully remove data from the system, which has implications for those selling their computer or device. Moreover, those wanting to eradicate malware or perform a complete reinstall will not achieve their goal. 

The information is compiled with: "DTCompiler"="com.apple.compilers.llvm.clang.1_0". The clang compiler plist is found in the hidden file 'com.apple.containermanagerd.metadata.plist' found in most folders throughout the Macs. This is also discussed in the section 'Persistence'.

Logs show various example of things being 'found in the shared memory' which are re-used.

<--
Spotlight: (LaunchServices) [com.apple.launchservices:cas] information in shared memory for 0x0-0x***16 with seed 520 was still valid, so using cached info { "ChangeCount"=520, "DTSDKBuild"="22E240", "NSSupportsAppNap"=true, "LSApplicationHasRegistered"=true, "LSASN"=ASN:0x0-0x***16:, "CFBundleExecutable"="Spotlight", "NSPrincipalClass"="SPTestApplication", "LSExecutableFilenameLowerCaseKey"="spotlight", "NSMainNibFile"="MainMenu", "BundleIdentifierLowerCase"="com.apple.spotlight", "LSBundlePathDeviceID"=******29, "CFBundleDisplayName"="Spotlight", "LSBundlePath"="/System/Library/CoreServices/Spotlight.app", "LSExecutableFileName"="Spotlight", "DTXcodeBuild"="14E6097d", "CFBundleNumericVersion"=********48, "CFBundleIdentifier"="com.apple.Spotlight", "LSExecutableSDKVersion"="13.5", "LSArchitecture"="arm64", "NSLocationUsageDescription"="Siri Suggestions uses your location to provide more accurate local results.", "LSPersistenceSuppressRelaunchAtLogin"=true, "DTPlatformName"="macosx", "CFBundleDevelopmentRegion"="en_US", "CFBundleVersion"="42.5.4", "DTSDKName"="macosx13.5.internal", "LSDYLDPlatformKey"=1, "CFBundleExecutablePathINode"=1<…>
...
loginwindow: (LaunchServices) [com.apple.launchservices:cas] information in shared memory for 0x0-0x3003 with seed 518 was still valid, so using cached info { "ChangeCount"=518, "LSApplicationReadyToBeFrontableKey"=true, "LSApplicationHasRegistered"=true, "DTSDKBuild"="22E251", "LSExecutableFileName"="loginwindow", "LSBundlePath"="/System/Library/CoreServices/loginwindow.app", "NSPrincipalClass"="LoginApp", "LSExecutableFilenameLowerCaseKey"="loginwindow", "BundleIdentifierLowerCase"="com.apple.loginwindow", "NSMainNibFile"="loginwindow", "LSBundlePathDeviceID"=XXXXXXXX, "LSASN"=ASN:0x0-0x3003:, "CFBundleNameLowerCase"="loginwindow", "DTXcodeBuild"="14E6097d", "CFBundleNumericVersion"=0, "LSRequiresNativeExecution"=true, "CFBundleIdentifier"="com.apple.loginwindow", "ApplicationType"="UIElement", "LSArchitecture"="arm64", "BuildMachineOSBuild"="22A380007", "DTPlatformName"="macosx", "DTCompiler"="com.apple.compilers.llvm.clang.1_0", "CFBundleVersion"="2082.4.2", "DTSDKName"="macosx13.5.internal", "NSDisablePersistence"=true, "DTPlatformBuild"="22E251", "LSAuditToken"=$FFFFFFFF00000000000000000000000000000000XXXXXXXXXXXXXXXXXXX10000, "CF<…>
-->


The following is a list in a log that is found in the shared memory and reused.

<--
Installer Progress.app, universalaccessd, loginwindow.app/LoginApp, SecurityAgent/securityagent.bundle/SFAgentApp, WiFiAgent/Wi-Fi/WiFiAgent.app, ViewBridgeAuxiliary, Dock/com.apple.dock.extra, SystemUIServer, WindowManager/WindowManager.app, controlcenter/com.apple.controlcenter, AXVisualSupportAgent, CoreLocationAgent/corelocationagent.app, CoreServicesUIAgent/CoreServicesUIAgent.app/com.apple.coreservices.uiagent, talagent, QuickLookUIService, NotificationCenter.app/com.apple.notificationcenterui, BackgroundTaskManagentAgent/com.apple.backgroundtaskmanagement.agent/backgroundtaskmanagement.app, AccessibilityVisualsAgent, Finder.sdef/Finder.app/com.apple.Finder (schemes: file, afp, ftp, smb, nwnode), SPTestApplication/Spotlight/Spotlight.app/com.apple.spotlight (NSPrincipalClass=SPTestApplication/ CFBundleDevelopmentRegion=en_US), TextInputMentAgent/com.apple.TextInputMenuAgent, AirPlayUIAgent/AirPlayUIAgent.app/com.apple.airplayuiagent, TextInputSwitcher/com.apple.TextInputSwitcher/textinputswitcher.app, com.apple.AppSSOAgent/Single Sign-On, AppSSODaemon, Microsoft Update Assistant, Keychain Circle Notification/com.apple.security.keychain-circle-notification, keychain circle notification.app, AOSHeartbeart/com.apple.aosheartbeat, Terminal/Terminal shell script (telnet, ssh, x-man-page, SoftwareUpdateNotificationManager/SoftwareUpdateNotificationManager.app
-->

The system also finds a number of 'exceptions' thus nullifying the objective of a fresh install (reinstalling from macOS on an external drive). It also documents the skipping of various disks. 

<--
mobile_obliterator[91]: Disk: disk0 is an internal disk, continue scanning volumes
mobile_obliterator[91]: PARTITION SCHEME for: disk0 is 2
mobile_obliterator[91]: Partition Scheme Of Interest in disk0
mobile_obliterator[91]: TopLevelDisk: ioType: GUID_partition_scheme, Type:GUID_partition_scheme, Disk:disk0, size:251000193024
mobile_obliterator[91]: ChildDiskIdentifier:disk0s1, Type:Apple_APFS_ISC, VolumeName:(null) Size: 524.3 MB
mobile_obliterator[91]: ChildDiskIdentifier:disk0s2, Type:Apple_APFS, VolumeName:(null) Size: 245.1 GB
mobile_obliterator[91]: Found an APFS Container, candidate for deletion
imklaunchagent[56]: Use NVRAM prev-lang:kbd value (15) as default ASCII input source: Australian
mobile_obliterator[91]: ChildDiskIdentifier:disk0s3, Type:Apple_APFS_Recovery, VolumeName:(null) Size: 5.4 GB
mobile_obliterator[91]: Found Deletable Volumes Successfully and it is (
	        (
	        "iSC Preboot",
	        disk1s1,
	        iSCPreboot,
	        "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXF30"
	    ),
	        (
	        "iSC xART",
	        disk1s2,
	        xART,
	        "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX890"
	    ),
	        (
	        "iSC Hardware",
	        disk1s3,
	        Hardware,
	        "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX9E0"
	    ),
	        (
	        "iSC Recovery",
	        disk1s4,
	        Recovery,
	        "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX59D"
	    ),
	        (
	        PreservedOS,
	        disk3,
	        disk0s2,
	        "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX37D",
	                (
	                        (
	                Data,
	                disk3s1,
	                "Macintosh HD - Data",
	                "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX1B4"
	            ),
	                        (
	                Update,
	                disk3s2,
	                Update,
	                "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX941"
	            ),
	                        (
	                System,
	                disk3s3,
	                "Macintosh HD",
	                "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX4A4"
	            ),
	                        (
	                System,
	                disk3s3s1,
	                "Macintosh HD",
	                "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX1C7"
	            ),
	                        (
	                Preboot,
	                disk3s4,
	                Preboot,
	                "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX201"
	            ),
	                        (
	                Recovery,
	                disk3s5,
	                Recovery,
	                "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXA33"
	            ),
	                        (
	                VM,
	                disk3s6,
	                VM,
	                "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXDEB"
	            )
	        )
	    ),
	        (
mobile_obliterator[91]: Found the following specific system volumes: {
	    "rOS Recovery" = ?
	    "iSC Hardware" = disk1s3;
	    "iSC Preboot" = disk1s1;
	    "iSC Recovery" = disk1s4;
	    "iSC xART" = disk1s2;
	    "rOS Recovery" = disk2s1;
	    "rOS Update" = disk2s2;
	}
mobile_obliterator[91]: Deleting volume disk3s1 which is of type Data
imklaunchagent[182]: Use NVRAM prev-lang:kbd value (15) as default ASCII input source: Australian
mobile_obliterator[91]: Mount path for disk3s3 is '/Volumes/Macintosh HD'
mobile_obliterator[91]: renameSystemVolume: renaming the system disk disk3s3 to 'Macintosh HD' return 0x0(0)
mobile_obliterator[91]: Creating the data volume in container disk3 grouped with the system volume disk3s3s1
mobile_obliterator[91]: About to create a new data volume named 'Macintosh HD - Data' in contianer disk3
mobile_obliterator[91]: Data volume create completed with error value 0
mobile_obliterator[91]: ISAP: Done with Phase "Reset My Mac - system rebuild"
mobile_obliterator[91]: Setting up the new data volume in container disk3
Installer Progress[63]: Done with phase = "Reset My Mac - system rebuild"
Installer Progress[82]: Hiding Progress UI
-->
<--
mobile_obliterator[91]: Skipping deletion of volume disk3s2 which is of type Update and should be preserved
mobile_obliterator[91]: Skipping deletion of volume disk3s3 which is of type System and should be preserved
mobile_obliterator[91]: Skipping deletion of volume disk3s3s1 which is of type System and should be preserved
mobile_obliterator[91]: Skipping deletion of volume disk3s4 which is of type Preboot and should be preserved
mobile_obliterator[91]: Skipping deletion of volume disk3s5 which is of type Recovery and should be preserved
mobile_obliterator[91]: Skipping deletion of volume disk3s6 which is of type VM and should be preserved
mobile_obliterator[91]: Mount path for disk3s4 is '/System/Volumes/Preboot'
mobile_obliterator[91]: Removing the contents of '/System/Volumes/Preboot' (exceptionList: {
	    "/defaultAction/" = remove;
	    "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX2BB" = "removeExcept /boot/ /restore/ /cryptex1/";
	    Cryptexes = "removeExcept /OS/ /App/ /Incoming/";
	})
mobile_obliterator[91]: Deleting FS item '/System/Volumes/Preboot/staging'
mobile_obliterator[91]: Found exception 'removeExcept /OS/ /App/ /Incoming/' for 'Cryptexes'
mobile_obliterator[91]: Removing the contents of '/System/Volumes/Preboot/Cryptexes' (exceptionList: {
	    "/defaultAction/" = remove;
	    App = keep;
	    Incoming = keep;
	    OS = keep;
	})
mobile_obliterator[91]: Found exception 'keep' for 'App'
mobile_obliterator[91]: Found exception 'keep' for 'OS'
mobile_obliterator[91]: Found exception 'keep' for 'Incoming'
mobile_obliterator[91]: Deleting FS item '/System/Volumes/Preboot/com.apple.security.cryptexd'
mobile_obliterator[91]: Found exception 'removeExcept /boot/ /restore/ /cryptex1/' for 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX2BB'
mobile_obliterator[91]: Removing the contents of '/System/Volumes/Preboot/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX2BB' (exceptionList: {
	    "/defaultAction/" = remove;
	    boot = keep;
	    cryptex1 = keep;
	    restore = keep;
	})
mobile_obliterator[91]: Deleting FS item '/System/Volumes/Preboot/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX2BB/usr'
mobile_obliterator[91]: Deleting FS item '/System/Volumes/Preboot/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX2BB/PreLoginData'
mobile_obliterator[91]: Found exception 'keep' for 'boot'
mobile_obliterator[91]: Found exception 'keep' for 'cryptex1'
mobile_obliterator[91]: Deleting FS item '/System/Volumes/Preboot/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX2BB/var'
mobile_obliterator[91]: Deleting FS item '/System/Volumes/Preboot/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX2BB/Library'
mobile_obliterator[91]: Deleting FS item '/System/Volumes/Preboot/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX2BB/System'
mobile_obliterator[91]: Found exception 'keep' for 'restore'
mobile_obliterator[91]: Mount path for disk3s4 is '/System/Volumes/Preboot'
mobile_obliterator[91]: Created the folder /System/Volumes/Preboot/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX2BB/System/Library/CoreServices for com.apple.Boot.plist (error Error Domain=NSPOSIXErrorDomain Code=0 "Undefined error: 0")
mobile_obliterator[91]: NOTE: volume disk3s5 is mounted RO and requested RW, trying to re-mount as RW
mobile_obliterator[91]: Mount path for disk3s5 is '/System/Volumes/Recovery'
mobile_obliterator[91]: Removing the contents of '/System/Volumes/Recovery' (exceptionList: {
	    "/defaultAction/" = remove;
	    "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX2BB" = traverse;
	    "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX2BB/boot" = keep;
	    "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX2BB/usr" = "removeExcept standalone/firmware/arm64eBaseSystem.dmg";
	})
mobile_obliterator[91]: Deleting FS item '/System/Volumes/Recovery/staging'
mobile_obliterator[91]: Found exception 'traverse' for 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX2BB'
mobile_obliterator[91]: Removing the contents of '/System/Volumes/Recovery/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX2BB' (exceptionList: {
	    "/defaultAction/" = remove;
	    boot = keep;
	    usr = "removeExcept standalone/firmware/arm64eBaseSystem.dmg";
	})
mobile_obliterator[91]: Found exception 'removeExcept standalone/firmware/arm64eBaseSystem.dmg' for 'usr'
mobile_obliterator[91]: Removing the contents of '/System/Volumes/Recovery/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX2BB/usr/standalone/firmware' (exceptionList: {
	    "/defaultAction/" = remove;
	    "arm64eBaseSystem.dmg" = keep;
	})
mobile_obliterator[91]: Found exception 'keep' for 'arm64eBaseSystem.dmg'
mobile_obliterator[91]: Removing the contents of '/System/Volumes/Recovery/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX2BB/usr/standalone' (exceptionList: {
	    "/defaultAction/" = remove;
	    firmware = keep;
	})
mobile_obliterator[91]: Found exception 'keep' for 'firmware'
mobile_obliterator[91]: Removing the contents of '/System/Volumes/Recovery/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX2BB/usr' (exceptionList: {
	    "/defaultAction/" = remove;
	    standalone = keep;
	})
mobile_obliterator[91]: Found exception 'keep' for 'standalone'
mobile_obliterator[91]: Found exception 'keep' for 'boot'
mobile_obliterator[91]: Mount path for disk1s1 is '/System/Volumes/iSCPreboot'
Mac-mini opendirectoryd[66]: [session] Received a network change notification
mobile_obliterator[91]: bootpolicy_remove_all_other_local_policies() completed
mobile_obliterator[91]: Mount path for disk1s3 is '/System/Volumes/Hardware'
mobile_obliterator[91]: Keeping the contents of '/System/Volumes/Hardware' (exceptionList: {
	    "/defaultAction/" = keep;
	    MobileActivation = remove;
	    dcrt = remove;
	    "fcrt.pem" = remove;
	    recoverylogd = remove;
	})
mobile_obliterator[91]: Found exception 'remove' for 'recoverylogd'
mobile_obliterator[91]: Deleting FS item '/System/Volumes/Hardware/recoverylogd'
mobile_obliterator[91]: Found exception 'remove' for 'MobileActivation'
mobile_obliterator[91]: Deleting FS item '/System/Volumes/Hardware/MobileActivation'
mobile_obliterator[91]: Wiping all container-volume keys
mobile_obliterator[91]: Obliterating all security keys
mobile_obliterator[91]: IOService to sepService successful
Mac-mini Installer Progress[63]: Unable to quit because there are connected processes
Mac-mini Installer Progress[63]: Connected processes {
	    "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX582" =     {
	        CompletionHandlerKey = "<__NSMallocBlock__: 0xXXXXXXXXX700>";
	        "Phase Name" = "Reset My Mac - system cleanup";
	        "Process ID" = 91;
	        UUID = "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX582";
	    };
	}
mobile_obliterator[91]:  Completed  obliterate_gigalockers
mobile_obliterator[91]: Obliterating D-Keys
Mac-mini opendirectoryd[66]: [session] Received a network change notification
Mac-mini opendirectoryd[66]: [session] Received a network change notification
mobile_obliterator[91]: Revoking D Key: Successful
mobile_obliterator[91]: Disabling local boot policies
Mac-mini opendirectoryd[66]: [session] Received a network change notification
Mac-mini opendirectoryd[66]: [session] Received a network change notification
Mac-mini opendirectoryd[66]: [session] Received a network change notification
Mac-mini opendirectoryd[66]: [session] Received a network change notification
mobile_obliterator[91]: ISAP: Done with Phase "Reset My Mac - system cleanup"
mobile_obliterator[91]: Starting phase 'Reset My Mac - system rebuild'
Mac-mini Installer Progress[63]: Done with phase = "Reset My Mac - system cleanup"
Mac-mini Installer Progress[63]: IASSetCurrentInstallPhase: Current phase name set to "Reset My Mac - system rebuild"
Mac-mini Installer Progress[63]: Connected processes {
	    "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX582" =     {
	        CompletionHandlerKey = "<__NSMallocBlock__: 0xXXXXXXXXX1e0>";
	        "Phase Name" = "Reset My Mac - system cleanup";
	        "Process ID" = 91;
	        UUID = "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX582";
	    };
	}
Mac-mini Installer Progress[63]: Connected processes {
	}
Mac-mini Installer Progress[63]: Connected processes {
	    "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXBA6" =     {
	        "Phase Name" = "Reset My Mac - system rebuild";
	        "Process ID" = 91;
	        UUID = "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXBA6";
	    };
	}
mobile_obliterator[91]: Renaming the system volume in container disk3 to 'Macintosh HD'
Mac-mini Installer Progress[63]: Connected processes {
	    "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXBA6" =     {
	        CompletionHandlerKey = "<__NSMallocBlock__: 0xXXXXXXXXX5a0>";
	        "Phase Name" = "Reset My Mac - system rebuild";
	        "Process ID" = 91;
	        UUID = "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXBA6";
	    };
	}
mobile_obliterator[91]: Mount path for disk3s3 is '/Volumes/Macintosh HD'
mobile_obliterator[91]: renameSystemVolume: renaming the system disk disk3s3 to 'Macintosh HD' return 0x0(0)
mobile_obliterator[91]: Creating the data volume in container disk3 grouped with the system volume disk3s3s1
mobile_obliterator[91]: About to create a new data volume named 'Macintosh HD - Data' in contianer disk3
mobile_obliterator[91]: Data volume create completed with error value 0
mobile_obliterator[91]: ISAP: Done with Phase "Reset My Mac - system rebuild"
mobile_obliterator[91]: Setting up the new data volume in container disk3
Mac-mini Installer Progress[63]: Done with phase = "Reset My Mac - system rebuild"
Mac-mini Installer Progress[63]: IASSetCurrentInstallPhase: Current phase name set to "Template Migration"
-->


The following are also setup or invoked.

<--
Users: root
Groups: dsRecordsAll, com.apple.sharepoint.group.1, _knowledgegraphd, _softwareupdate, _logd, _appinstalld, _warmd, _analyticsd, _sntpd, com.apple.access_ftp, procmod, _postgres, _keytabusers, _eppc, _calendar, wheel, _accessoryupdater, _lpadmin, _installcoordinationd, _fpsd, _appserverusr, _lpoperator, sys, _rmd, _appstore, mail, _www, _analyticsusers, _developer, procview, tty, _driverkit, _demod, _oahd, _detachedsig, com.apple.access_ssh, _webauthserver, _coreml, _odchpass, _darwindaemon, kmem, _trustd, _teamserver, admin, _nearbyd, com.apple.access_sharing, _diskimagesiod, _taskgated, _reportmemoryexception, operator, com.apple.access_remote_ae, certusers
Aliases: MAILER-DAEMON, dumper, nobody, postmaster, MAILER-AGENT, manager, operator, administrator
Computers: localhost
Config: shadowhash, KerberosKDC
Networks: loopback
-->


In the following snippet, my record is invoked along with a linked identity with an Apple Certification string. The reason or need for this is unknown.

<--
opendirectoryd[66]: [session] UID: 0, EUID: 0, GID: 0, EGID: 0, PID: 87, PROC: templateMigrator ODQueryCreateWithNode request, NodeID: XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX6D0, RecordType(s): dsRecTypeStandard:Users, Attribute: dsAttrTypeStandard:RecordName, MatchType: EqualTo, Equality: CaseIgnore, Value(s): ****, Requested Attributes: dsAttributesStandardAll, Max Results: 1
opendirectoryd[66]: [session] queuing request to connection - XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXBBB - CFBundle 0x15b7057b0 </System/Library/OpenDirectory/Modules/PlistFile.bundle> (bundle, loaded)
opendirectoryd[66]: [session] ODQueryCreateWithNode completed
opendirectoryd[66]: [session] UID: 0, EUID: 0, GID: 0, EGID: 0, PID: 87, PROC: templateMigrator ODNodeCreateRecord request, NodeID: XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX6D0, RecordType: dsRecTypeStandard:Users, RecordName: ****, Attributes: {
	    "dsAttrTypeNative:AvatarRepresentation" =     (
	        ""
	    );
	    "dsAttrTypeNative:HeimdalSRPKey" =     (
	        {length = 559, bytes = 0x*****22b xxxxxxxx xxxxxxxx xxxxxxxx ... xxxxxxxx xxxxxxxx }
	    );
	    "dsAttrTypeNative:KerberosKeys" =     (
	        {length = 335, bytes = 0x*****14b xxxxxxxx xxxxxxxx xxxxxxxx ... xxxxxxxx xxxxxxxx }
	    );
	    "dsAttrTypeNative:LinkedIdentity" =     (
	        "<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "/Apple/DTD PLIST 1.0/EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0">n<dict><key>appleid.apple.com</key><dict><key>allows password reset</key><true/><key>linked identities</key><array><dict><key>anchor dn</key><string>CN=Apple Root CA,OU=Apple Certification Authority,O=Apple Inc.,C=US</string>
-->


On the MacBook Pro, I ran the command ~ % dscl . -readall /Users

This returned a vast list of users. Toward the bottom of the list was a certificate for 'AltSecurityIdentities'. There was also an entry called 'JPEGPhoto', this contained thousands of 8 character unique IDs. I do not know what they are used for.

<--
dsAttrTypeNative:record_daemon_version: 8602000
dsAttrTypeNative:unlockOptions: 0
AltSecurityIdentities:
 X509:<T>CN=Apple Root CA,OU=Apple Certification Authority,O=Apple Inc.,C=US<S>CN=com.apple.idms.appleid.prd.xxxxxx-xx-xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx477
AppleMetaNodeLocation: /Local/Default
AuthenticationAuthority: ;ShadowHash;HASHLIST:<SALTED-SHA512-PBKDF2,SRP-RFC5054-4096-SHA512-PBKDF2> ;SecureToken; ;Kerberosv5;;redacted@LKDC:SHA1.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX837;LKDC:SHA1.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX837;
GeneratedUID: XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXE4A
JPEGPhoto:
 *****fe0 *****a46

NFSHomeDirectory: /Users/*****
Password: ********
PrimaryGroupID: 20
RealName: *****
RecordName: ***** com.apple.idms.appleid.prd.xxxxxx-xx-xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxx477
RecordType: dsRecTypeStandard:Users

UniqueID: 501
UserShell: /bin/zsh
-->


DUAL BOOT

The start up logs show an interesting and unique set of tasks enacted. I found a GitHub user that seemed to have a lot of the scripts used on my Apple devices. 

The beginning of our logs show an almost duplicated version of Zhuowei's version of QEMU https://github.com/zhuowei/qemu. 

This the log of the gist where they get iOS to load on the Mac: https://gist.github.com/zhuowei/7111cd6b9ba3b9c3bd430b8caa30235c (iOS 12b4 kernel in QEMU. It works!) Discussion: https://worthdoingbadly.com/xnuqemu2/
Script: https://gist.github.com/zhuowei/69c886423642cd77fd2c010f4d54b1c4 - A script to build XNU version xnu-6153.141.1 (macOS Catalina 10.15.6) Force host OS version to 10.15 so Xcode's clang doesn't complain.

In a now mysteriously deleted log of mine, the attackers were seen to be attempting to install many old versions of OS X. 

<--
softwareupdated: (SoftwareUpdate) [com.apple.SoftwareUpdate:SoftwareUpdate] Product Evaluation: 002-41708 (002-41708.English.dist): Volume check failed: Error Domain=PKDistributionError Code=106 "Command Line Tools for Xcode can’t be installed on “Macintosh HD” because the version of macOS is too new." UserInfo={NSLocalizedDescription=Command Line Tools for Xcode can’t be installed on “Macintosh HD” because the version of macOS is too new.}
...
transparencyd: (CloudKit) [com.apple.cloudkit:CK] Device is NOT an AppleInternal install
...
softwareupdated: (SoftwareUpdate) [com.apple.SoftwareUpdate:SoftwareUpdate] Product Evaluation: zzz061-10035 (061-10035.English.dist): Installation check failed: Error Domain=PKDistributionError Code=102 "ERROR_BOOT_LEOPARD" UserInfo={type=Fatal, message=ERROR_BOOT_LEOPARD, NSLocalizedDescription=ERROR_BOOT_LEOPARD}
...
softwareupdated: (SoftwareUpdate) [com.apple.SoftwareUpdate:SoftwareUpdate] Product Evaluation: 041-91758 (041-91758.English.dist): Installation check failed: Error Domain=PKDistributionError Code=102 "macOS High Sierra can’t be installed on this computer." UserInfo={NSLocalizedDescription=macOS High Sierra can’t be installed on this computer., NSUnderlyingError=0x******960 {Error Domain=PKDistributionException Code=0 "TypeError: null is not an object (evaluating 'cpuFeatures.split') at x-distribution:///installer-gui-script%5B1%5D/installation-check%5B1%5D/@script" UserInfo={NSLocalizedDescription=TypeError: null is not an object (evaluating 'cpuFeatures.split') at x-distribution:///installer-gui-script%5B1%5D/installation-check%5B1%5D/@script}}}
-->


This would explain why the iOS devices all appear as OSX 10.15. It appears they have got it up and running as they install a 10.15 version of the XProtect and MRT app. In the System Information window on the MacBook Pro running Ventura it had 'Sync Services Summary: Mac OS Version: 10.6'. It also explains the need for the 10.15 version of XProtect and MRT packages installed and activated. Additionally, in some of the VirusTotal results for 'dropped files' there were references to 'OSX_10_15'. I'm guessing 10.15 was a great version for exploits.

<--
AMPDeviceDiscoveryAgent: (MobileDevice) _MobileDeviceLibraryInitRoutine (thread 0x******b40): MobileDevice.framework version: 1533.100.60
AMPDeviceDiscoveryAgent: (MobileDevice) _MobileDeviceLibraryInitRoutine (thread 0x******b40): RemotePairing.framework version: 90.2
-->


Another good indicator of a dual operating system is that invoked tasks would be copied to two locations, the second an iOS environment. This occurs throughout all of the logs.

<--
apsd: (Security) SecItemCopyMatching
apsd: (Security) SecItemCopyMatching_ios
-->


I believe that this gist is how the attackers have connected the iOS devices to the Macs, a script to connect an iPad Pro to a Mac Mini. It appears to have been perfected.
https://gist.github.com/zhuowei/67bb835f86cb9f42c1168f6449b42031

In a now deleted tweet from 2020, Zhuowei mused as to whether it would be possible to dual-boot iOS on an M1 Mac. They supposed that it would only take an iPad IPSW, writing iOS onto a USB stick, copying kernel from macOS and turning off secure boot. In the boot-up log the following message appears:

<--
kernel: (AppleEmbeddedSimpleSPINORFlasherDriver) virtual bool AppleEmbeddedSimpleSPINORFlasherDriver::start(IOService *): service = IOPlatformDevice found.
kernel: (AppleEmbeddedSimpleSPINORFlasherDriver) 
kernel: (AppleEmbeddedSimpleSPINORFlasherDriver) SPINORFlasherDriver::
kernel: (AppleEmbeddedSimpleSPINORFlasherDriver) virtual bool AppleEmbeddedSimpleSPINORFlasherDriver::start(IOService *): dual-iboot-support = true
kernel: (AppleEmbeddedSimpleSPINORFlasherDriver) 
kernel: (AppleEmbeddedSimpleSPINORFlasherDriver) SPINORFlasherDriver::
kernel: (AppleEmbeddedSimpleSPINORFlasherDriver) virtual bool AppleEmbeddedSimpleSPINORFlasherDriver::start(IOService *): atomic-firmware-update-support = true
-->


One of the things I noticed when checking apps on VirusTotal, the .dmg contained a Mach-O fat file with 2 architectures, x86_64 and Arm64. Throughout the logs, after a command was completed, there would be the task 'SecItemCopyMatching' and 'SecItemCopyMatching_ios'. 

com.apple.TextEdit
https://www.virustotal.com/gui/file/e6887e290dc4350946c2771e6fc829c601cddc0c6a8914e7be6b34bdfc6f1572

<--
kernel: arm64e_plugin_host: running binary "SecurityAgent" in keys-off mode due to entitlement: com.apple.private.security.clear-library-validation
kernelmanagerd: unable to load extension: /Library/Extensions/SoftRAID.kext: Incompatible architecture: Binary is for x86_64, but needed arch arm64e
kernelmanagerd: Ignoring kext at /Library/Extensions/SoftRAID.kext with incompatible architecture.
kernelmanagerd: unable to load extension: /Library/Extensions/HighPointIOP.kext: Incompatible architecture: Binary is for x86_64, but needed arch arm64e
kernelmanagerd: Ignoring kext at /Library/Extensions/HighPointIOP.kext with incompatible architecture.
launchd: [gui/501/com.apple.cvmsCompAgent_arm64_1:] (lint): UserName is not supported by the domain, ignoring.
com.apple.audio.AUHostingService.arm64e
com.apple.audio.AUHostingService.x86-64
com.apple.appkit.xpc.LegacyExternalColorPickerService.arm64
com.apple.appkit.xpc.LegacyExternalColorPickerService.x86_64
com.apple.cvmsCompAgent_arm64_1
"LSArchitecture"="arm64", "Flavor"=3
kernel: arm64e_plugin_host: running binary "com.apple.audio.SandboxHelper" in keys-off mode due to entitlement: com.apple.security.cs.disable-library-validation
kernelmanagerd: validating extension at /Library/Apple/System/Library/Extensions/AppleMobileDevice.kext
kernelmanagerd: Collision: replacing Kext com.apple.driver.AppleMobileDevice v4.0 in codeless kext bundle com.apple.driver.AppleMobileDevice at /Library/Apple/System/Library/Extensions/AppleMobileDevice.kext
kernel: imageboot_pivot_image: attached disk image /System/Volumes/Recovery/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX/boot/XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX/usr/standalone/firmware/arm64eBaseSystem.dmg as disk4s1
-->

<--
arm64e_plugin_host

0x7a       Default     0x0                  0      0    kernel: arm64e_plugin_host: running binary "loginwindow" in keys-off mode due to entitlement: com.apple.private.security.clear-library-validation
0x7d4      Default     0x0                  0      0    kernel: arm64e_plugin_host: running binary "coreaudiod" in keys-off mode due to entitlement: com.apple.private.security.clear-library-validation
0x881      Default     0x0                  0      0    kernel: arm64e_plugin_host: running binary "bash" in keys-off mode due to identity: com.apple.bash
0x8b8      Default     0x0                  0      0    kernel: arm64e_plugin_host: running binary "authd" in keys-off mode due to entitlement: com.apple.private.security.clear-library-validation
0x97e      Default     0x0                  0      0    kernel: arm64e_plugin_host: running binary "com.apple.audio.SandboxHelper" in keys-off mode due to entitlement: com.apple.security.cs.disable-library-validation
0x9d9      Default     0x0                  0      0    kernel: arm64e_plugin_host: running binary "com.apple.audio.Core-Audio-Drive" in keys-off mode due to entitlement: com.apple.security.cs.disable-library-validation
0xbc7      Default     0x0                  0      0    kernel: arm64e_plugin_host: running binary "SecurityAgent" in keys-off mode due to entitlement: com.apple.private.security.clear-library-validation
0xc12      Default     0x0                  0      0    kernel: arm64e_plugin_host: running binary "VTDecoderXPCService" in keys-off mode due to entitlement: com.apple.security.cs.disable-library-validation
0xd5a      Default     0x0                  0      0    kernel: arm64e_plugin_host: running binary "authorizationhost" in keys-off mode due to entitlement: com.apple.private.security.clear-library-validation
0x1489     Default     0x0                  0      0    kernel: arm64e_plugin_host: running binary "login" in keys-off mode due to entitlement: com.apple.private.security.clear-library-validation
0x148c     Default     0x0                  0      0    kernel: arm64e_plugin_host: running binary "com.apple.audio.SandboxHelper" in keys-off mode due to entitlement: com.apple.security.cs.disable-library-validation
0x1492     Default     0x0                  0      0    kernel: arm64e_plugin_host: running binary "zsh" in keys-off mode due to identity: com.apple.zsh
0x1576     Default     0x0                  0      0    kernel: arm64e_plugin_host: running binary "com.apple.audio.SandboxHelper" in keys-off mode due to entitlement: com.apple.security.cs.disable-library-validation
0x166c     Default     0x0                  0      0    kernel: arm64e_plugin_host: running binary "sudo" in keys-off mode due to entitlement: com.apple.private.security.clear-library-validation
-->

The presence of iOS SpringBoard procs also appear to be further proof the attackers made Zhuowei's musings about dual-booting iOS onto a Mac a reality. On our iOS devices, SpringBoard is a beta version. This is discussed in the section 'TRIALD AND (BAD) SIRI BETA EXPERIMENT ROLLOUTS'.
<--
SetupAssistantSpringboard
rootSetupAssistantSpringboard
CADSpringBoardOperationProxy
-->

<--
CommCenter: [com.apple.CommCenter:sysobs] #I Sending the springboard startup event forcefully (true) or state has changed (false)
calaccessd: (CalendarDaemon) [com.apple.calendar.daemon:Daemon] clearCachedAuthorizationStatus: Proxy class remains unchanged CADSpringBoardOperationProxy for connection from client <ClientIdentity: 0x******440>, bundleIdentifier: [com.apple.calendar.calaccessd], clientName: [calaccessd], pid: [420]
-->

<--
/System/Library/Frameworks/CoreMediaIO.framework/Resources/iOSScreenCapture.plugin/Contents/Resources/iOSScreenCaptureAssistant
/System/iOSSupport/System/Library/PrivateFrameworks/VoiceMemos.framework/Support/voicememod
-->


There are also a lot of AppleMobileDevice tasks being invoked on the Macs.

<--
mobileassetd: (SoftwareUpdateCoreSupport) [com.apple.su:SU] [SIMULATE] DISPATCH: created simulate dispatch queue domain(com.apple.MAAuto.core.simulate)
mobileassetd: (SoftwareUpdateCoreSupport) [com.apple.su:SU] [DIAG] DISPATCH: created dispatch queue domain(com.apple.MAAuto.core.diag.tracking.fsm.[1.2.7]AutoControlManager)
mobileassetd: (SoftwareUpdateCoreSupport) [com.apple.su:SU] [FSM] DISPATCH: created extended state dispatch queue domain(com.apple.MAAuto.core.fsm.extended.[1.2.7]AutoControlManager)
mobileassetd: (SoftwareUpdateCoreSupport) [com.apple.su:SU] ...[FSM] API initMachine | SUCCESS
...
PerfPowerServices: (PowerlogCore) [com.apple.powerlog:] *** allowRun ***  parentName=<private> procesName=<private> fullMode=NO allowLiteModeDaemon=YES allowRun=YES
kernelmanagerd: (Security) SecTrustEvaluateIfNecessary
PerfPowerServices: (PowerlogCore) [com.apple.powerlog:] Calling <private> initOperatorDependancies
kernelmanagerd: validating extension at /Library/Apple/System/Library/Extensions/AppleMobileDevice.kext
kernelmanagerd: Collision: replacing Kext com.apple.driver.AppleMobileDevice v4.0 in codeless kext bundle com.apple.driver.AppleMobileDevice at /Library/Apple/System/Library/Extensions/AppleMobileDevice.kext
...
PerfPowerServices: (CoreMediaIO) [com.apple.cmio:] CMIO_DAL_System.cpp:386:CheckOutInstance The System is starting
PerfPowerServices: (CoreMediaIO) [com.apple.cmio:] CMIO_DAL_System.cpp:240:System security session has no grahics access, not adding a CGS callback
-->


Below is a list of files injected into a hidden file onto any inserted USB stick on the Macs. 

<--
.Spotlight-V100 > Store-V2 (VolumeConfiguration.plist > XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX

.store.db
0.directoryStoreFile
0.directoryStoreFile.shadow
0.indexArrays
0.indexBigDates
0.indexCompactDirectory
0.indexDirectory
0.indexGroups
0.indexHead
0.indexIds
0.indexPositions
0.indexPositionTable
0.indexPostings
0.indexTermIds
0.indexUpdates
0.shadowIndexGroups
0.shadowIndexHead
Cab.created
Cab.modified
dbStr-1.map.buckets
dbStr-1.map.data
dbStr-1.map.header
dbStr-1.map.offsets
dbStr-2.map.buckets
dbStr-2.map.data
dbStr-2.map.header
dbStr-2.map.offsets
dbStr-3.map.buckets
dbStr-3.map.data
dbStr-3.map.header
dbStr-3.map.offsets
dbStr-4.map.buckets
dbStr-4.map.data
dbStr-4.map.header
dbStr-4.map.offsets
dbStr-5.map.buckets
dbStr-5.map.data
dbStr-5.map.header
dbStr-5.map.offsets
indexState
journalAttr.2
journalExclusion
journals.assisted_import_post
journals.assisted_import_pre
journals.corespotlight
journals.health_check
journals.live
journals.live_priority
journals.live_system
journals.live_user
journals.migration
journals.migration_secondchance
journals.repair
journals.scan
Lion.created
live.0.directoryStoreFile
live.0.directoryStoreFile.shadow
live.0.indexArrays
live.0.indexBigDates
live.0.indexCompactDirectory
live.0.indexDirectory
live.0.indexGroups
live.0.indexHead
live.0.indexIds
live.0.indexPositions
live.0.indexPositionTable
live.0.indexPostings
live.0.indexTermIds
live.0.indexUpdates
live.0.shadowIndexArrays
live.0.shadowIndexCompactDirectory
live.0.shadowIndexDirectory
live.0.shadowIndexGroups
live.0.shadowIndexHead
live.0.shadowIndexPositionTable
live.0.shadowIndexTermIds
psid.db
reverseDirectoryStore
reverseDirectoryStore.shadow
reverseStore.updates
shutdown_time
store_generation
store.db
store.updates
tmp.Cab
tmp.Lion
tmp.spotlight.loc
tmp.spotlight.state
tmp.Star
-->


REAL VERSUS FAKE

A large number of typical Apple daemons and processes are modified. There is the use of the usual titles and 'Real' (to differentiate between the modified established paths and the 'Real' ones. Similarly, 'real' tasks and processes are given a 'Real' prefix in its name title in varioud plist files including the kernel plist file. 'Actual' is another common term to found.

<--
OTSOSActualAdapter
InstallPhaseActualPercentageKey = "23.82812";
ControlCenter: (CoreUtils) [com.apple.airplay:AirPlayReceiverServer] [AirPlay] Actual HTTP server port 7000
ControlCenter: (CoreUtils) [com.apple.airplay:AirPlayReceiverServer] [AirPlay] Actual HTTP server legacy port 5000

kernelmanagerd: setting up RealBridgeClient
containermanagerd: (ContainerManagerCommon) [com.apple.containermanager:fs] container_realpath([/var/~~]) → [/private/var/~~]
secinitd: (AppSandbox) AppSandboxUtilRealPathForUTF8StringPath(/var/folders/zz/zyx*********xvn_n0000000000000/T/.AddressBookLocks)
callservicesd: (Security) [com.apple.securityd:integrity] duplicate item exception is real; throwing it on
-->


There is a lot the attackers fake while in developer mode, simulating crashes and device touches for example. 

<--
distnoted: [com.apple.distnoted:diagnostic] register name: com.apple.xctest.FakeForceTouchDevice object: com.apple.loginwindow token: XXXXXX021 pid: 326
loginwindow: (AE) [com.apple.appleevents:main] aeGenerateFakeFirstOAPPEventIfNecessary(), needToCreateFakeOAPPEventIfFirstEvent == true
distnoted: [com.apple.distnoted:diagnostic] register name: __NSFakeMemoryPressureNotification object: kCFNotificationAnyObject token: XXXXXXX01c pid: 111
Installer Progress: (AE) [com.apple.appleevents:main] aeGenerateFakeFirstOAPPEventIfNecessary(), needToCreateFakeOAPPEventIfFirstEvent == true
talagent: [com.apple.talagent:log] - -: Finder not yet launched, but pretending it is
CommCenter: [com.apple.CommCenter:rm] #I Pretending that NoBB Radio is on. fNoBBAirplaneMode false  fWiFiAvailable true
-->


MOBILE_STORAGE_PROXY

The plist from the mobile_storage_proxy data file provides further insight in to the priveledges the stealthy developer has on Apple computers and devices.

<--
com.apple.mobile_storage_proxy
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict> 
<key>com.apple.private.RemoteServiceDiscovery.device-admin</key>
<true/>
<key>com.apple.private.img4.nonce.pdi‹/key>
<true/>
<key>com. apple.private.mobile_storage.allowedSPI</key>
<array>
<string>QueryNonce</string>
<strinq>SyncDevice</string>
<string>CopyDevices</string>
<strinq>MountDevice</string>
<string>UnmountDevice</string>
</array>
<key>com.apple.private.security.AppleImage4.user-client</key>
<true/>
<key>com.apple.security.exception.files.absolute-path.read-only</key>
<string>/private/var/mobile/Library/.FactoryMacCheckEnabled</string>
<key>com.apple.security.exception.iokit-user-client-class</key>
<array>
<string>AppleImage4UserClient</string>
<array>
<key>com.apple.security.exception.mach-lookup.global-name</key>
<array>
<string>com.apple.security.crypted</string>
<string>com.apple.remoted</string>
</array>
<key>com.apple.security.exception.sysctl.read-only</key>
<array> 
<string>security.mac.amfi.developer_mode_status</string>
<string>net.routetable.0.0.3.0</string>
</array>
<key>com.apple.security.network.client</key>
<true/>
<key›seatbelt-profiles</key>
<array>
<string>mobile_storage_proxy</string>
</array>
</dict>
</plist>


com.apple.kernelmanagerd

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.O.dtd">
<plist version="1.0">
<dict> 
	<key>com.apple.keystore.filevault</key>
	<true/>
	<key>com.apple.private.KextAudit.user-access</key>
	<true/>
	<key>com.apple.private.allow-bless</key>
	<true/>
	<key>com.apple.private.applecredentialmanager.allow</key>
	<true/>
	<key>com.apple.private.iokit.nvram-panicmedic</key>
	<true/>
	<key>com.apple.private.iokit.system-nvram-allow</key>
	<true/>
	<key>com.apple.private.kernel.get-kext-info</key>
	<true/>
	<key>com.apple.private.security.bootpolicy</key>
	<true/>
	<key>com.apple.private.security.iocatalog-management</key>
	<true/>
	<key>com. apple.private.security.kext-collection-management</key>
	<true/>
	<key>com.apple.private.security.kext-management</key>
	<true/>
	<key>com.apple.private.security.storage.SystemExtensionManagement</key>
	<true/>
	<key>com.apple.private.security.syspolicy.kext-management</key>
	<true/>
	<key>com.apple.private.spawn-driver</key>
	<true/>
	<key>com.apple.private.storagekitd.statuschange</key>
	<true/>
	<key>com.apple.private.system-extensions.extension-point</key>
	<true/>
	<key>com.apple.private.tcc.allow</key>
	<array>
		<string>kTCCServiceSystemPolicyAllFiles</string>
	</array>
	<key>com.apple.private.xpc.launchd.job-manager</key>
	<string>com.apple.kernelmanagerd</string>
	<key>com. apple.rootless.storage.KernelExtensionManagement</key>
	<true/>
	<key>com.apple.rootless.storage.KernelExtensionStaging</key>
	<true/>
	<key>com.apple.rootless.volume.Preboot</key>
	<true/>
	<key>com.apple.rootless.volume.iSCPreboot</key>
	<true/>
</dict>
</plist>
-->


EXPERIMENTS AND TRIALD

This little-publicy spoken about identity is shrouded in mystery. However, triald has a very active existence on our devices. Used by Siri, knowledge-agent and dasd, triald downloads an interesting array of 'treatments', 'experiments' and 'factors' which appear to be used in a variety of ways. Initially, triald is used by dasd (an extremely suspicious acting daemon) to initialse TRIClient. The triald related identities observed include: com.apple.triald, Trial, TrialManager, TrialServer, TRIAL_SERVER, TRIXPCStatusRequestHandler, _PSFTZKWTrialWrapper and TriStorageManagement. 

Apparently, triald's 'on-disk schema version is 7'. 

<--
dasd: (Trial) [com.apple.trial:_] Initializing TRIClient. Trial version: TrialXP-361.11
dasd: [com.apple.duetactivityscheduler:TrialManager] Trial Client <private>
dasd: (ProactiveSupport) [com.apple.trial:_] _PASEntitlement: Entitlement "com.apple.private.security.storage.triald" is not present.
dasd: (Trial) [com.apple.trial:_] Found entitlement: "com.apple.trial.client" --> <private>
dasd: (Trial) [com.apple.trial:_] <private> 0x*******470 (no container): using Trial root dir <private>
dasd: (Trial) [com.apple.trial:_] Unable to deserialize subject. Posting com.apple.triald.wake
dasd: (Trial) [com.apple.trial:_] Finished lazy initialization of TRIClient
dasd: (Trial) [com.apple.trial:_] adding update handler 0 for namespace COREOS_DAS
dasd: (Trial) [com.apple.trial:_] Unable to deserialize subject. Posting com.apple.triald.wake
dasd: (Trial) [com.apple.trial:_] Found 17 factors in treatment "(null)" for namespace "<private>"; using pruning cache
-->


In the following snippet, triald registers the following handlers, sets their criteria and checks them in.

<--
triald: (TrialServer) [com.apple.triald:server] registered xpc service endpoints - device is class C unlocked
triald: (TrialServer) [com.apple.triald:server] triald launched
triald: (TrialServer) [com.apple.triald:server] Queuing up async start block
triald: (TrialServer) [com.apple.triald:server] set up xpc event stream handler for com.apple.notifyd.matching
triald: (ProactiveSupport) [com.apple.triald:server] New connection to com.apple.trial.status from unknown process (463).
triald: (TrialServer) [com.apple.triald:server] TRIXPCStatusRequestHandler 0x******c50: begin experimentRecordsWithDeploymentEnvironments:completion:
triald: (TrialServer) [com.apple.triald:server] register xpc activity handler for com.apple.triald.retries-networking
triald: (TrialServer) [com.apple.triald:server] register xpc activity handler for com.apple.triald.fetch-experiments
triald: (TrialServer) [com.apple.triald:server] register xpc activity handler for com.apple.triald.cellular
triald: (TrialServer) [com.apple.triald:server] register xpc activity handler for com.apple.triald.post-upgrade
triald: (TrialServer) [com.apple.triald:server] register xpc activity handler for com.apple.triald.setup-assistant-fetch
triald: (TrialServer) [com.apple.triald:server] register xpc activity handler for com.apple.triald.post-upgrade-require-inexpensive-networking
triald: (TrialServer) [com.apple.triald:server] register xpc activity handler for com.apple.triald.task-queue
triald: (TrialServer) [com.apple.triald:server] register xpc activity handler for com.apple.triald.client-trigger.cellular
triald: (TrialServer) [com.apple.triald:server] register xpc activity handler for com.apple.triald.client-trigger.wifi
triald: (TrialServer) [com.apple.triald:server] register xpc activity handler for com.apple.triald.hotfix.cellular-allow-battery-true
triald: (TrialServer) [com.apple.triald:server] register xpc activity handler for com.apple.triald.hotfix.wifi-allow-battery-false
triald: (TrialServer) [com.apple.triald:server] register xpc activity handler for com.apple.triald.maintenance
-->

<--
triald: (TrialServer) [com.apple.triald:server] TRIStorageManagement on-disk schema version is 7.
triald: (Trial) [com.apple.trial:_] <private>: reloaded 513 factor levels (513 prefetched)
-->

<--
knowledge-agent: (Trial) [com.apple.trial:_] adding update handler 0 for namespace COREML_SYSTEMS_FACETIME_CONTACT_PREDICTION
...
knowledge-agent: (PeopleSuggester) [com.apple.PeopleSuggester:general] _PSFTZKWTrialWrapper: Finished (re)-loading Trial factors.
knowledge-agent: (PeopleSuggester) [com.apple.PeopleSuggester:general] _PSFTZKWTrialWrapper: Device is not included in a rollout.
knowledge-agent: (PeopleSuggester) [com.apple.PeopleSuggester:general] _PSFTZKWTrialWrapper: Using device-local default factor values (levels).
-->

<--
0x0    150    8    dasd: [com.apple.duetactivityscheduler:scoring] 501:com.apple.triald.client-trigger.wifi:FE7503:[
 ] sumScores:51.710000, denominator:51.910000, FinalDecision: Can Proceed FinalScore: 0.996147}
0x0    150    8    dasd: [com.apple.duetactivityscheduler:scoring] '501:com.apple.triald.client-trigger.wifi:FE7503' CurrentScore: 0.996147, ThresholdScore: 0.154179 DecisionToRun:1
0x0    150    8    dasd: [com.apple.duetactivityscheduler:lifecycle(activityGroup)] With <private> ...Tasks pre-running in group [com.apple.dasd.defaultNetwork] are 1!
0x0    150    8    dasd: [com.apple.duetactivityscheduler:lifecycle] Running activities : <private>
0x0    533    8    UserEventAgent: (DuetActivityScheduler) [com.apple.duetactivityscheduler:client] REQUESTING START: 501:com.apple.triald.client-trigger.wifi:FE7503
0x0    533    0    UserEventAgent: (com.apple.cts) [com.apple.xpc.activity:Activities] Initiating XPC Activity: com.apple.triald.client-trigger.wifi (0x******260)
0x0    102    0    UserEventAgent: (DuetActivityScheduler) [com.apple.backgroundtasks:framework] Establish daemon connection; interrupted: 0
0x0    6447   0    triald: (libxpc.dylib) [com.apple.xpc.activity:Client] _xpc_activity_dispatch: beginning dispatch, activity name com.apple.triald.client-trigger.wifi, seqno 2
0x0    6447   0    triald: (libxpc.dylib) [com.apple.xpc.activity:Client] _xpc_activity_dispatch: com.apple.triald.client-trigger.wifi (0x******dc0): found an activity with matching seqno 2
0x0    6447   0    triald: (libxpc.dylib) [com.apple.xpc.activity:Client] _xpc_activity_begin_running: com.apple.triald.client-trigger.wifi (0x******dc0) seqno: 2.
0x0    6447   0    triald: (libxpc.dylib) [com.apple.xpc.activity:Client] _xpc_activity_dispatch: lower half, activity name com.apple.triald.client-trigger.wifi (0x******dc0), seqno from top half was 2
0x0    6447   0    triald: (libxpc.dylib) [com.apple.xpc.activity:Client] _xpc_activity_dispatch: created connection 0x12300fb20 for activity name com.apple.triald.client-trigger.wifi (0x******dc0), seqno 2
0x0    6447   0    triald: (libxpc.dylib) [com.apple.xpc.activity:Client] _xpc_activity_set_state: com.apple.triald.client-trigger.wifi (0x******dc0), 2
0x0    463    0    distnoted: [com.apple.distnoted:diagnostic] register name: AppleAppSleepPreferencesChangedNotification object: kCFNotificationAnyObject token: 100000000 pid: 6447
0x0    6447   0    triald: (libxpc.dylib) [com.apple.xpc.activity:Client] _xpc_activity_set_state: send new state to CTS: com.apple.triald.client-trigger.wifi (0x******dc0), 2
0x0    533    0    UserEventAgent: (com.apple.cts) [com.apple.xpc.activity:Activities] Running XPC Activity (PID 6447): com.apple.triald.client-trigger.wifi (0x******260)
0x0    533    8    UserEventAgent: (DuetActivityScheduler) [com.apple.duetactivityscheduler:client] STARTING: <private>
0x0    150    8    dasd: [com.apple.duetactivityscheduler:lifecycle] STARTING activity 501:com.apple.triald.client-trigger.wifi:FE7503 <private>!
0x0    6447   0    triald: (libxpc.dylib) [com.apple.xpc.activity:Client] _xpc_activity_set_state_from_cts: com.apple.triald.client-trigger.wifi (0x******dc0), set activity state to 2
0x0    6447   0    triald: (libxpc.dylib) [com.apple.xpc.activity:Client] __XPC_ACTIVITY_CALLING_HANDLER__: com.apple.triald.client-trigger.wifi (0x******dc0), current state 2, pending state 0
0x0    6447   7    triald: (TrialServer) [com.apple.triald:server] Run activity for com.apple.triald.client-trigger.wifi
0x0    6447   0    triald: (libxpc.dylib) [com.apple.xpc.activity:Client] _xpc_activity_set_state: com.apple.triald.client-trigger.wifi (0x******dc0), 4
0x0    6447   0    triald: (libxpc.dylib) [com.apple.xpc.activity:Client] __XPC_ACTIVITY_CALLING_HANDLER__ returned from handler: com.apple.triald.client-trigger.wifi (0x******dc0), current state 2, pending state 4
0x0    6447   0    triald: (libxpc.dylib) [com.apple.xpc.activity:Client] _xpc_activity_set_state: send new state to CTS: com.apple.triald.client-trigger.wifi (0x******dc0), 4
0x0    150    8    dasd: [com.apple.duetactivityscheduler:lifecycle] Activity 501:com.apple.triald.client-trigger.wifi:FE7503 has been running for 9.318192799886067e-07 minutes
0x0    150    8    dasd: [com.apple.duetactivityscheduler:scoring] 501:com.apple.triald.client-trigger.wifi:FE7503:[
 ] sumScores:51.710000, denominator:51.910000, FinalDecision: Can Proceed FinalScore: 0.996147}
0x0    6447   7    triald: (TrialServer) [com.apple.triald:server] task queue has no prior or pending tasks to resume
0x0    6447   0    triald: (libxpc.dylib) [com.apple.xpc.activity:Client] _xpc_activity_set_state: com.apple.triald.client-trigger.wifi (0x******dc0), 5
0x0    6447   7    triald: (TrialServer) [com.apple.triald:server] XPC activity com.apple.triald.client-trigger.wifi completion with state XPC_ACTIVITY_STATE_DONE
0x0    6447   0    triald: (libxpc.dylib) [com.apple.xpc.activity:Client] _xpc_activity_set_state: send new state to CTS: com.apple.triald.client-trigger.wifi (0x******dc0), 5
0x0    533    0    UserEventAgent: (com.apple.cts) [com.apple.xpc.activity:Activities] Completed XPC Activity: com.apple.triald.client-trigger.wifi (0x******260)
0x0    150    8    dasd: [com.apple.duetactivityscheduler:lifecycle] COMPLETED 501:com.apple.triald.client-trigger.wifi:FE7503 at priority 5 <private>!
0x0    150    8    dasd: [com.apple.duetactivityscheduler:lifecycle(activityGroup)] NO LONGER RUNNING 501:com.apple.triald.client-trigger.wifi:FE7503 ...Tasks running in group [com.apple.dasd.defaultNetwork] are 0!
0x0    6447   0    triald: (libxpc.dylib) [com.apple.xpc.activity:Client] _xpc_activity_set_state_from_cts: com.apple.triald.client-trigger.wifi (0x******dc0), set activity state to 5
0x0    6447   0    triald: (libxpc.dylib) [com.apple.xpc.activity:Client] __xpc_activity_unregister: com.apple.triald.client-trigger.wifi (0x******dc0) seqno: 2, (is registered)
0x0    6447   0    triald: (libxpc.dylib) [com.apple.xpc.activity:Client] _xpc_activity_unregister: com.apple.triald.client-trigger.wifi 2, last registration: true
0x0    6447   0    triald: (libxpc.dylib) [com.apple.xpc.activity:Client] _xpc_activity_end_running: com.apple.triald.client-trigger.wifi (0x******dc0) seqno: 2.
0x0    6447   0    triald: (libxpc.dylib) [com.apple.xpc.activity:Client] _xpc_activity_dispose: com.apple.triald.client-trigger.wifi (0x******dc0) seqno: 2, (not running)
0x0    533    0    UserEventAgent: (com.apple.cts) [com.apple.xpc.activity:Activities] Unregistered XPC Activity on XPC remove event: com.apple.triald.client-trigger.wifi (0x******260)
-->

triald is not the only one implementing experiments.

<--
com.apple.geod: (libxpc.dylib) [com.apple.xpc.activity:Client] xpc_activity_set_criteria, lower half: com.apple.GeoServices.UpdateExperiment.Execute (0x******a80), check-in
com.apple.geod: (libxpc.dylib) [com.apple.xpc.activity:Client] _xpc_activity_set_criteria: com.apple.GeoServices.UpdateExperiment.Execute (0x******a80), check-in
com.apple.geod: (libxpc.dylib) [com.apple.xpc.activity:Client] xpc_activity_set_criteria: com.apple.GeoServices.UpdateExperiment.Execute (0x******a80), setting state now to 0
com.apple.geod: (libxpc.dylib) [com.apple.xpc.activity:Client] _xpc_activity_set_state: com.apple.GeoServices.UpdateExperiment.Execute (0x******a80), 0
com.apple.geod: (libxpc.dylib) [com.apple.xpc.activity:Client] __XPC_ACTIVITY_CALLING_HANDLER__: com.apple.GeoServices.UpdateExperiment.Execute (0x******a80), current state 0, pending state 0
com.apple.geod: (libxpc.dylib) [com.apple.xpc.activity:Client] xpc_activity_set_criteria: com.apple.GeoServices.UpdateExperiment.Execute (0x******a80), dict
com.apple.geod: (libxpc.dylib) [com.apple.xpc.activity:Client] __XPC_ACTIVITY_CALLING_HANDLER__ returned from handler: com.apple.GeoServices.UpdateExperiment.Execute (0x******a80), current state 0, pending state 0
com.apple.geod: (libxpc.dylib) [com.apple.xpc.activity:Client] _xpc_activity_set_state: com.apple.GeoServices.UpdateExperiment.Execute (0x******a80), 1
com.apple.geod: (libxpc.dylib) [com.apple.xpc.activity:Client] xpc_activity_set_criteria, lower half: com.apple.GeoServices.UpdateExperiment.Execute (0x******a80), dict
com.apple.geod: (libxpc.dylib) [com.apple.xpc.activity:Client] _xpc_activity_set_criteria: com.apple.GeoServices.UpdateExperiment.Execute (0x******a80), dict
com.apple.geod: (libxpc.dylib) [com.apple.xpc.activity:Client] _xpc_activity_set_criteria: xpc_set_event com.apple.GeoServices.UpdateExperiment.Execute, 2
com.apple.geod: (libxpc.dylib) [com.apple.xpc.activity:Client] xpc_activity_set_criteria: com.apple.GeoServices.UpdateExperiment.Execute (0x******a80), setting state now to 1
com.apple.geod: (libxpc.dylib) [com.apple.xpc.activity:Client] _xpc_activity_set_state: com.apple.GeoServices.UpdateExperiment.Execute (0x******a80), 1
-->

<--
178    0    trustd: [com.apple.securityd:OTATrust] begin MobileAsset metadata sync request com.apple.MobileAsset.SecExperimentAssets
169    0    nsurlsessiond: (libboringssl.dylib) [com.apple.network:boringssl] boringssl_context_info_handler(2069) [C3.1.1:2][0x******b50] Client handshake state: TLS 1.3 client read_encrypted_extensions
169    0    nsurlsessiond: (libboringssl.dylib) [com.apple.network:boringssl] boringssl_context_info_handler(2069) [C3.1.1:2][0x******b50] Client handshake state: TLS 1.3 client read_certificate_request
169    0    nsurlsessiond: (libboringssl.dylib) [com.apple.network:boringssl] boringssl_context_info_handler(2069) [C3.1.1:2][0x******b50] Client handshake state: TLS 1.3 client read_server_certificate
169    0    nsurlsessiond: (libboringssl.dylib) [com.apple.network:boringssl] boringssl_context_info_handler(2069) [C3.1.1:2][0x******b50] Client handshake state: TLS 1.3 client read_server_certificate_verify
169    0    nsurlsessiond: (libboringssl.dylib) [com.apple.network:boringssl] boringssl_context_evaluate_trust_async(1635) [C3.1.1:2][0x******b50] Performing external trust evaluation
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager handleClientConnection:on:]_block_invoke: assetType: com.apple.MobileAsset.SecExperimentAssets client: trustd, command: 1 (MA_QUERY_ASSET_TYPE)
169    0    nsurlsessiond: (libboringssl.dylib) [com.apple.network:boringssl] boringssl_context_evaluate_trust_async_external(1620) [C3.1.1:2][0x******b50] Asyncing for external verify block
169    0    nsurlsessiond: (libboringssl.dylib) [com.apple.network:boringssl] boringssl_session_handshake_incomplete(97) [C3.1.1:2][0x******b50] Handshake incomplete: certificate evaluation result pending [16]
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager handleClientConnection:on:]_block_invoke_2: trustd issued query command for com.apple.MobileAsset.SecExperimentAssets
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager handleQueryRequest:clientName:connection:message:]: trustd queried for: com.apple.MobileAsset.SecExperimentAssets with returnType of: 0 (MACatalogOnly) - may block on network sync
169    0    nsurlsessiond: (CFNetwork) Connection 3: asked to evaluate TLS Trust
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager handleQueryRequest:clientName:connection:message:]_block_invoke_2: [CONTROL_MANAGER_ASSET_QUEUE] {handleQueryRequest} getDownloadState | determineAssets...
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager determineAssets:clientName:connection:downloadingTasks:message:resultTypes:queryArray:isForSpecificAsset:specificAssetId:specificAllowedDifferences:]: trustd queried for: com.apple.MobileAsset.SecExperimentAssets with returnType of: 0 with Purpose: (null)
169    0    nsurlsessiond: [com.apple.nsurlsessiond:background] NDSession <XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXF16> Task <XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXEE3>.<1> didReceiveChallenge: <private> protection space: <private> for client <private> received auth challenge with type NSURLAuthenticationMethodServerTrust
169    0    nsurlsessiond: [com.apple.nsurlsessiond:background] NDSession <XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXF16> Task <XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXEE3>.<1> client doesn't implement session-level or task-level auth challenge delegate, performing default handling for auth challenge
169    0    nsurlsessiond: (CFNetwork) Task <XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXEE3>.<1> auth completion disp=1 cred=0x0
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager newCatalogLoad:withPurpose:]: Catalog fileLocation: /System/Library/AssetsV2/com_apple_MobileAsset_SecExperimentAssets/com_apple_MobileAsset_SecExperimentAssets.xml
169    0    nsurlsessiond: (Security) SecTrustEvaluateIfNecessaryFastAsync
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Debug] getPathToAssetWithPurpose: URL to asset: /System/Library/AssetsV2/com_apple_MobileAsset_SecExperimentAssets/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx4fe.asset
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] dataFillInstalledWithPurpose: Path to asset dir: /System/Library/AssetsV2/com_apple_MobileAsset_SecExperimentAssets/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx4fe.asset
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager determineAssets:clientName:connection:downloadingTasks:message:resultTypes:queryArray:isForSpecificAsset:specificAssetId:specificAllowedDifferences:]: trustd queried for: com.apple.MobileAsset.SecExperimentAssets with returnTypes 0 (MACatalogOnly) and found 1 assets with result 0 (MAQuerySuccessful) --> From 1 listed in the catalog and 1 local (1/1 downloaded, 0 preinstalled)--> Catalog info ({     isLiveServer = 0; }) --> Filtered for MACatalogOnly to 1 in catalog (1 installed, 0 server-only, 0 preinstalled), 0 installedNotInCatalog, 0 installedWithOS, 0 requiredByOS; --> Merged to 1 assets
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager handleQueryRequest:clientName:connection:message:]_block_invoke_2: [CONTROL_MANAGER_ASSET_QUEUE] {handleQueryRequest} getDownloadState | ...determineAssets
com178    2    trustd: (MobileAsset) [com.apple.mobileassetd:Notice] -[MAAssetQuery getResultsFromMessage:]: Got the query meta data reply for: com.apple.MobileAsset.SecExperimentAssets, response: 0
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[MADAnalyticsManager recordEventWithName:payload:]: assetType: SecExperimentAssets
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[MADAnalyticsManager shouldRecordEventForAssetType:]: assetType: SecExperimentAssets
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager handleClientConnection:on:]_block_invoke: assetType: com.apple.MobileAsset.SecExperimentAssets client: trustd, command: 7 (MA_GET_SANDBOX_EXTENSION)
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] createExtension: extension set
com178    2    trustd: (MobileAsset) [com.apple.mobileassetd:Notice] _MAensureExtension: Consumed extension
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager handleClientConnection:on:]_block_invoke: assetType: com.apple.MobileAsset.SecExperimentAssets client: trustd, command: 21 (MA_UPDATE_CLIENT_USAGE)
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager handleUpdateClientUsage:using:and:clientName:]_block_invoke: [CONTROL_MANAGER_ASSET_QUEUE] {handleUpdateClientUsage} updating usage...
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Debug] getPathToAssetWithPurpose: URL to asset: /System/Library/AssetsV2/com_apple_MobileAsset_SecExperimentAssets/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx4fe.asset
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager handleUpdateClientUsage:using:and:clientName:]_block_invoke: trustd client Usage type: com.apple.MobileAsset.SecExperimentAssets id:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx4fe, path: '/System/Library/AssetsV2/com_apple_MobileAsset_SecExperimentAssets/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx4fe.asset' original: *******233.***252 new: *******358.***608 result: 0
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager handleUpdateClientUsage:using:and:clientName:]_block_invoke: trustd client Usage type: com.apple.MobileAsset.SecExperimentAssets id:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx4fe, parent path: '/System/Library/AssetsV2/com_apple_MobileAsset_SecExperimentAssets/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx4fe.asset' AssetData exists
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager handleUpdateClientUsage:using:and:clientName:]_block_invoke: [CONTROL_MANAGER_ASSET_QUEUE] {handleUpdateClientUsage} ...updating usage
com178    2    trustd: (MobileAsset) [com.apple.mobileassetd:Notice] _MAsendUpdateClientAccessGetPathWithPurposeSync: getLocalPath asset com.apple.MobileAsset.SecExperimentAssets xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx4fe local path is '/System/Library/AssetsV2/com_apple_MobileAsset_SecExperimentAssets/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx4fe.asset/AssetData', exists: YES
com178    0    trustd: [com.apple.securityd:OTATrust] updating SecExperiment asset version from 0 to 2
262    0    trustd: [com.apple.securityd:OTATrust] Got notification about a new SecExperiment asset from system trustd.
262    2    trustd: (MobileAsset) [com.apple.mobileassetd:Notice] -[MAXpcManager ensureConnection]: Creating client/daemon connection: XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX66F
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager handleClientConnection:on:]_block_invoke: assetType: com.apple.MobileAsset.SecExperimentAssets client: trustd, command: 1 (MA_QUERY_ASSET_TYPE)
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager handleClientConnection:on:]_block_invoke_2: trustd issued query command for com.apple.MobileAsset.SecExperimentAssets
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager handleQueryRequest:clientName:connection:message:]: trustd queried for: com.apple.MobileAsset.SecExperimentAssets with returnType of: 1 (MAInstalledOnly) - may block on network sync
1      0    launchd: [pid/362 [efilogin-helper]:] uncorking exec source upfront
1      0    launchd: [pid/362 [efilogin-helper]:] created
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager handleQueryRequest:clientName:connection:message:]_block_invoke_2: [CONTROL_MANAGER_ASSET_QUEUE] {handleQueryRequest} getDownloadState | determineAssets...
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager determineAssets:clientName:connection:downloadingTasks:message:resultTypes:queryArray:isForSpecificAsset:specificAssetId:specificAllowedDifferences:]: trustd queried for: com.apple.MobileAsset.SecExperimentAssets with returnType of: 1 with Purpose: (null)
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager newCatalogLoad:withPurpose:]: Catalog fileLocation: /System/Library/AssetsV2/com_apple_MobileAsset_SecExperimentAssets/com_apple_MobileAsset_SecExperimentAssets.xml
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Debug] getPathToAssetWithPurpose: URL to asset: /System/Library/AssetsV2/com_apple_MobileAsset_SecExperimentAssets/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx4fe.asset
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] dataFillInstalledWithPurpose: Path to asset dir: /System/Library/AssetsV2/com_apple_MobileAsset_SecExperimentAssets/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx4fe.asset
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager determineAssets:clientName:connection:downloadingTasks:message:resultTypes:queryArray:isForSpecificAsset:specificAssetId:specificAllowedDifferences:]: trustd queried for: com.apple.MobileAsset.SecExperimentAssets with returnTypes 1 (MAInstalledOnly) and found 1 assets with result 0 (MAQuerySuccessful) --> From 1 listed in the catalog and 1 local (1/1 downloaded, 0 preinstalled)--> Catalog info ({     isLiveServer = 0; }) --> Filtered for MAInstalledOnly to 1 in catalog (1 installed, 0 server-only, 0 preinstalled), 0 installedNotInCatalog, 0 installedWithOS, 0 requiredByOS; --> Merged to 1 assets
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager handleQueryRequest:clientName:connection:message:]_block_invoke_2: [CONTROL_MANAGER_ASSET_QUEUE] {handleQueryRequest} getDownloadState | ...determineAssets
262    2    trustd: (MobileAsset) [com.apple.mobileassetd:Notice] -[MAAssetQuery getResultsFromMessage:]: Got the query meta data reply for: com.apple.MobileAsset.SecExperimentAssets, response: 0
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[MADAnalyticsManager recordEventWithName:payload:]: assetType: SecExperimentAssets
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[MADAnalyticsManager shouldRecordEventForAssetType:]: assetType: SecExperimentAssets
262    0    trustd: [com.apple.securityd:OTATrust] Updated SecExperiment asset successfully
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager handleClientConnection:on:]_block_invoke: assetType: com.apple.MobileAsset.SecExperimentAssets client: trustd, command: 7 (MA_GET_SANDBOX_EXTENSION)
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] createExtension: extension set
262    2    trustd: (MobileAsset) [com.apple.mobileassetd:Notice] _MAensureExtension: Consumed extension
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager handleClientConnection:on:]_block_invoke: assetType: com.apple.MobileAsset.SecExperimentAssets client: trustd, command: 21 (MA_UPDATE_CLIENT_USAGE)
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager handleUpdateClientUsage:using:and:clientName:]_block_invoke: [CONTROL_MANAGER_ASSET_QUEUE] {handleUpdateClientUsage} updating usage...
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Debug] getPathToAssetWithPurpose: URL to asset: /System/Library/AssetsV2/com_apple_MobileAsset_SecExperimentAssets/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx4fe.asset
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager handleUpdateClientUsage:using:and:clientName:]_block_invoke: trustd asset com.apple.MobileAsset.SecExperimentAssets xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx4fe has been used in past 24 hours '/System/Library/AssetsV2/com_apple_MobileAsset_SecExperimentAssets/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx4fe.asset': 0.005441
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager handleUpdateClientUsage:using:and:clientName:]_block_invoke: trustd client Usage type: com.apple.MobileAsset.SecExperimentAssets id:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx4fe, parent path: '/System/Library/AssetsV2/com_apple_MobileAsset_SecExperimentAssets/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx4fe.asset' AssetData exists
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager handleUpdateClientUsage:using:and:clientName:]_block_invoke: [CONTROL_MANAGER_ASSET_QUEUE] {handleUpdateClientUsage} ...updating usage
262    2    trustd: (MobileAsset) [com.apple.mobileassetd:Notice] _MAsendUpdateClientAccessGetPathWithPurposeSync: getLocalPath asset com.apple.MobileAsset.SecExperimentAssets xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx4fe local path is '/System/Library/AssetsV2/com_apple_MobileAsset_SecExperimentAssets/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx4fe.asset/AssetData', exists: YES
262    0    trustd: [com.apple.securityd:OTATrust] updating SecExperiment asset version from 0 to 2
262    0    trustd: [com.apple.securityd:OTATrust] Got notification about a new SecExperiment asset from system trustd.
178    0    trustd: [com.apple.securityd:ocsp] ocsp responder: (null) did not include status of requested cert
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager handleClientConnection:on:]_block_invoke: assetType: com.apple.MobileAsset.SecExperimentAssets client: trustd, command: 1 (MA_QUERY_ASSET_TYPE)
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager handleClientConnection:on:]_block_invoke_2: trustd issued query command for com.apple.MobileAsset.SecExperimentAssets
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager handleQueryRequest:clientName:connection:message:]: trustd queried for: com.apple.MobileAsset.SecExperimentAssets with returnType of: 1 (MAInstalledOnly) - may block on network sync
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager handleQueryRequest:clientName:connection:message:]_block_invoke_2: [CONTROL_MANAGER_ASSET_QUEUE] {handleQueryRequest} getDownloadState | determineAssets...
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager determineAssets:clientName:connection:downloadingTasks:message:resultTypes:queryArray:isForSpecificAsset:specificAssetId:specificAllowedDifferences:]: trustd queried for: com.apple.MobileAsset.SecExperimentAssets with returnType of: 1 with Purpose: (null)
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager newCatalogLoad:withPurpose:]: Catalog fileLocation: /System/Library/AssetsV2/com_apple_MobileAsset_SecExperimentAssets/com_apple_MobileAsset_SecExperimentAssets.xml
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Debug] getPathToAssetWithPurpose: URL to asset: /System/Library/AssetsV2/com_apple_MobileAsset_SecExperimentAssets/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx4fe.asset
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] dataFillInstalledWithPurpose: Path to asset dir: /System/Library/AssetsV2/com_apple_MobileAsset_SecExperimentAssets/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx4fe.asset
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager determineAssets:clientName:connection:downloadingTasks:message:resultTypes:queryArray:isForSpecificAsset:specificAssetId:specificAllowedDifferences:]: trustd queried for: com.apple.MobileAsset.SecExperimentAssets with returnTypes 1 (MAInstalledOnly) and found 1 assets with result 0 (MAQuerySuccessful) --> From 1 listed in the catalog and 1 local (1/1 downloaded, 0 preinstalled)--> Catalog info ({     isLiveServer = 0; }) --> Filtered for MAInstalledOnly to 1 in catalog (1 installed, 0 server-only, 0 preinstalled), 0 installedNotInCatalog, 0 installedWithOS, 0 requiredByOS; --> Merged to 1 assets
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager handleQueryRequest:clientName:connection:message:]_block_invoke_2: [CONTROL_MANAGER_ASSET_QUEUE] {handleQueryRequest} getDownloadState | ...determineAssets
262    2    trustd: (MobileAsset) [com.apple.mobileassetd:Notice] -[MAAssetQuery getResultsFromMessage:]: Got the query meta data reply for: com.apple.MobileAsset.SecExperimentAssets, response: 0
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[MADAnalyticsManager recordEventWithName:payload:]: assetType: SecExperimentAssets
210    2    mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[MADAnalyticsManager shouldRecordEventForAssetType:]: assetType: SecExperimentAssets
362    5    efilogin-helper: [com.apple.loginwindow.logging:efi_loginwindow] [-[EFILHDaemon startServer]:104]: Starting EFILHDaemon...
262    0    trustd: [com.apple.securityd:OTATrust] Updated SecExperiment asset successfully
-->

TRIALD AND (BAD) SIRI BETA EXPERIMENT ROLLOUTS

One of the main signs of being a captive of Stealth Developer Mode include iOS logs that have a Beta Indentifier number. This is found at the top of logs where apps installed are referenced. Additionally, there will be the mention of titles like "legacyInfo",  "trialInfo",  "rollouts", "rolloutId", "factorPackIds", "deploymentId". As well as "experiment" information towards the bottom of some logs with some of these titles: "treatmentId", "experimentId", "deploymentId".

The following are asset files downloaded by mobileassetd: (libmobileassetd.dylib)

<--
assetType: com.apple.MobileAsset.Trial.Siri.SiriFindMyConfigurationFiles client: triald
specifier:com.apple.siri.findmy.primary_device_files-generic-generic
assetType: com.apple.MobileAsset.Trial.Siri.SiriUnderstandingAttentionAssets client: triald
assetType: com.apple.MobileAsset.Trial.Siri.SiriUnderstandingNLOverrides client: triald
assetType: com.apple.MobileAsset.Trial.Siri.SiriDictationAssets client: triald
assetType: com.apple.MobileAsset.Trial.Siri.SiriUnderstandingNL client: triald
assetType: com.apple.MobileAsset.Trial.Siri.SiriUnderstandingAsrHammer client: triald
assetType: com.apple.MobileAsset.Trial.Siri.SiriExperienceCam client: triald
assetType: com.apple.MobileAsset.Trial.Siri.SiriInferredHelpfulness client: triald
assetType: com.apple.MobileAsset.Trial.Siri.SiriTextToSpeech client: triald
assetType: com.apple.MobileAsset.Trial.Siri.SiriUnderstandingAsrAssistant client: triald
assetType: com.apple.MobileAsset.Trial.Siri.SiriUnderstandingAsrAssistant client: triald
specifier: com.apple.siri.asr.dictation.audio.sampling-generic-Mac-M1
assetType: com.apple.MobileAsset.Trial.Siri.SiriFindMyConfigurationFiles client: triald
specifier: com.apple.siri.findmy.primary_device_files-generic-generic client: triald
assetType: com.apple.MobileAsset.Trial.Siri.SiriUnderstandingAsrUaap client: triald
assetType: com.apple.MobileAsset.Trial.Siri.SiriUnderstandingMorphun client: triald
assetType: com.apple.MobileAsset.Trial.Siri.SiriDialogAssets client: triald
assetType: com.apple.MobileAsset.Trial.Siri.SiriTextToSpeech client: triald
assetType: com.apple.MobileAsset.Trial.Siri.SiriInferredHelpfulness client: triald
assetType: com.apple.MobileAsset.SecExperimentAssets client: trustd
-->


A clear sign all is not right is when SpringBoard on iOS is a beta version and you are not enrolled in a beta program or a developer yourself. Further proof of the attackers ability to takeover a device is that I purchased a new iPad and set it up with a brand new AppleID whose email address was newly created, not linked anywhere and a new mobile phone number. The snippet below is from that particular device.

<--
{"app_name":"SpringBoard","timestamp":"2023-07-27 21:41:45.00 +1000","app_version":"1.0","slice_uuid":"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX","build_version":"50","bundleID":"com.apple.springboard","duration_ms":"78038428","share_with_app_devs":0,"is_first_party":1,"bug_type":"145","os_version":"iPhone OS 16.6 (20G75)","roots_installed":0,"incident_id":"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX","name":"SpringBoard"}
Date/Time:        2023-07-27 00:01:04.263 +1000
End time:         2023-07-27 21:41:42.691 +1000
OS Version:       iPhone OS 16.6 (Build 20G75)
Architecture:     arm64e
Report Version:   40
Incident Identifier: XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX

Data Source:      Microstackshots
Shared Cache:     XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX slid base address 0x1a*******, slide 0x21******

Command:          SpringBoard
Path:             /System/Library/CoreServices/SpringBoard.app/SpringBoard
Identifier:       com.apple.springboard
Version:          1.0 (50)
Is First Party:   Yes
Beta Identifier:  XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
Resource Coalition ID: 9
Architecture:     arm64e
Parent:           launchd [1]
PID:              31
-->


From what I have pieced together, various Siri related actions are downloaded by triald. These then appear to be used to load the developer experiments and changes onto the Apple iOS device. Observed assetTypes include: "SIRI_MEMORY_SYNC_CONFIG", "SIRI_VIDEO_APP_SELECTION", "SIRI_FIND_MY_CONFIGURATION_FILES", "SIRI_FIND_MY_PRIMARY_DEVICE_FILES", "SIRI_UNDERSTANDING_ASR_ASSISTANT" (//This audio sampling), "SIRI_UNDERSTANDING_ATTENTION_ASSETS", "SIRI_UNDERSTANDING_NL", "SIRI_UNDERSTANDING_NL_OVERRIDES", "SIRI_UNDERSTANDING_ASR_HAMMER", "SIRI_UNDERSTANDING_ASR UAAP", "SIRI_UNDERSTANDING_MORPHUN", "SIRI_DIALOG_ASSETS", "SIRI_EXPERIENCE_CAM", "SIRI_INFERRED_HELPFULNESS", "SIRI_TEXT_TO_SPEECH", "SIRI_DICTATION_ASSETS", "SIRI_MEMORY_SYNC_CONFIG", "SIRI_UNDERSTANDING_TMDC".

Other assetTypes encountered include: "BIFROST_DEV_1", "BIFROST_DEV_2", "BIFROST_PROD_1", "BIFROST_PROD_2", "WALLET_APP_ECOM_PAYMENT_SHEET", "HEALTH_FEATURE_AVAILABILITY".

The following two examples are iOS log footers.

<--
  "legacyInfo" : {
  "threadTriggered" : {
    "queue" : "fpx-instance"
  }
},
  "logWritingSignature" : "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
  "trialInfo" : {
  "rollouts" : [
    {
      "rolloutId" : "xxxxxxxxxxxxxxxxxxxxxxxx",
      "factorPackIds" : {
        "SIRI_MEMORY_SYNC_CONFIG" : "xxxxxxxxxxxxxxxxxxxxxxxx"
      },
      "deploymentId" : xxxxxxxxx
    },
    {
      "rolloutId" : "xxxxxxxxxxxxxxxxxxxxxxxx",
      "factorPackIds" : {
        "SIRI_FIND_MY_CONFIGURATION_FILES" : "xxxxxxxxxxxxxxxxxxxxxxxx"
      },
      "deploymentId" : xxxxxxxxx
    }
  ],
  "experiments" : [
    {
      "treatmentId" : "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
      "experimentId" : "xxxxxxxxxxxxxxxxxxxxxxxx",
      "deploymentId" : xxxxxxxxx
    },
    {
      "treatmentId" : "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
      "experimentId" : "xxxxxxxxxxxxxxxxxxxxxxxx",
      "deploymentId" : xxxxxxxxx
    }
  ]
}
}
-->

<--
  "legacyInfo" : {
  "threadTriggered" : {
    "queue" : "com.apple.main-thread"
  }
},
  "logWritingSignature" : "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
  "trialInfo" : {
  "rollouts" : [
    {
      "rolloutId" : "xxxxxxxxxxxxxxxxxxxxxxxx",
      "factorPackIds" : {
        "SIRI_VIDEO_APP_SELECTION" : "xxxxxxxxxxxxxxxxxxxxxxxx"
      },
      "deploymentId" : xxxxxxxxx
    },
    {
      "rolloutId" : "xxxxxxxxxxxxxxxxxxxxxxxx",
      "factorPackIds" : {
        "WALLET_APP_ECOM_PAYMENT_SHEET" : "xxxxxxxxxxxxxxxxxxxxxxxx"
      },
      "deploymentId" : xxxxxxxxx
    }
  ],
  "experiments" : [
    {
      "treatmentId" : "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
      "experimentId" : "xxxxxxxxxxxxxxxxxxxxxxxx",
      "deploymentId" : xxxxxxxxx
    },
    {
      "treatmentId" : "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
      "experimentId" : "xxxxxxxxxxxxxxxxxxxxxxxx",
      "deploymentId" : xxxxxxxxx
    }
  ]
}
}
-->

<--
triald: (TrialServer) [com.apple.triald:server] TRIXPCStatusRequestHandler 0x******200: begin experimentHistoryRecordsWithLimit:newerThanDate:deploymentEnvironment:completion: with env <private>
triald: (Trial) [com.apple.trial:_] Reading currentPopulation from NSUserDefaults
triald: (TrialServer) [com.apple.triald:server] Device is in the GENERAL_PUBLIC population
triald: (TrialServer) [com.apple.triald:server] Running server context block with qos: 25
triald: (TrialServer) [com.apple.triald:server] adding task to task queue: <private>
triald: (TrialServer) [com.apple.triald:server] adding task with 0 dependencies to task queue: <private>
parsecd: [com.apple.parsecd:Parsec_Context] Updating experiments
triald: (TrialServer) [com.apple.triald:server] TRIXPCStatusRequestHandler 0x******200: end experimentRecordsWithDeploymentEnvironments:completion:
-->


PERSONAS AND VOUCHERS

Personas are a main feature with them being used in a variety of ways, such as the adoption of other identities in order to performs tasks outside of their permission scope, for example 'kernelPersona'. Other references to the organisation of roles include personalization, personalities and dispositions. Additionally, movement wise, there are some references to 'traversing' and 'bypass'. 

Some of the observed persona references include (typos intended): personaVocuherDictionary, UMUserPersonaContext, personaID, com.apple.PlugInKit:persona, persona generation ID, userPersonaAttributes, PersonalPersona, system persona, PersonaEnterprise, RBPersonaManager, personaForIdentity, personaUniqueString, fetch persona from remote proxy, persona Table, personaType, personaLoginEvent, persona manifest, com.apple.UserManagement:persona, sync managers for persona, OctogonOTPersona, unexpected Universal/Managed/Other persona, OTPersonaAdapter, OTPersonaActualAdapter, userPersonaType, isPrimaryPersona.

<--
mobile_obliterator[91]: Found exception 'traverse' for 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX2BB'
kernel: (apfs) apfs_rawdev_create:637: disk1s2 Enable bypass mode on inode 16 on xART@disk1 as 2.0
-->


The various daemons adopt a kernel 'persona' to invoke commands. Other personas are also adopted.

<--
usermanagerd: [com.apple.usermanagerd:legacy] setup kernel personas
usermanagerd: [com.apple.usermanagerd:legacy] Started and loaded Personas Successfully
usermanagerd: [com.apple.usermanagerd:legacy] Allocated kernel persona with ID: 1001
syncdefaultsd: [com.apple.kvs:Misc] Adopted persona XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX52E and copied context <UMUserPersonaContext: 0x******280>
containermanagerd: (ContainerManagerCommon) [com.apple.containermanager:cache] Found personal persona <~~~>: created personal <MCMUserIdentity: 0x******fb0; posixUser = (501|~~|/Users/~~), identifier = ~~, personaType = personal, personaUniqueString = XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX52E, kernelPersonaID = 1001>, unspecific <MCMUserIdentity: 0x******880; posixUser = (501|~~|/Users/~~), identifier = ~~, personaType = unspecific, personaUniqueString = XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX52E, kernelPersonaID = 1001>
containermanagerd: (ContainerManagerCommon) [com.apple.containermanager:cache] Notifying observer <0x0x******d60; <~~~>> about a new user identity: <MCMUserIdentity: 0x******880; posixUser = (501|~~|/Users/~~), identifier = ~~, personaType = unspecific, personaUniqueString = XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX52E, kernelPersonaID = 1001>
loginwindow: [com.apple.loginwindow.logging:Standard] -[Login1 launchWorkspace] | launchWorkspace - Persona Login Succeeded
-->


In the following example, a 'personaVocuherDictionary' is used to add a number of contacts to a database. One was a relative, who isn't associated with my account and three fake contact entries.

<--
syncdefaultsd: (CloudKit) [com.apple.cloudkit:CK] Determining the persona identifier for CKContainer <CKContainerImplementation: 0x******c30; containerID=<CKContainerID: 0x******dd0; containerIdentifier=com.apple.KeyValueService.EndToEndEncrypted.AllPlatforms, containerEnvironment="Production">>
syncdefaultsd: (CloudKit) [com.apple.cloudkit:CK] Writing down current persona <private> in container options
syncdefaultsd: (UserManagement) (501) Adopting Voucher for accountID:XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX52E
syncdefaultsd: (UserManagement) (501) AllKeys is:XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX52E
syncdefaultsd: (UserManagement) (501) has Cache key and its value is:<UMUserPersonaContext: 0x******190>
syncdefaultsd: (UserManagement) (501) Found Cached Copy of voucher for Account:XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX52E
syncdefaultsd: (UserManagement) (501) Cached personaVocuherDictionary is :{
    "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX52E" = "<UMUserPersonaContext: 0x******ee0>";
}
syncdefaultsd: (CloudKit) [com.apple.cloudkit:CK] Adopting persona identifier <private> associated with the container <CKContainerImplementation: 0x******f60; containerID=<CKContainerID: 0x******8f0; containerIdentifier=com.apple.KeyValueService.EndToEndEncrypted, containerEnvironment="Production">>. Error: (null)
fileproviderd: (UserManagement) (501) Adopting Voucher for accountID:XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX52E
fileproviderd: (UserManagement) (501) No Cached Copy of voucher for Account:XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX52E, generating one from usermanagerd
fileproviderd: (UserManagement) (501) kernel voucher port is :***55
fileproviderd: (UserManagement) (501) inserting kernel voucher port:**411 with personaID:XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX52E
fileproviderd: (UserManagement) (501) No existing voucher; Succesful  voucher adoption for personaID:XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX52E
fileproviderd: (UserManagement) (501)  Allocating  voucherCacheRepo
fileproviderd: (UserManagement) (501)  voucherCacheRepo with umpcontext
syncdefaultsd: [com.apple.kvs:Connection] Created sync manager <SYDSyncManager: 0x******9c0; container=<CKContainer: 0x******be0> coreDataStore=<SYDCoreDataStore: 0x******5b0; url=file:///Users/redacted/Library/SyncedPreferences/com.apple.kvs/com.apple.KeyValueService.EndToEndEncrypted.AllPlatforms-Production.sqlite> storeType=EndToEndEncryptionAllPlatforms personaUniqueString=(null)>
fileproviderd: (UserManagement) (501) voucherCacheRepo is :{
    "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX52E" = "<UMUserPersonaContext: 0x******2d0>";
}
fileproviderd: (libsystem_containermanager.dylib) container_create_or_lookup_path_for_current_user
fileproviderd: (libsystem_containermanager.dylib) container_create_or_lookup_path_for_platform
syncdefaultsd: [com.apple.kvs:Misc] Restored saved persona context <UMUserPersonaContext: 0x******f90>
syncdefaultsd: [com.apple.kvs:Connection] Resuming server
fileproviderd: (libsystem_containermanager.dylib) [com.apple.containermanager:xpc] Requesting container lookup; personaid = 1001, type = DEFAULT, name = XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX52E, origin [pid = 423, personaid = -1], proximate [pid = 423, personaid = -1], class = 7, identifier = <private>, group_identifier = <private>, create = 1, temp = 0, euid = 501, uid = 501
fileproviderd: (libsystem_containermanager.dylib) container_query_t
fileproviderd: (libsystem_containermanager.dylib) [com.apple.containermanager:query] Query; personaid = 1001, type = DEFAULT, name = XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX52E, origin [pid = 423, personaid = -1], proximate [pid = 423, personaid = -1], euid = 501, uid = 501, query = <private>
-->


ICLOUD

<--
CloudPhotoLibrary cloudphotod

com.apple.cloudphotod

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict> 
	<key>aps-connection-initiate</key>
	<true/>
	<key>com.apple.application-identifier</key>
	<string>AAPLPHOTOS.com.apple.cloudphotod</string>
	<key>com.apple.authkit.client.private</key>
	<true/>
	<key>com.apple.coreduetd.allow</key>
	<true/>
	<key>com.apple.coreduetd.context</key>
	<true/>
	<key>com.apple.developer.aps-environment</key>
	<string>serverPreferred</string>
	<key>com.apple.developer.icloud-container-environment</key>
	<string>Production</string>
	<key>com.apple.developer.icloud-services</key>
	<array>
		<string>CloudKit</string>
	</array>
	<key>com.apple.mobile.keybagd.UserManager.sync</key>
	<true/>
	<key>com.apple.private.aps-connection-initiate</key>
	<true/>
	<key>com.apple.private.cloudkit.displaysSystemAcceptPrompt</key>
	<true/>
	<key>com.apple.private.cloudkit.masquerade</key>
	<true/>
	<key>com.apple.private.cloudkit.onDeviceStreaming</key>
	<true/>
	<key>com.apple.private.cloudkit.setEnvironment</key>
	<true/>
	<key>com.apple.private.cloudkit.spi</key>
	<true/>
	<key>com.apple.private.cloudkit.systemService</key>
	<true/>
	<key>com.apple.private.cloudphotod.cloudkit</key>
	<true/>
	<key>com.apple.private.cloudphotod.generic</key>
	<true/>
	<key>com.apple.private.dark-wake-network-reachability</key>
	<true/>
	<key>com.apple.private.dark-wake-push</key>
	<true/>
	<key>com.apple.private.push-to-wake</key>
	<true/>
	<key>com.apple.private.tcc.allow</key>
	<array>
		<string>kTCCServicePhotos</string>
		<string>kTCCServiceLiverpool</string>
		<string>kTCCServiceSystemPolicyAllFiles</string>
		<string>kTCCServiceSystemPolicyRemovableVolumes</string>
	</array>
	<key>com.apple.security.temporary-exception.mach-lookup.global-name</key>
	<array>
		<string>com.apple.ind.cloudfeatures</string>
	</array>
</dict>
</plist>

Goldilocks CloudPhotosGoldilocksAPIR
Goldilocks_CloudPhotosGoldilocksAPIAsyncC4
Goldilocks_CloudPhotosGoldilocksAPIAsyncClientP3
Goldilocks_CloudPhotosGoldilocksAPIAsyncOperationC2
Goldilocks_CloudPhotosGoldilocksAPIAsyncOperationClientP
Goldilocks_ExitStageR
Goldilocks_ExitSourceR
Goldilocks_ExitTypeR
Goldilocks_RecordRetentionPolicyR
Goldilocks_DuplicateTypeR
Goldilocks_InitiateExitRequestQ
Goldilocks_InitiateExitResponseQ
Goldilocks_ParticipantExitResultQ
Goldilocks_CheckDuplicatesRequestQ
Goldilocks_CheckDuplicatesResponseQP
Goldilocks_DuplicateState
Goldilocks_FoundDuplicateQ
Goldilocks_ZoneIDQ
Goldilocks_ExitMoveBatchRequestQ
Goldilocks_ExitMoveBatchResponseQ
Goldilocks_ExitBatchFeedbackItemQ
Goldilocks_ExitMoveBatchErrorFeedbackRequestQ
Goldilocks_ExitMoveBatchErrorFeedbackResponseQ
Goldilocks_SilentMoverRampingRequestQL
Goldilocks_SilentMoverRampingResponseQ
Goldilocks_OperationControlQ
Goldilocks_ErrorInfoQ
Goldilocks_ExitStatusFeedbackResponseQ
Goldilocks_ExitStatusFeedbackRequestQ
CPLResourceType
CPLCKResourceDownloadType
CPLCKSharedLibraryExitStage
CPLCKSharedLibraryExitStatus
CPLCKResourceDownloadOperationCloudKitImplementationP
CPLCKUtilitiesOperationCloudKitImplementationP
CPLCKPhotosSharedLibraryExitResponseP
CPLCKPhotosSharedLibraryExitMoveBatchFeedbackItemP
CPLCKPhotosSharedLibraryOperationP
Utility_PhotosUtilityAPIR
Utility_PhotosUtilityAPIAsyncC
Utility_PhotosUtilityAPIAsyncClientP
Utility_PhotosUtilityAPIAsyncOperationC
Utility_PhotosUtilityAPIAsyncOperationClient
Utility_DeleteAllZonesRequestQ
Utility_DeleteAllZonesResponseQ
Utility_DeleteZoneRequestQHc
Utility-DeleteZoneResponseQ
Utility_ErrorInfoQ
ResultErrorCodeR
DatabaseFailureQ
BatchErrorCodeR
BatchErrorQ
OneOf_OptionalUnshareOperationPercentageR
ResultErrorCodeR
DatabaseFailureQ
ResultErrorQ
ClientStatusRCheckDuplicatesOperationP
ExitMoveBatchOperationP
SilentMoverRampingServiceOperationP
ExitMoveErrorFeedbackOperationP
ExitStatusFeedbackOperationP
PhotosUtilitydeleteZone
exitMoveBatch
InitiateExitOperationP
Rpcproto_ErrorInfoQ
ClientQ
CodeR
WServerQD
LoggingDetailQ
URLResourceKeyNNSURLResourceKeySt
StorageClassP
A
B
C
D
E




InternalSwiftProtobufVisitorR traversevisitor
ZoneNameFromStagingZoneName
LibraryZoneIdentificationAuZoneIdentification
BackCopyHelperStepFaultInjection
com.apple.icloud-container.com.apple.photos.cloud

CPLFakeICloudPath com.apple.cpl.local-transport/usr/local/lib/libEnginePlistImplementation.dylib

CPLCloudKitScope with no zonezo<%@ %@ (%@)>SharedSyncTestSharedSyncExit

Simulatedover-quotaerrorforphase%@

Streaming fake derivatives is not supported

Deletes: %@Simulating over quota for phase: %@

com.apple.cpl.schedulercom.apple.cpl.scheduler.sequenceNumbercom.apple.cpl.test.haschanges

Missing share type for %@%@-%@TestSyncPrimarySync-0000-ZSPrimarySync-0000-LICPLLibraryInfodisabledTimedeleteTimeCPLZoneStateCPLSimulatePrimarySyncExitCMMcmm-sharecmm-rootCMMRootcmmlibrary-infoshared_libraryParticipantExitStatesExitConfigUnexpectedclassfor%@:
%@SharedSyncExitConfigCPLScopeUserSettings

A library share %@ already exists for this userv24@?O@"CKRecordZoneID"8@"NSError'160x[0-9a-fA-F]*unknown exceptionCPLSimulateRejectionCPLSimulateOverQuotaCPLForceRejectClassesCPLForceRejectIdentifiersC

PLSimulateOverQuotaPhaseuploadsharedUploadshareunshareCPLRejectOnUploadErrorrecordisrejectedbecause of upload error (%@)
Some records are rejected for testing purpose
CPLRejectAllUploadsrecord is rejected for testing purpose
CPLSimulateBusStateSimulating busy state (%@)
Missing required shared zonerecord class is rejected for testing purpose

@"NSObject<OS_xpc_object>"16CPLFakeDynamicDerivatives^KCGImageSourceKeepOriginalProfile^%@^% @^%@^%@public.jpeg-[_CPLFakeDerivativeMapper _dimensionsFromBaseResource:]CPLCloudKitFakeDynamicDerivatives.m

primarysyncremappingCPLOverridePrimarySyncZoneID/AppleInternal/Library/BuildRoots/d9366bcd-8c40-11ed-b8cf-66a073ae27ee/Library/Caches/com.apple.xbs/Sources/Photos_Swift/workspaces/cloudphotolibrary/Implementations/CloudKit/CPLCloudKitTransport.m

Missingoverrideidentification class%@-Overriddencom.apple.cpl.allow-fake-derivatives

Unexpected current user ID (%@)%@ is an invalid transport group for %@com.apple.cpl.cloudkit.task.progress%@ should not have any outstanding operations while waiting for an activityCPLFailCloudKitTransportTaskClassFailing %@ for testing purpose%@ called while %@ is running

EnginePlistTransportEnginePlistLibrary com.apple.cloudphotod.daemon

"CPLEngineWrapper"8^B16com.apple.cloudphotod

@"NSString"@"CPLForceSyncTask" /AppleInternal/Library/BuildRoots/d9366bcd-8c40-11ed-b8cf-66a073ae27ee/Library/Caches/com.apple.xbs/Sources/Photos_Swift/workspaces/cloudphotolibrary/Daemon/CPLDaemonLibraryManager.m








CPLMasterCPLAssetengine.transport.cloudkit.translateengine.transport.cloudkit.encrypt

gatekeepercheckCPLCloudKitUseGateKeeperCPLCloudKitGateKeeperTranscodeTypemmcstranscodeengine.transport.cloudkit.taskKilobytesMegabytes10s of Megabytes100s of MegabytesGigabytes10s of Gigabytes100s of Gigabytes 

Parameters:error:registeredWrapperWithLibraryIdentifier:error:enumerateWrappersWithBlock:
enumerateOpenedWrappersWithBlock:isWrapperOpened:_forceBackupWithActivity:forceClientPush:

variableGroupWithVariablesAndGroups:_defaultValuesObjectinjectionForValues: injectionForDefaultValuesvaluesInSet:startingAtIndex:valuesInSet:injectionForUpdates: injectionForDefaultValuesUpdatevariablesnamesInjectiondefinitionInjection_sqlForValues_ sqlForUpdates_variables_namesInjection_definitionInjectionT@"NSArray",R,N,V_variablesT@"




/AppleInternal/Library/BuildRoots/d9366bcd-8c40-11ed-b8c-66a073a27ee/Library/Caches/com.apple.bs/Sources/Photos_Swift/workspaces/cloudphotolibrary/Implementations/Base/CPLBaseSyncManager.m

/AppleInternal/Library/BuildRootsd9366bcd-8c40-11ed-b8c-66a073ae27ee/Library/Caches/com.apple.xbs/Sources/Photos_Swift/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLStoreMigrationAssistant_101386451.m

/AppleInternal/Library/BuildRoots/d9366bcd-8c40-11ed-b8c-66a073a27ee/Library/Caches/com.apple.bs/Sources/Photos_Swift/workspaces/cloudphotolibrary/Implementations/PrequeliteStore/CPLPrequeliteStore.m
-->

<--
Command:          containermanagerd
Path:             /usr/libexec/containermanagerd
Resource Coalition ID: 87
Architecture:     arm64
Parent:           launchd [1]
PID:              69

Event:            disk writes
Action taken:     none
Writes:           1073.75 MB of file backed memory dirtied over 635 seconds (1692.09 KB per second average), exceeding limit of 12.43 KB per second over 86400 seconds
Writes limit:     1073.74 MB
Limit duration:   86400s
Writes caused:    1073.75 MB
Writes duration:  635s
Duration:         634.57s
Duration Sampled: 634.14s
Steps:            169 (10.49 MB/step)
-->

<--
(2023-08-07 02:00:10 +0000) [splunk -> flushMessages] {
  "postTime" : 1691373610,
  "clientId" : "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXX30",
  "events" : [
    {
      "network_event_options_apple_id_context" : true,
      "cloudkit_info_client_bundle_id" : "com.apple.imagent",
      "network_event_network_request_header_size" : 1017,
      "_productFamily" : "iPad",
      "_osName" : "iPadOS",
      "network_event_network_request_uri" : "\/ckdatabase\/api\/client\/record\/retrieve",
      "_auroraSchemaID" : "com.apple.aurora.apptelemetry.cdd.Network",
      "network_event_network_interface_identifier" : "ipsec0",
      "network_event_timestamp_c2_now" : 1691161638618,
      "cloudkit_info_container" : "com.apple.messages.cloud",
      "network_event_options_quality_of_service" : "utility",
      "network_event_options_allow_expensive_access" : true,
      "_status" : 0,
      "network_event_network_request_body_bytes_sent" : 647,
      "_method" : 1,
      "network_event_options_out_of_process_force_discretionary" : false,
      "network_event_network_hostname" : "gateway.icloud.com",
      "network_event_timestamp_dns_start" : 1691161638216,
      "network_event_options_tls_pinning_required" : true,
      "_productModel" : "iPad7,3",
      "network_event_options_timeout_interval_for_resource" : 0,
      "_build" : "20G75",
      "network_event_network_remote_addresss_and_port" : "**:***:***:*:443",
      "network_event_options_duet_pre_cleared_mode" : "none",
      "_internal" : 0,
      "network_event_timestamp_dns_end" : 1691161638235,
      "network_event_network_previous_attempt_count" : 0,
      "cloudkit_info_environment" : "Production",
      "network_event_options_discretionary_network_behavior" : "F",
      "_osVersion" : "16.6",
      "cloudkit_info_anonymous" : false,
      "cloudkit_info_client_operation_operation_type" : "CKDFetchRecordsOperation",
      "network_event_network_negotiated_tls_protocol_version" : "TLSv13",
      "network_event_network_response_header_size" : 495,
      "network_event_timestamp_tcp_end" : 1691161638305,
      "network_event_network_connection_reused" : false,
      "network_event_timestamp_c2_init" : 1691161638199,
      "network_event_network_status_code" : 200,
      "network_event_options_out_of_process" : true,
      "network_event_timestamp_tcp_start" : 1691161638236,
      "network_event_timestamp_request_start" : 1691161638325,
      "network_event_network_protocol_name" : "h2",
      "network_event_options_timeout_interval_for_request" : 60,
      "network_event_timestamp_request_end" : 1691161638326,
      "cloudkit_info_database_scope" : "Private",
      "network_event_options_allow_power_nap_scheduling" : false,
      "network_event_timestamp_response_end" : 1691161638596,
      "network_event_timestamp_c2_start" : 1691161638199,
      "network_event_timestamp_response_start" : 1691161638595,
      "network_event_options_allow_cellular_access" : true,
      "network_event_network_response_body_bytes_received" : 346
    }
  ]
}
(2023-08-07 02:00:11 +0000) [splunk -> flushMessages] {
  "postTime" : 1691373611,
  "clientId" : "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXA3",
  "events" : [
    {
      "network_event_options_apple_id_context" : false,
      "network_event_network_response_body_bytes_received" : 0,
      "network_event_network_request_header_size" : 1864,
      "network_event_network_interface_identifier" : "ipsec0",
      "_osName" : "iPadOS",
      "_productFamily" : "iPad",
      "_auroraSchemaID" : "com.apple.aurora.apptelemetry.cdd.Network",
      "network_event_timestamp_c2_now" : 1691167881288,
      "network_event_network_request_uri" : "redacted",
      "cloudkit_info_container" : "com.apple.backup.ios",
      "network_event_options_allow_expensive_access" : false,
      "_status" : 0,
      "network_event_network_request_body_bytes_sent" : 1453872,
      "_method" : 1,
      "network_event_options_quality_of_service" : "utility",
      "network_event_options_out_of_process_force_discretionary" : true,
      "network_event_network_hostname" : "ausyd2.icloud-content.com",
      "cloudkit_info_operation_group_operation_group_name" : "Automatic Backup",
      "network_event_options_tls_pinning_required" : false,
      "_productModel" : "iPad7,3",
      "network_event_options_timeout_interval_for_resource" : 3600,
      "_build" : "20G75",
      "network_event_network_remote_addresss_and_port" : "**.***.***.*:443",
      "network_event_options_discretionary_network_behavior" : "T",
      "network_event_options_duet_pre_cleared_mode" : "noBudgeting",
      "_internal" : 0,
      "cloudkit_info_environment" : "Production",
      "cloudkit_info_anonymous" : false,
      "network_event_network_previous_attempt_count" : 0,
      "_osVersion" : "16.6",
      "cloudkit_info_client_operation_operation_type" : "CKDModifyRecordsOperation",
      "network_event_network_negotiated_tls_protocol_version" : "TLSv13",
      "network_event_network_response_header_size" : 1743,
      "network_event_network_connection_reused" : true,
      "network_event_timestamp_c2_init" : 1691167880166,
      "network_event_options_out_of_process" : true,
      "network_event_network_status_code" : 200,
      "network_event_timestamp_request_start" : 1691167880183,
      "network_event_network_protocol_name" : "http\/1.1",
      "network_event_options_timeout_interval_for_request" : 600,
      "network_event_timestamp_request_end" : 1691167880807,
      "cloudkit_info_database_scope" : "Private",
      "network_event_options_allow_power_nap_scheduling" : false,
      "network_event_timestamp_response_end" : 1691167881274,
      "network_event_timestamp_c2_start" : 1691167880166,
      "network_event_timestamp_response_start" : 1691167881273,
      "network_event_options_allow_cellular_access" : false,
      "cloudkit_info_client_bundle_id" : "com.apple.backupd"
    }
  ]
}
(2023-08-07 02:00:11 +0000) [splunk -> flushMessages] {
  "postTime" : 1691373611,
  "clientId" : "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXA3",
  "events" : [
    {
      "cloudkit_info_client_bundle_id" : "com.apple.backupd",
      "generic_event_key_systemScheduler" : "xpcActivity",
      "generic_event_startTime" : "2023-08-04 16:51:17 +0000",
      "_productFamily" : "iPad",
      "_osName" : "iPadOS",
      "_auroraSchemaID" : "com.apple.aurora.apptelemetry.cdd.Operation",
      "generic_event_key_wasCancelled" : false,
      "cloudkit_info_container" : "com.apple.backup.ios",
      "_status" : 0,
      "cloudkit_info_operation_group_operation_group_name" : "Automatic Backup",
      "_method" : 2162,
      "generic_event_key_adpEnabled" : false,
      "generic_event_key_xpcActivity_state" : "Continue",
      "_productModel" : "iPad7,3",
      "_build" : "20G75",
      "cloudkit_info_environment" : "Production",
      "_internal" : 0,
      "generic_event_key_xpcActivity_identifier" : "com.apple.backupd.wifi",
      "generic_event_key_zoneKeysRolled" : 0,
      "cloudkit_info_anonymous" : false,
      "generic_event_key_xpcActivity_interval" : 0,
      "generic_event_key_qualityOfService" : "Utility",
      "_osVersion" : "16.6",
      "cloudkit_info_client_operation_operation_type" : "CKModifyRecordsOperation",
      "generic_event_key_xpcActivity_shouldDefer" : false,
      "generic_event_key_isLongLived" : false,
      "generic_event_key_finishedWithErrorChain" : "",
      "generic_event_key_finishedWithError" : false,
      "generic_event_endTime" : "2023-08-04 16:51:42 +0000",
      "generic_event_key_xpcActivity_priority" : "Utility",
      "cloudkit_info_database_scope" : "Private",
      "generic_event_key_perRecordKeysRolled" : 0,
      "generic_event_key_zoneishKeysRolled" : 0,
      "generic_event_key_shareKeysRolled" : 0,
      "generic_event_key_xpcActivity_autoDefer" : true
    }
  ]
}
(2023-08-07 02:00:12 +0000) [splunk -> flushMessages] {
  "postTime" : 1691373612,
  "clientId" : "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXF3",
  "events" : [
    {
      "network_event_options_apple_id_context" : true,
      "network_event_options_timeout_interval_for_resource" : 0,
      "_internal" : 0,
      "cloudkit_info_client_bundle_id" : "com.apple.coreduetd",
      "_auroraSchemaID" : "com.apple.aurora.apptelemetry.cdd.Network",
      "network_event_network_request_header_size" : 998,
      "network_event_options_out_of_process" : false,
      "_status" : 0,
      "cloudkit_info_client_operation_operation_type" : "CKDFetchRecordZoneChangesOperation",
      "_productModel" : "iPad7,3",
      "_osName" : "iPadOS",
      "network_event_network_protocol_name" : "h2",
      "network_event_options_allow_power_nap_scheduling" : false,
      "network_event_network_connection_reused" : false,
      "network_event_timestamp_tcp_start" : 1691234365995,
      "network_event_network_path_info_interface_type" : "unknown",
      "cloudkit_info_environment" : "Production",
      "network_event_options_discretionary_network_behavior" : "F",
      "network_event_timestamp_tcp_end" : 1691234370276,
      "network_event_timestamp_response_end" : 1691234369592,
      "network_event_options_allow_expensive_access" : true,
      "network_event_network_request_uri" : "\/configuration\/configurations\/internetservices\/cloudkit\/cloudkit-1.0.plist",
      "cloudkit_info_anonymous" : false,
      "network_event_network_path_info_application_bytes_sent" : 1065,
      "network_event_network_interface_identifier" : "ipsec0",
      "network_event_options_timeout_interval_for_request" : 60,
      "cloudkit_info_operation_group_operation_group_name" : "EphemeralGroup",
      "network_event_network_previous_attempt_count" : 0,
      "network_event_options_allow_cellular_access" : true,
      "network_event_options_quality_of_service" : "utility",
      "network_event_timestamp_c2_start" : 1691234359102,
      "network_event_network_hostname" : "gateway.icloud.com",
      "network_event_timestamp_request_start" : 1691234368094,
      "network_event_options_tls_pinning_required" : true,
      "network_event_network_response_body_bytes_received" : 25761,
      "network_event_network_path_info_application_bytes_received" : 26224,
      "network_event_timestamp_c2_init" : 1691234359102,
      "network_event_options_out_of_process_force_discretionary" : false,
      "network_event_timestamp_dns_end" : 1691234365985,
      "_osVersion" : "16.6",
      "network_event_network_status_code" : 200,
      "cloudkit_info_container" : "com.apple.knowledgestore4",
      "_productFamily" : "iPad",
      "network_event_timestamp_dns_start" : 1691234365600,
      "_build" : "20G75",
      "network_event_network_remote_addresss_and_port" : "**.***.***.*:443",
      "network_event_network_negotiated_tls_protocol_version" : "TLSv13",
      "network_event_timestamp_response_start" : 1691234369286,
      "network_event_options_duet_pre_cleared_mode" : "none",
      "network_event_timestamp_request_end" : 1691234368094,
      "network_event_network_response_header_size" : 414,
      "network_event_network_request_body_bytes_sent" : 0,
      "_method" : 1,
      "network_event_timestamp_c2_now" : 1691234369594
    }
  ]
}
(2023-08-07 02:00:12 +0000) [splunk -> flushMessages] {
  "postTime" : 1691373612,
  "clientId" : "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXA3",
  "events" : [
    {
      "network_event_options_apple_id_context" : false,
      "network_event_network_response_body_bytes_received" : 0,
      "network_event_network_request_header_size" : 1862,
      "network_event_network_interface_identifier" : "ipsec0",
      "_osName" : "iPadOS",
      "network_event_network_request_uri" : "redacted",
      "_auroraSchemaID" : "com.apple.aurora.apptelemetry.cdd.Network",
      "network_event_timestamp_c2_now" : 1691371348216,
      "_productFamily" : "iPad",
      "cloudkit_info_container" : "com.apple.backup.ios",
      "network_event_options_quality_of_service" : "utility",
      "network_event_options_allow_expensive_access" : false,
      "network_event_network_request_body_bytes_sent" : 157232,
      "cloudkit_info_operation_group_operation_group_name" : "Automatic Backup",
      "_method" : 1,
      "network_event_options_out_of_process_force_discretionary" : true,
      "network_event_network_hostname" : "ausyd2.icloud-content.com",
      "_status" : 0,
      "network_event_options_tls_pinning_required" : false,
      "_productModel" : "iPad7,3",
      "_build" : "20G75",
      "network_event_options_timeout_interval_for_resource" : 3600,
      "network_event_network_remote_addresss_and_port" : "**.***.***.*:443",
      "network_event_network_previous_attempt_count" : 0,
      "_internal" : 0,
      "cloudkit_info_anonymous" : false,
      "network_event_options_discretionary_network_behavior" : "T",
      "cloudkit_info_environment" : "Production",
      "network_event_options_duet_pre_cleared_mode" : "noBudgeting",
      "_osVersion" : "16.6",
      "cloudkit_info_client_operation_operation_type" : "CKDModifyRecordsOperation",
      "network_event_network_negotiated_tls_protocol_version" : "TLSv13",
      "network_event_network_response_header_size" : 1742,
      "network_event_network_connection_reused" : true,
      "network_event_timestamp_c2_init" : 1691371347784,
      "network_event_options_out_of_process" : true,
      "network_event_network_status_code" : 200,
      "network_event_timestamp_request_start" : 1691371347803,
      "network_event_network_protocol_name" : "http\/1.1",
      "network_event_options_timeout_interval_for_request" : 600,
      "network_event_timestamp_request_end" : 1691371347816,
      "cloudkit_info_database_scope" : "Private",
      "network_event_options_allow_power_nap_scheduling" : false,
      "network_event_timestamp_response_end" : 1691371348193,
      "network_event_timestamp_c2_start" : 1691371347784,
      "network_event_timestamp_response_start" : 1691371348192,
      "network_event_options_allow_cellular_access" : false,
      "cloudkit_info_client_bundle_id" : "com.apple.backupd"
    }
  ]
}
(2023-08-10 11:55:25 +0000) [splunk -> flushMessages] {
  "postTime" : 1691668525,
  "clientId" : "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXX8B",
  "events" : [
    {
      "cloudkit_info_client_bundle_id" : "com.apple.backupd",
      "network_event_options_apple_id_context" : false,
      "network_event_network_request_header_size" : 771,
      "network_event_network_interface_identifier" : "ipsec0",
      "_osName" : "iPadOS",
      "_productFamily" : "iPad",
      "network_event_network_request_uri" : "redacted",
      "network_event_timestamp_c2_now" : 1691485192414,
      "_auroraSchemaID" : "com.apple.aurora.apptelemetry.cdd.Network",
      "cloudkit_info_container" : "com.apple.backup.ios",
      "network_event_options_allow_expensive_access" : false,
      "_status" : 0,
      "network_event_network_request_body_bytes_sent" : 9539,
      "cloudkit_info_operation_group_operation_group_name" : "Automatic Backup",
      "_method" : 1,
      "network_event_options_out_of_process_force_discretionary" : true,
      "network_event_network_hostname" : "gateway.icloud.com",
      "network_event_options_quality_of_service" : "utility",
      "network_event_options_tls_pinning_required" : true,
      "_productModel" : "iPad7,3",
      "network_event_options_timeout_interval_for_resource" : 3600,
      "_build" : "20G75",
      "network_event_network_remote_addresss_and_port" : "**:***:***:*:443",
      "network_event_options_discretionary_network_behavior" : "T",
      "cloudkit_info_environment" : "Production",
      "_internal" : 0,
      "cloudkit_info_anonymous" : false,
      "network_event_options_duet_pre_cleared_mode" : "noBudgeting",
      "network_event_network_previous_attempt_count" : 0,
      "_osVersion" : "16.6",
      "cloudkit_info_client_operation_operation_type" : "CKDModifyRecordsOperation",
      "network_event_network_negotiated_tls_protocol_version" : "TLSv13",
      "network_event_network_response_header_size" : 502,
      "network_event_network_connection_reused" : true,
      "network_event_timestamp_c2_init" : 1691485192008,
      "network_event_options_out_of_process" : true,
      "network_event_network_status_code" : 200,
      "network_event_timestamp_request_start" : 1691485192020,
      "network_event_options_timeout_interval_for_request" : 0,
      "network_event_network_protocol_name" : "h2",
      "network_event_timestamp_request_end" : 1691485192020,
      "cloudkit_info_database_scope" : "Private",
      "network_event_options_allow_power_nap_scheduling" : false,
      "network_event_timestamp_response_end" : 1691485192383,
      "network_event_timestamp_c2_start" : 1691485192008,
      "network_event_timestamp_response_start" : 1691485192381,
      "network_event_options_allow_cellular_access" : false,
      "network_event_network_response_body_bytes_received" : 5583
    }
  ]
}
(2023-08-10 11:55:27 +0000) [splunk -> flushMessages] {
  "postTime" : 1691668527,
  "clientId" : "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXX57",
  "events" : [
    {
      "cloudkit_info_client_bundle_id" : "com.apple.photos.cloud",
      "network_event_options_apple_id_context" : false,
      "network_event_network_request_header_size" : 1863,
      "network_event_network_interface_identifier" : "ipsec0",
      "_productFamily" : "iPad",
      "network_event_network_request_uri" : "redacted",
      "_auroraSchemaID" : "com.apple.aurora.apptelemetry.cdd.Network",
      "network_event_timestamp_c2_now" : 1691499897435,
      "_osName" : "iPadOS",
      "cloudkit_info_container" : "com.apple.photos.cloud",
      "network_event_options_allow_expensive_access" : true,
      "_status" : 0,
      "cloudkit_info_operation_group_operation_group_name" : "Non-Derivatives Prefetch",
      "_method" : 1,
      "network_event_options_quality_of_service" : "utility",
      "network_event_options_out_of_process_force_discretionary" : true,
      "network_event_network_hostname" : "edge-018.ausyd2.icloud-content.com",
      "network_event_network_request_body_bytes_sent" : 0,
      "network_event_options_tls_pinning_required" : false,
      "_productModel" : "iPad7,3",
      "network_event_options_timeout_interval_for_resource" : 3600,
      "_build" : "20G75",
      "network_event_network_remote_addresss_and_port" : "**.***.***.**:443",
      "network_event_options_discretionary_network_behavior" : "T",
      "cloudkit_info_environment" : "Production",
      "_internal" : 0,
      "cloudkit_info_anonymous" : false,
      "network_event_network_previous_attempt_count" : 0,
      "network_event_options_duet_pre_cleared_mode" : "withBudgeting",
      "_osVersion" : "16.6",
      "cloudkit_info_client_operation_operation_type" : "CKDCodeFunctionInvokeOperation",
      "network_event_network_negotiated_tls_protocol_version" : "TLSv13",
      "network_event_network_response_header_size" : 1988,
      "network_event_network_connection_reused" : true,
      "network_event_timestamp_c2_init" : 1691499896238,
      "network_event_network_status_code" : 206,
      "network_event_options_out_of_process" : true,
      "network_event_timestamp_request_start" : 1691499896247,
      "network_event_network_protocol_name" : "http\/1.1",
      "network_event_options_timeout_interval_for_request" : 0,
      "network_event_timestamp_request_end" : 1691499896248,
      "cloudkit_info_database_scope" : "Private",
      "network_event_options_allow_power_nap_scheduling" : false,
      "network_event_timestamp_response_end" : 1691499897396,
      "network_event_timestamp_c2_start" : 1691499896238,
      "network_event_timestamp_response_start" : 1691499896579,
      "network_event_options_allow_cellular_access" : true,
      "network_event_network_response_body_bytes_received" : 608902
    }
  ]
}
(2023-08-10 11:55:27 +0000) [splunk -> flushMessages] {
  "postTime" : 1691668527,
  "clientId" : "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXX8B",
  "events" : [
    {
      "cloudkit_info_client_bundle_id" : "com.apple.backupd",
      "generic_event_key_systemScheduler" : "xpcActivity",
      "generic_event_startTime" : "2023-08-09 09:17:28 +0000",
      "_productFamily" : "iPad",
      "_osName" : "iPadOS",
      "_auroraSchemaID" : "com.apple.aurora.apptelemetry.cdd.Operation",
      "generic_event_key_wasCancelled" : false,
      "cloudkit_info_container" : "com.apple.backup.ios",
      "_status" : 0,
      "cloudkit_info_operation_group_operation_group_name" : "Automatic Backup",
      "_method" : 2162,
      "generic_event_key_adpEnabled" : false,
      "generic_event_key_xpcActivity_state" : "Continue",
      "_productModel" : "iPad7,3",
      "_build" : "20G75",
      "cloudkit_info_environment" : "Production",
      "_internal" : 0,
      "generic_event_key_xpcActivity_identifier" : "com.apple.backupd.wifi",
      "generic_event_key_zoneKeysRolled" : 0,
      "cloudkit_info_anonymous" : false,
      "generic_event_key_xpcActivity_interval" : 0,
      "generic_event_key_qualityOfService" : "Utility",
      "_osVersion" : "16.6",
      "cloudkit_info_client_operation_operation_type" : "CKModifyRecordsOperation",
      "generic_event_key_xpcActivity_shouldDefer" : false,
      "generic_event_key_isLongLived" : false,
      "generic_event_key_finishedWithErrorChain" : "",
      "generic_event_key_finishedWithError" : false,
      "generic_event_endTime" : "2023-08-09 09:17:30 +0000",
      "generic_event_key_xpcActivity_priority" : "Utility",
      "cloudkit_info_database_scope" : "Private",
      "generic_event_key_perRecordKeysRolled" : 0,
      "generic_event_key_zoneishKeysRolled" : 0,
      "generic_event_key_shareKeysRolled" : 0,
      "generic_event_key_xpcActivity_autoDefer" : true
    }
  ]
}
-->


PEERS AND TRUSTED PEERS

I have observed the the use of 'Trusted Peers' in a number of ways. In logs it appears the 'peers' are actually devices/machines. However, in the data file for TrustedPeersHelper, the obfuscated names of people I know (in my contacts) can be seen. 

Some of the observed peer references include: TPHPeer, IO80211PeerManager, IO80211RealTimePeerManager, IO80211AWDLPeerManager, IO80211P2PPeerManager, fPeerManagerReporters, fInterfacePeerCounters, addPeerOperation, peerqueue_Infrastructure, peerinput_Infrastructure, peerqueue_AIRlink, peerinput_AirLink, peerqueue_SoftAP, peerinput_SoftAP, createPeerManager, peerManager, PeerList, _multicastPeer, _unicastPeer, CLPeerRangingNotifier, CLPeerRangingNotifierSilo, RTG Peers, peerID, peerData, peerIdentifier, MacOS Peer, IOS Peer, EgoPeer, egoPeerMachineID, Self peer, Backup peer meta, CKKSActualPeer, CKKSSOSPeer, CKKSOSSelfPeer, Local peer, octogonPeerID, sosPeerID and secretPeerID.

<--
TrustedPeersHelper: [com.apple.security.trustedpeers:container] loadModel: allowedMachineIDs: ["xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx+xxxxxxxxxxxxxxx+xxxxxxxxxxxxxxx", "TOL/xxxxxxxx+xxxxxxxxx+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx+xxxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx+/xxxx+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx/t", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx+xxxxxxxxxxxxxxxx/xxxxxxxxxxxxxxxxxxx/xxxxx", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx+hb", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx+xxxxxxxxxxxxxxx+xxxxxxxxxxxxxxx", "j/xxxxxxxxxxxxxxxxxx+xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx/xxxxxxxxxxxxxxx"]
-->


Below is the plist from the TrustedPeersHelper data file. The presence of 'com.apple.private.appleaccount.app-hidden-from-icloud-setting' is an unknown. 

<--
com.apple.TrustedPeersHelper

<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN' "http: //www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict> 
<key>application-identifier</key>
<string>com.apple.TrustedPeersHelper</string>
<key>aps-environment</key>
<string>serverPreferred</string>
<key>com.apple.application-identifier</key>
<string>com.apple.TrustedPeersHelper</string>
<key>com.apple.developer.aps-environment</key>
<string>serverPreferred</string>
<key>com.apple.developer.icloud-container-environment</key>
<string>Production</string>
<key>com.apple.developer.icloud-services</key>
</array>
<string>CloudKit</string>
</array>
<key>com.apple.private.appleaccount.app-hidden-from-icloud-settings</key>
<true/>
<key>com.apple.private.cloudkit.allowUnverifiedAccount</key>
<true/>
<key>com.apple.private.cloudkit.buddyAccess</key>
<true/>
<key>com.apple.private.cloudkit.customAccounts</key>
<true/>
<key>com.apple.private.cloudkit.prefix</key>
<string>com.apple.security.cuttlefish</string>
<key>com.apple.private.cloudkit.spi</key>
<true/>
<key>com.apple.private.cloudkit.supportservice</key>
<true/>
<key>com.apple.private.cloudkit.systemService</key>
<true/>
<key>com.apple.security.exception.files.absolute-path.read-write</key>
</array>
<string>/private/var/Keychains/</string>
</array>
<key>com.apple.security.exception.mach-lookup.global-name‹/key>
</array>
<string>com.apple.accountsd.accountmanager</string>
<string>com.apple.mobile.usermanagerd.xpc</string>
<string>com.apple.security.sfkeychainserver</string>
<string>com.apple.securityd</string>
</array>
<key>com.apple.security.exception.shared-preference.read-write</key>
</array>
<string>com.apple.TrustedPeersHelper</string>
<string>com.apple.security</string>
</array>
<key>com.apple.security.ts.cloudkit-client</key>
<true/>
<key>com.apple.symptom_diagnostics.report</key>
<true/>
<key>com.apple.usermanagerd.persona.fetch</key>
<true/>
<key>keychain-access-groups</key>
</array>
<string>com.apple.security.sos</string>
<string>com.apple.security.ckks</string>
<string>com.apple.security.octagon</string>
<string>com.apple.security.egoIdentities</string>
</array>
<key>seatbelt-profiles</key>
</array>
<string>temporary-sandbox</string>
</array>
</dict>
</plist>
-->


TRUSTED PEERS AND SPONSORS

TrustedPeersHelper checks 22 machine IDs of 'sponsors' from a list called 'TPMachineIDList' that are marked a unknown, allowed and preapproval (Note: I have pruned down only long lists of SHA256 strings, the list of 'has an unknown machine ID' and the disposition peerID list to only a few examples for readability).

TPH then goes on to create a list of SHA256 strings of 'included' and 'excluded' sponsors. It repeats this a number of times with different sets of sponsor data information.


<--
TrustedPeersHelper: (TrustedPeers) [com.apple.security.trustedpeers:model] Beginning sponsor checking; machine ID list: <TPMachineIDList: (
    "<TPMachineID: xxxx redacted xxx +8 unknown 2023-08-02 21:50:43 +0000>",
    "<TPMachineID: xxxx+xxxx/xxxx/u92Os allowed 2023-08-02 21:50:43 +0000>",
)>
TrustedPeersHelper: (TrustedPeers) [com.apple.security.trustedpeers:model] Including information from sponsor (SHA256:redacted/redacted+redacted=): included: {(
    "SHA256:xxxx redacted xxxx=",
    "SHA256:xxxx redacted xxxx=",
    "SHA256:xxxx redacted xxxx=",
)} excluded: {(
    "SHA256:xxxx redacted xxxx=",
    "SHA256:xxxx redacted xxxx=",
    "SHA256:xxxx redacted xxxx=",
)}
TrustedPeersHelper: (TrustedPeers) [com.apple.security.trustedpeers:model] Inspecting voucher claiming to be from sponsor: {
    beneficiary = "SHA256:xxxx redacted xxxx+M=";
    reason = RESTORE;
    sponsor = "SHA256:xxxx redacted xxxx=";
}
TrustedPeersHelper: (TrustedPeers) [com.apple.security.trustedpeers:model] voucher: peer (SHA256:xxxx redacted xxxx+M=) already excluded
TrustedPeersHelper: (TrustedPeers) [com.apple.security.trustedpeers:model] Inspecting voucher claiming to be from sponsor: {
    beneficiary = "SHA256:xxxx redacted xxxx=";
    reason = "SECURE_CHANNEL";
    sponsor = "SHA256:xxxx redacted xxxx=";
}
syncdefaultsd: [com.apple.kvs:Connection] Saving change token to disk for <SYDDaemonToClientConnection: 0x******820; registeredStoreIDs=[<SYDStoreID: 0x******130; identifier=com.apple.security.cloudkeychainproxy3 type=NoEncryption>] clientPID=517>
homed: (Security) SecItemCopyMatching
homed: (Security) SecItemCopyMatching_ios
TrustedPeersHelper: (TrustedPeers) [com.apple.security.trustedpeers:model] After sponsor checking: included:{(
    "SHA256:xxxx redacted xxxx=",
    "SHA256:xxxx redacted xxxx=",
    "SHA256:xxxx redacted xxxx=",
    "SHA256:xxxx redacted xxxx=",
    "SHA256:xxxx redacted xxxx=",
    "SHA256:xxxx redacted xxxx=",
    "SHA256:xxxx redacted xxxx="
)} excluded:{(
    "SHA256:xxxx redacted xxxx=",
    "SHA256:xxxx redacted xxxx=",
    "SHA256:xxxx redacted xxxx=",
    "SHA256:xxxx redacted xxxx=",
    "SHA256:xxxx redacted xxxx=",
    "SHA256:xxxx redacted xxxx=",
    "SHA256:xxxx redacted xxxx="
)}
TrustedPeersHelper: (TrustedPeers) [com.apple.security.trustedpeers:model] Using existing preapproval list: {(
)}
TrustedPeersHelper: (TrustedPeers) [com.apple.security.trustedpeers:model] Final preapproval list: {(
)}
TrustedPeersHelper: (TrustedPeers) [com.apple.security.trustedpeers:model] After preapproval checking: included:{(
    "SHA256:xxxx redacted xxxx=",
    "SHA256:xxxx redacted xxxx=",
    "SHA256:xxxx redacted xxxx=",
    "SHA256:xxxx redacted xxxx=",
    "SHA256:xxxx redacted xxxx=",
    "SHA256:xxxx redacted xxxx=",
    "SHA256:xxxx redacted xxxx="
)} excluded:{(
    "SHA256:xxxx redacted xxxx=",
    "SHA256:xxxx redacted xxxx=",
    "SHA256:xxxx redacted xxxx=",
    "SHA256:xxxx redacted xxxx=",
    "SHA256:xxxx redacted xxxx=",
    "SHA256:xxxx redacted xxxx=",
    "SHA256:xxxx redacted xxxx="
)}
securityd: [com.apple.securityd:KCdb] 0x13d0052b0(0x13c60d9e0) is unlocked; decoding for makeUnlocked()
TrustedPeersHelper: (TrustedPeers) [com.apple.security.trustedpeers:model] Peer (SHA256:xxxx redacted xxxx=) has an unknown machine ID (xx redacted xx/xx redacted xx)
TrustedPeersHelper: (TrustedPeers) [com.apple.security.trustedpeers:model] Peer (SHA256:xxxx redacted xxxx=) has an unknown machine ID (xx redacted xx+xx redacted xx/xx redacted xx)
TrustedPeersHelper: (TrustedPeers) [com.apple.security.trustedpeers:model] Peer (SHA256:xxxx redacted xxxx=) has an unknown machine ID (xxxx redacted xxxx)
TrustedPeersHelper: (TrustedPeers) [com.apple.security.trustedpeers:model] Peer (SHA256:xxxx redacted xxxx/ITe+Pos=) has an unknown machine ID (xxxx redacted xxxx+X4BG)
TrustedPeersHelper: (TrustedPeers) [com.apple.security.trustedpeers:model] Peer (SHA256:xxxx redacted xxxx/xxxxx=) has an unknown machine ID (xx redacted xx/xx redacted xx+xxxx+xx redacted xx)
TrustedPeersHelper: (TrustedPeers) [com.apple.security.trustedpeers:model] Peer (SHA256:/xxxx redacted xxxx=) has an unknown machine ID (xx redacted xx+xx redacted xx/xx redacted xx)
TrustedPeersHelper: (TrustedPeers) [com.apple.security.trustedpeers:model] Remote peers with the ego machine ID: {(
)}
rapportd: (CoreUtils) [com.apple.rapport:CLinkD] Update client from assistantd:512
TrustedPeersHelper: (TrustedPeers) [com.apple.security.trustedpeers:model] After machine ID checking: included:{(
    "SHA256:xxxx redacted xxxx=",
    "SHA256:xxxx redacted xxxx=",
    "SHA256:xxxx redacted xxxx=",
    "SHA256:xxxx redacted xxxx=",
    "SHA256:xxxx redacted xxxx=",
    "SHA256:xxxx redacted xxxx=",
    "SHA256:xxxx redacted xxxx="
)} excluded:{(
    "SHA256:xxxx redacted xxxx=",
    "SHA256:xxxx redacted xxxx=",
    "SHA256:xxxx redacted xxxx=",
    "SHA256:xxxx redacted xxxx=",
    "SHA256:xxxx redacted xxxx=",
    "SHA256:xxxx redacted xxxx=",
    "SHA256:xxxx redacted xxxx="
)}
TrustedPeersHelper: (TrustedPeers) [com.apple.security.trustedpeers:model] Analysis didn't actually change anything, returning old dynamicInfo
TrustedPeersHelper: [com.apple.security.trustedpeers:container] updateTrustIfNeeded: produced a stableInfo: nil
TrustedPeersHelper: [com.apple.security.trustedpeers:container] updateTrustIfNeeded: produced a dynamicInfo: {
    clock = 350;
    dispositions =     (
                {
            disposition =             {
                unknownMachineID =                 {
                };
            };
            peerID = "SHA256:xxxx redacted xxxx=";
        },
                {
            disposition =             {
                unknownMachineID =                 {
                };
            };
            peerID = "SHA256:xxxx redacted xxxx/ITe+Pos=";
        },
                {
            disposition =             {
                unknownMachineID =                 {
                };
            };
            peerID = "SHA256:xxxx redacted xxxx+O7Nj/MUX0=";
        },
                {
            disposition =             {
                unknownMachineID =                 {
                };
            };
            peerID = "SHA256:/xxxx redacted xxxx=";
        }
    );
    excluded =     (
        "SHA256:xxxx redacted xxxx=",
        "SHA256:xxxx redacted xxxx=",
        "SHA256:xxxx redacted xxxx=",
        "SHA256:xxxx redacted xxxx="
    );
    included =     (
        "SHA256:xxxx redacted xxxx=",
        "SHA256:xxxx redacted xxxx=",
        "SHA256:xxxx redacted xxxx="
    );
}
triald: (TrialServer) [com.apple.triald:server] TRIXPCStatusRequestHandler 0x13ad05630: begin experimentHistoryRecordsWithLimit:newerThanDate:deploymentEnvironment:completion: with env <private>
triald: (TrialServer) [com.apple.triald:server] Running server context block with qos: 25
-->


TrustedPeersHelper then used triald, homed, assistantd and apsd to push the information to the SYDStoreID, which I assume is a database hidden in iCloud. A signed identifier does not match so homed uses a persona to complete the task. The accepted sponsor userIDs are then added to the firewall entries. For what purpose I do not know. The log then continues on to add the accepted sponsor userIDS to the PCS (ProtectedCloudStorage) databases (discussed in the TOMBS section).

<--
rapportd: (HMFoundation) HMFActivity
homed: (HomeKitDaemonLegacy) [com.apple.HomeKit:IDSFirewall.manager] Starting HMDIDSFirewallManager
rapportd: (HMFoundation) HMFActivity
homed: (HomeKitDaemonLegacy) [com.apple.HomeKit:IDSFirewall.manager] Replacing firewall entries with userIDs: <private>
homed: (IDS) [com.apple.IDS:IDSService] IDSFirewall update for service com.apple.private.alloy.willow replaceDonatedEntriesWithEntries <private>
identityservicesd: [com.apple.IDS:IDSFirewall] Update to category 7 populateMergeIDForEntries <private>
identityservicesd: [com.apple.IDS:IDSFirewall] Received query result with success {YES} and result {<private>}
identityservicesd: [com.apple.IDS:IDSFirewall] Populating merge for handles {<private>}
identityservicesd: [com.apple.IDS:IDSFirewall] Update to category 7 queryError (null) addEntries <private>
-->


THE BUDDY GANG

The CloudSettingsSyncAgent has some rather suspicious process friends, 'com.apple.fakebuddy.launchnew' and 'com.apple.fakebuddy.launchupdate'. Judging by the result 'Sync agent launced, but feature is disable, do nothing', I am assuming an imposter. We have also met RTBuddy (typical), RTBuddyV2, AMPMacBuddy, purplebuddy, buddyOffers, PastBuddy and _miniBuddy.


HELPERS

The Stealth Developer has a whole host of "helpers", like com.spotify.client.startuphelper (SPTStartUpHelperAppDelegate) who has permission to do the following:

<--
<plist version="1.0">
<dict>
    <key>com.apple.security.cs.allow-jit</key>
    <true/>
    <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
    <true/>
    <key>com.apple.security.cs.disable-executable-page-protection</key>
    <true/>
    <key>com.apple.security.cs.disable-library-validation</key>
    <true/>
    <key>com.apple.security.device.audio-input</key>
    <true/>
</dict>
</plist>
-->


TOMBS

The function of the tombs isn't clear but it is related to Protected Cloud Storage. It appears the tombs hold long-term archived historical information about the user relating to each tomb (including deleted data). I propose this theory as FaceTime hasn't been used in at least 8-9 years and that data was deleted yet it was able to somehow locate old messages in the same account on a completely different computer and location to the last time FaceTime was used. 

<--
callservicesd: (IDS) [com.apple.IDS:_IDSService] Client setup service -- checked in {service: com.apple.private.alloy.facetime.audio}
callservicesd: (IDS) [com.apple.IDS:IDSAccountController]     com.apple.private.alloy.facetime.audio -> 0x******220
callservicesd: (IDS) [com.apple.IDS:Accounts] Re-loading cached accounts for service: com.apple.private.alloy.facetime.audio with dictionaries <private>
callservicesd: (IDS) [com.apple.IDS:Accounts] Creating new IDSAccount 0x******250 with config <private> uniqueID <private> serviceName com.apple.private.alloy.facetime.audio
callservicesd: (IDS) [com.apple.IDS:Registration] <private> enabledAccountsForService com.apple.private.alloy.facetime.audio
callservicesd: (IDS) [com.apple.IDS:IDSAccountController] Updating delegates of account changes
callservicesd: (IDS) [com.apple.IDS:IDSConnection] _IDSConnection - initing {self: 0x******f70, account.serviceName: com.apple.private.alloy.facetime.audio}
callservicesd: (IDS) [com.apple.IDS:_IDSService] Setting up new connection for <private>
callservicesd: (IDS) [com.apple.IDS:_IDSService] Connection map:
callservicesd: (IDS) [com.apple.IDS:_IDSService]    <private> => <private>
callservicesd: (IDS) [com.apple.IDS:Registration] activeAccountsChanged, oldSet: (null)  newSet: <private>
callservicesd: (IDS) [com.apple.IDS:_IDSService] _IDSService - added delegate {self: 0x******340, serviceName com.apple.private.alloy.facetime.audio, listenerCaps <private>, delegates: 1, wantsPseudonymUpdates: YES}
containermanagerd: (ContainerManagerCommon) [com.apple.containermanager:fs] stat [<private>]: exists: 1, isDirectory: 0, fsNode: <~~~>
callservicesd: (IDS) [com.apple.IDS:_IDSService] _IDSService - added delegate {self: 0x******340, serviceName com.apple.private.alloy.facetime.audio, listenerCaps <private>, delegates: 2, wantsPseudonymUpdates: YES}
callservicesd: (IDS) [com.apple.IDS:_IDSService] Finalized check in -- finishing {service: com.apple.private.alloy.facetime.audio}
...
callservicesd: (IDS) [com.apple.IDS:_IDSService] _IDSService - added delegate {self: 0x******160, serviceName com.apple.private.alloy.facetime.video, listenerCaps <private>, delegates: 2, wantsPseudonymUpdates: YES}
callservicesd: (FTClientServices) [com.apple.Registration:ServiceAvailability] <private> updating availability for FTCServiceTypeFaceTime   => from FTCServiceAvailabilityUnavailable to FTCServiceAvailabilityAvailable
callservicesd: [com.apple.calls.callservicesd:Default] FaceTime Audio availability is 1. FaceTime Video availability is 1
callservicesd: [com.apple.calls.callservicesd:Default] FaceTime iCloud account is <private> (isActive=1, profileID=<private>) and relay iCloud account is <private> (isActive=1, profileID=<private>)
callservicesd: [com.apple.calls.callservicesd:Default] Successfully read data from keychain
callservicesd: [com.apple.calls.callservicesd:Default] Loaded last known FaceTime caller ID as <private>
callservicesd: [com.apple.calls.callservicesd:Default] Saving last known FaceTime caller ID as <private>
callservicesd: (IDS) [com.apple.IDS:_IDSService] Finalized check in -- finishing {service: com.apple.private.alloy.facetime.audio}
callservicesd: (IDS) [com.apple.IDS:_IDSService] Finalized check in -- finishing {service: com.apple.private.alloy.facetime.video}
-->


The tombs are also used to link devices of the AppleID, (both current and historical), machineIDs and peers to a 'Circle'. 

Observed references to the circle include: Keychain Circle Notification, Peers In Circle, Applicants To Circle, Rejected Applicants To Circle, Circle is Not Legacy, SOSCircle, SOSCCStatus, kSOSCCInCircle, SOS is monitoring, com.apple.securityd:circleop, Setting key_interests_need_updating to true in handleUpdateCircle. 

Other services observed interacting with tombs include: homed, HomeKitDaemonLegacy, HMFActivity, donotdisturbd and AppSSOAgent.

In the following example, secd runs a set of 'key-intrest' tasks:

<--
secd: [com.apple.securityd:key-interests] Calculating interests done: Registering with CKP
secd: [com.apple.securityd:key-interests] Updating interests: Message
secd: [com.apple.securityd:key-interests]  key-intrest: Message->UnlockedKeys: ak|+xxxxxxxxxxxxxxxxxxxxxxxxx:xxxxxxxx/xxxxxxxxxxxxxxxxx
secd: [com.apple.securityd:key-interests]  key-intrest: Message->UnlockedKeys: ak|/xxxxxxxxxxxxxxxxxxxxxxxxx:xxxxxxxx/xxxxxxxxxxxxxxxxx
secd: [com.apple.securityd:key-interests]  key-intrest: Message->UnlockedKeys: ak|xxxxxxxxxxxxxxxxxxxxxxxxxx:xxxxxxxx/xxxxxxxxxxxxxxxxx
secd: [com.apple.securityd:key-interests]  key-intrest: Message->UnlockedKeys: ak|xxxxxxxxxxxxxxxxxxxxxxxxxx:xxxxxxxx/xxxxxxxxxxxxxxxxx
secd: [com.apple.securityd:key-interests]  key-intrest: Message->UnlockedKeys: ak|g/xxxxxxxxxxxxxxxxxxxxxxxx:xxxxxxxx/xxxxxxxxxxxxxxxxx
secd: [com.apple.securityd:key-interests]  key-intrest: Message->UnlockedKeys: ak|xxxxxxxxxxxxxxxxxxxxxxxxxx:xxxxxxxx/xxxxxxxxxxxxxxxxx
secd: [com.apple.securityd:key-interests] Updating interests: Circle
secd: [com.apple.securityd:key-interests]  key-intrest: Circle->AlwaysKeys: -ak|xxxxxxxxxxxxxxxxxxxxxxxxxx
secd: [com.apple.securityd:key-interests]  key-intrest: Circle->AlwaysKeys: -ak|xxxxxxxx++xxxxxxxxxxxxxxxx
secd: [com.apple.securityd:key-interests]  key-intrest: Circle->AlwaysKeys: -ak|g/xxxxxxxxxxxxxxxxxxxxxxxx
secd: [com.apple.securityd:key-interests]  key-intrest: Circle->AlwaysKeys: -ak|+xxxxxxxxxxxxxxxxxxxxxxxxx
secd: [com.apple.securityd:key-interests]  key-intrest: Circle->AlwaysKeys: -ak|xxxxxxxxxxxxxxxxxxxxxxxxxx
secd: [com.apple.securityd:key-interests]  key-intrest: Circle->AlwaysKeys: -ak|xxxxxxxxxxxxxxxxxxxxxxxxxx
secd: [com.apple.securityd:key-interests]  key-intrest: Circle->AlwaysKeys: -ak|xxxxxxxx/xxxxxxxxxxxxxxxxx
secd: [com.apple.securityd:key-interests]  key-intrest: Circle->AlwaysKeys: -ak|/xxxxxxxxxxxxxxxxxxxxxxxxx
secd: [com.apple.securityd:key-interests]  key-intrest: Circle->AlwaysKeys: dbg-Scope
secd: [com.apple.securityd:key-interests]  key-intrest: Circle->UnlockedKeys: oak
secd: [com.apple.securityd:key-interests]  key-intrest: Circle->UnlockedKeys: ~iCloudIdentity-tomb
secd: [com.apple.securityd:key-interests]  key-intrest: Circle->UnlockedKeys: ~BackupBagV0-tomb
secd: [com.apple.securityd:key-interests]  key-intrest: Circle->UnlockedKeys: ~PCS-Maildrop-tomb
secd: [com.apple.securityd:key-interests]  key-intrest: Circle->UnlockedKeys: ~PCS-iMessage-tomb
secd: [com.apple.securityd:key-interests]  key-intrest: Circle->UnlockedKeys: ~PCS-Notes-tomb
secd: [com.apple.securityd:key-interests]  key-intrest: Circle->UnlockedKeys: ~PCS-FDE-tomb
secd: [com.apple.securityd:key-interests]  key-intrest: Circle->UnlockedKeys: ~PCS-MasterKey-tomb
secd: [com.apple.securityd:key-interests]  key-intrest: Circle->UnlockedKeys: ~NanoRegistry-tomb
secd: [com.apple.securityd:key-interests]  key-intrest: Circle->UnlockedKeys: ~WiFi-tomb
secd: [com.apple.securityd:key-interests]  key-intrest: Circle->UnlockedKeys: ~PCS-Feldspar-tomb
secd: [com.apple.securityd:key-interests]  key-intrest: Circle->UnlockedKeys: ~OtherSyncable-tomb
secd: [com.apple.securityd:key-interests]  key-intrest: Circle->UnlockedKeys: ~PCS-iCloudDrive-tomb
secd: [com.apple.securityd:key-interests]  key-intrest: Circle->UnlockedKeys: ~CreditCards-tomb
secd: [com.apple.securityd:key-interests]  key-intrest: Circle->UnlockedKeys: ~AccessoryPairing-tomb
secd: [com.apple.securityd:key-interests]  key-intrest: Circle->UnlockedKeys: ~Passwords-tomb
secd: [com.apple.securityd:key-interests]  key-intrest: Circle->UnlockedKeys: ~ContinuityUnlock-tomb
secd: [com.apple.securityd:key-interests]  key-intrest: Circle->UnlockedKeys: ~WatchMigration-tomb
secd: [com.apple.securityd:key-interests]  key-intrest: Circle->UnlockedKeys: ~PCS-Sharing-tomb
secd: [com.apple.securityd:key-interests]  key-intrest: Circle->UnlockedKeys: ~PCS-Photos-tomb
secd: [com.apple.securityd:key-interests]  key-intrest: Circle->UnlockedKeys: ~PCS-Escrow-tomb
secd: [com.apple.securityd:key-interests]  key-intrest: Circle->UnlockedKeys: ~AppleTV-tomb
secd: [com.apple.securityd:key-interests]  key-intrest: Circle->UnlockedKeys: ~HomeKit-tomb
secd: [com.apple.securityd:key-interests]  key-intrest: Circle->UnlockedKeys: ~PCS-Backup-tomb
secd: [com.apple.securityd:key-interests]  key-intrest: Circle->UnlockedKeys: ~PCS-CloudKit-tomb
secd: [com.apple.securityd:key-interests]  key-intrest: Circle->UnlockedKeys: ~RecoveryRing
secd: [com.apple.securityd:key-interests] Updating interests: KeyParameter
secd: [com.apple.securityd:key-interests]  key-intrest: KeyParameter->AlwaysKeys: >KeyParameters
secd: [com.apple.securityd:key-interests]  key-intrest: KeyParameter->AlwaysKeys: ^OfficialDSID
secd: [com.apple.securityd:key-interests] Pushing 43 interests to CKP
-->

<--
secd: [com.apple.securityd:keychainitemupgrade] performing KeychainItemUpgradeRequestServerInitialize
secd: [com.apple.securityd:keychainitemupgrade] upgrading persistent refs
secd: [com.apple.securityd:ds] found item for key engine-state-v2@dk
secd: [com.apple.securityd:ds] found item for key engine-manifest-cache@dk
secd: [com.apple.securityd:ds] found item for key engine-peer-states@dk
secd: [com.apple.securityd:SecWarning] SecDbKeychainItemV7: serialized item exceeds reasonable size (172641 bytes)
secd: [com.apple.securityd:engine] <Engine xxxxxxxxxxxxxxxxxxxxxxx89A peers +xxxxxxxxxxxxxxxxxxxxxxxlb3 /xxxxxxxxxxxxxxxxxxxxxxxDuF xxxxxxxxxxxxxxxxxxxxxxxGaO xxxxxxxxxxxxxxxxxxxxxxxTtz iCloudIdentity-tomb PCS-MasterKey-tomb PCS-FDE-tomb PCS-iMessage-tomb NanoRegistry-tomb PCS-Backup-tomb ContinuityUnlock-tomb PCS-Feldspar-tomb WatchMigration-tomb AppleTV-tomb PCS-Notes-tomb AccessoryPairing-tomb PCS-CloudKit-tomb PCS-iCloudDrive-tomb HomeKit-tomb PCS-Maildrop-tomb PCS-Sharing-tomb PCS-Photos-tomb PCS-Escrow-tomb BackupBagV0-tomb MC[0] PS[0]>
secd: [com.apple.securityd:ds] failed to load item {
    acct = SecureBackupPublicKeybag;
    agrp = "com.apple.sbd";
    pdmn = ak;
    svce = SecureBackupService;
    sync = 1;
}: (null)
secd: [com.apple.securityd:engine] No keybag found for v0 backup peer: (null)
secd: [com.apple.securityd:backup] PCS-Backup-tomb backup bag: {length = 8295, bytes = 0x******63 ******f0 ******53 00000004 ... ******** ******c2 }
secd: [com.apple.securityd:backup] PCS-FDE-tomb backup bag: {length = 8295, bytes = 0x******63 ******f0 ******53 00000004 ... ******** ******22 }
secd: [com.apple.securityd:backup] PCS-MasterKey-tomb backup bag: {length = 8295, bytes = 0x******63 ******f0 ******53 00000004 ... ******** ******b1 }
secd: [com.apple.securityd:backup] iCloudIdentity-tomb backup bag: {length = 8295, bytes = 0x******63 ******f0 ******53 00000004 ... ******** ******12 }
secd: [com.apple.securityd:backup] PCS-Photos-tomb backup bag: {length = 8295, bytes = 0x******63 ******f0 ******53 00000004 ... ******** ******cb }
secd: [com.apple.securityd:backup] PCS-Escrow-tomb backup bag: {length = 8295, bytes = 0x******63 ******f0 ******53 00000004 ... ******** ******1a }
secd: [com.apple.securityd:backup] AppleTV-tomb backup bag: {length = 8295, bytes = 0x******63 ******f0 ******53 00000004 ... ******** ******09 }
secd: [com.apple.securityd:backup] PCS-CloudKit-tomb backup bag: {length = 8295, bytes = 0x******63 ******f0 ******53 00000004 ... ******** ******64 }
secd: [com.apple.securityd:backup] HomeKit-tomb backup bag: {length = 8295, bytes = 0x******63 ******f0 ******53 00000004 ... ******** ******bd }
secd: [com.apple.securityd:backup] PCS-Notes-tomb backup bag: {length = 8295, bytes = 0x******63 ******f0 ******53 00000004 ... ******** ******ad }
secd: [com.apple.securityd:backup] WatchMigration-tomb backup bag: {length = 8295, bytes = 0x******63 ******f0 ******53 00000004 ... ******** ******f9 }
secd: [com.apple.securityd:backup] ContinuityUnlock-tomb backup bag: {length = 8295, bytes = 0x******63 ******f0 ******53 00000004 ... ******** ******b7 }
secd: [com.apple.securityd:backup] PCS-Maildrop-tomb backup bag: {length = 8295, bytes = 0x******63 ******f0 ******53 00000004 ... ******** ******8e }
secd: [com.apple.securityd:backup] NanoRegistry-tomb backup bag: {length = 8295, bytes = 0x******63 ******f0 ******53 00000004 ... ******** ******7f }
secd: [com.apple.securityd:backup] PCS-Sharing-tomb backup bag: {length = 8295, bytes = 0x******63 ******f0 ******53 00000004 ... ******** ******28 }
secd: [com.apple.securityd:backup] PCS-iMessage-tomb backup bag: {length = 8295, bytes = 0x******63 ******f0 ******53 00000004 ... ******** ******1e }
secd: [com.apple.securityd:backup] AccessoryPairing-tomb backup bag: {length = 8295, bytes = 0x******63 ******f0 ******53 00000004 ... ******** ******d3 }
secd: [com.apple.securityd:backup] PCS-Feldspar-tomb backup bag: {length = 8295, bytes = 0x******63 ******f0 ******53 00000004 ... ******** ******b7 }
secd: [com.apple.securityd:backup] BackupBagV0-tomb backup bag: {length = 8295, bytes = 0x******63 ******f0 ******53 00000004 ... ******** ******bc }
secd: [com.apple.securityd:backup] PCS-iCloudDrive-tomb backup bag: {length = 8295, bytes = 0x******63 ******f0 ******53 00000004 ... ******** ******c0 }
secd: [com.apple.securityd:engine] me xxxxxxxxxxxxxxxxxxxxxxx89A ({(KeychainV0)}) trusted PCS-Backup-tomb ({(PCS-Backup-tomb)}) PCS-FDE-tomb ({(PCS-FDE-tomb)}) PCS-MasterKey-tomb ({(PCS-MasterKey-tomb)}) iCloudIdentity-tomb ({(iCloudIdentity-tomb)}) PCS-Photos-tomb ({(PCS-Photos-tomb)}) xxxxxxxxxxxxxxxxxxxxxxxTtz ({()}) PCS-Escrow-tomb ({(PCS-Escrow-tomb)}) AppleTV-tomb ({(AppleTV-tomb)}) PCS-CloudKit-tomb ({(PCS-CloudKit-tomb)}) HomeKit-tomb ({(HomeKit-tomb)}) +xxxxxxxxxxxxxxxxxxxxxxxlb3 ({()}) PCS-Notes-tomb ({(PCS-Notes-tomb)}) WatchMigration-tomb ({(WatchMigration-tomb)}) ContinuityUnlock-tomb ({(ContinuityUnlock-tomb)}) PCS-Maildrop-tomb ({(PCS-Maildrop-tomb)}) xxxxxxxxxxxxxxxxxxxxxxxGaO ({()}) NanoRegistry-tomb ({(NanoRegistry-tomb)}) PCS-Sharing-tomb ({(PCS-Sharing-tomb)}) /xxxxxxxxxxxxxxxxxxxxxxxDuF ({()}) PCS-iMessage-tomb ({(PCS-iMessage-tomb)}) AccessoryPairing-tomb ({(AccessoryPairing-tomb)}) PCS-Feldspar-tomb ({(PCS-Feldspar-tomb)}) BackupBagV0-tomb ({(BackupBagV0-tomb)}) PCS-iCloudDrive-tomb ({(PCS-iCloudDrive-tomb)})
secd: (Network) [com.apple.network:] networkd_settings_read_from_file initialized networkd settings by reading plist directly
secd: [com.apple.securityd:upgr-phase3] finished upgrading keychain items' persistent refs
secd: [com.apple.securityd:keychainitemupgrade] finished upgrading items!
secd: [com.apple.securityd:keychainitemupgrade-state] Beginning state transition attempt <OctagonStateTransitionOperation(nothing-to-do): intended:nothing_to_do actual:nothing_to_do>
secd: [com.apple.securityd:keychainitemupgrade] kicking off keychain item upgrade
secd: [com.apple.securityd:keychainitemupgrade-state] Finishing state transition attempt (ending in nothing_to_do, intended: nothing_to_do, f:[none], p:[]): <OctagonStateTransitionOperation(nothing-to-do): intended:nothing_to_do actual:nothing_to_do> (no error)
secd: [com.apple.securityd:keychainitemupgrade-state] Running state machine request <OctagonStateTransitionRequest: request-item-upgrade <OctagonStateTransitionOperation(upgrade-persistent-ref): intended:upgrade_persistent_ref actual:upgrade_persistent_ref> sources:1> (from nothing_to_do)
secd: [com.apple.securityd:keychainitemupgrade-state] Beginning state transition attempt <OctagonStateTransitionOperation(upgrade-persistent-ref): intended:upgrade_persistent_ref actual:upgrade_persistent_ref>
secd: [com.apple.securityd:keychainitemupgrade-state] Finishing state transition attempt (ending in upgrade_persistent_ref, intended: upgrade_persistent_ref, f:[none], p:[]): <OctagonStateTransitionOperation(upgrade-persistent-ref): intended:upgrade_persistent_ref actual:upgrade_persistent_ref> (no error)
secd: [com.apple.securityd:keychainitemupgrade] upgrading persistent refs
secd: [com.apple.securityd:upgr-phase3] finished upgrading keychain items' persistent refs
secd: [com.apple.securityd:keychainitemupgrade] finished upgrading items!
-->


There appear to be a number of sets of tombs including:

<UBKs-p---->
<UBKs-pC--->
<UB-sep---->
<UB-sep-S-->
<UB-s-pC--->
<UB-s-p---->

CloudKeychainProxy uses them for 'keytrace', and 'syncwith peers' tasks.

In the TrustedPeersHelper obfuscated data file, the tombs are listed as:
^PCS-MasterKey-tomb ^RecoveryRing ^iCloudIdentity-tomb ^PCS-Notes-tomb ^PCS-Photos-tomb ^ContinuityUnlock-tomb ^BackupBagV0-tomb ^PCS-Sharing-tomb ^PCS-iCloudDrive-tomb ^PCS-Maildrop-tomb ^PCS-CloudKit-tomb ^Passwords-tomb ^PCS-iMessage-tomb ^NanoRegistry-tomb ^PCS-Feldspar-tomb ^AppleTV-tomb ^PCS-Escrow-tomb ^HomeKit-tomb ^OtherSyncable-tomb ^CreditCards-tomb ^WiFi-tomb ^PCS-Backup-tomb ^WatchMigration-tomb ^PCS-FDE-tomb ^AccessoryPairing-tomb.

Also mentioned in the TrustedPeersHelper file: classes, Manatee, Engram, Device pairing, syncing, backup, HomeKit, Graph, Autounlock, Backstop, AirPort, WiFi, Validate peers, Reporting, Sponsors and Vendors.

There is also references to: walrusSetting, setWalrus, bestWalrusAcrossTrustedPeers, bestWalrusForStableInfo, walrusStableChanges, walrusenabled and bestWebAccessAcrossTrustedPeers.

I am puzzled by this particular instance and unsure what is happening in the following snippet. This relative whose contact information is invoked is not connected to my AppleID except as a contact in my address book. What I do note is that 'psc-cache' relates to the Protected Cloud Storage 'tombs' which appear to hold what is suspected to be, a substantial amount of archived activity data related to all areas of Apple services. The reason it is puzzling is that some of the contact information is out of date and I don't use Apples contact system, though it may be historical data from a time when I did.

<--
donotdisturbd: (Contacts) FetchingContacts
donotdisturbd: (Contacts) [com.apple.contacts:Contacts] Contacts access was granted
apsd: successful entitlement check 'com.apple.private.aps-connection-initiate' for 438
donotdisturbd: (Contacts) [com.apple.contacts:api-triage] 0004 BEGIN: Will execute fetch for request: <private>
donotdisturbd: (Contacts) [com.apple.contacts:api-triage] 0004 Entry point: unifiedContactsMatchingPredicate:keysToFetch:error:
runningboardd: (RunningBoard) [com.apple.runningboard:message] PERF: Received request from [osservice<com.apple.coreservices.launchservicesd>:120] (euid 0, auid 0): acquireAssertionWithDescriptor:error:
runningboardd: (RunningBoard) acquireAssertionWithDescriptor
donotdisturbd: (Contacts) [com.apple.contacts:api-triage] 0004 Predicate: <CNHandleStringsContactPredicate: 0x******dd0: kind=-[CNContact predicateForContactsMatchingHandleStrings:], handleStrings=(
    "+61 XXX XXX XXX",
    "XXXX XXXX",
    "XXXX@XXXX.com"
)>
donotdisturbd: (Contacts) [com.apple.contacts:api-triage] 0004 Default country code: au
apsd: Failed entitlement check 'com.apple.private.secure-apsclientv2' for 438
apsd: Failed entitlement check 'com.apple.private.aps-client-cert-access' for 438
apsd: Failed entitlement check 'com.apple.private.secure-apsclient' for 438
apsd: SetupConnection: env=<private> portName=<private>
apsd: successful entitlement check 'com.apple.private.dark-wake-push' for 438
donotdisturbd: (AddressBookCore) [com.apple.contacts:psc-cache] 0x******e60: Accounts: <private>
donotdisturbd: (AddressBookCore) [com.apple.contacts:psc-cache] 0x******e60: Account URLs: <private>
donotdisturbd: (AddressBookCore) [com.apple.contacts:psc-cache] 0x******e60: Updating persistent stores for coordinator: <private>
donotdisturbd: (AddressBookCore) [com.apple.contacts:psc-cache] 0x******e60: Stores before: <private>
donotdisturbd: (AddressBookCore) [com.apple.contacts:psc-cache] 0x******e60: Stores after: <private>
apsd: [com.apple.apsd:daemon] Found connection (null) for port name: <private>
apsd: [com.apple.apsd:connectionServer] <private>: Initializing connection server with environmentName '<private>' and connectionPortName '<private>'
opendirectoryd: [com.apple.opendirectoryd:session] UID: 0, EUID: 0, GID: 0, EGID: 0, PID: 441, PROC: xpcproxy RPC: getpwuid, Module: SystemCache, rpc_version: 2, uid: 501
opendirectoryd: (SystemCache) [com.apple.opendirectoryd:libinfo] Name: <private>, Node: /Local/Default
loginwindow: (LaunchServices) [com.apple.launchservices:cas] RECONNECT: handleSessionInformationMessage
apsd: [com.apple.apsd:connectionServer] <private>: Setting connection server name '<private>'
apsd: [com.apple.apsd:connectionServer] Looking up mach port for <private> port name: <private>
useractivityd: (Sharing) [com.apple.sharing:Framework] WiFi Platform capabilities 358000.
useractivityd: (Sharing) [com.apple.sharing:Framework] Device supports AWDL
opendirectoryd: [com.apple.opendirectoryd:session] getpwuid completed, delivered 1 result
apsd: [com.apple.apsd:courier] <private> adding connectionserver <private>, setting publicToken:<private>
apsd: [com.apple.apsd:courier] <private>: Will wait patiently for user <private> before recreating the courier state
-->


WIFI / FAKE AIRPLANE MODE 

We often turn WiFi and Bluetooth off and put into airplane mode as we are still clueless about how to regain control over our WiFi, computers and devices. It is a wasted exercise. In this particular instance, the Mac mini is being used to force WiFi to become active, instructing Springboard to hide the active Airplane Mode. Thumper is also mentioned in the telephony related logs of the iPhone. I have not been able to find out what it is though. =@= link to recent findings

On macOS 'fIsActivatingAccrossSimSwap'(below) is an example of how user settings are overridden. It is also possible a 'virtual copy' of my SIM has been created, as there is evidence of a GitHub script which facilitates this. https://github.com/zhuowei/SimServeriOS.git (runs SIM-AKA authentication on a jailbroken iPhone for VoLTE/VoWiFi/IMS research. Exposes a http interface compatible with https://github.com/fasferraz/USIM-https-server).=@=

<--
CommCenter: [com.apple.CommCenter:DATA.tech.drv.1] #I handleWifiAvailable_sync: available = true <private>
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I Wifi availability is changing to true
CommCenter: [com.apple.CommCenter:DATA.Connection.Internet.1] #I updateAgentState: NWAgent XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX8fa fAvailable false->true
CommCenter: [com.apple.CommCenter:DATA.Connection.Internet.1] #I NWAgent: fAgent.change updated as network provider: 1
CommCenter: [com.apple.CommCenter:DATA.Connection.Internet.1] #I NWAgent: fAgent.change updated user activated: 1
CommCenter: (libSystemDetermination.dylib) [com.apple.CommCenter:5wi.sd] #I Starting...
CommCenter: [com.apple.CommCenter:5wi.evt] #I Starting EventHandler...
CommCenter: [com.apple.CommCenter:acct] #I ACAccountStoreDelegate init
CommCenter: [com.apple.CommCenter:xpc.sub.mgr] #I Subscription info initialized, size: 0
CommCenter: [com.apple.CommCenter:xpc.sub.mgr] #I Labels updated with 0 elems
CommCenter: [com.apple.CommCenter:call.em.Controller] #I Sending numbers update for <private>: <private>
CommCenter: [com.apple.CommCenter:call] #I Changing fThumperCallHandoffPossible from none to false
CommCenter: [com.apple.CommCenter:sysobs] #I Sending the springboard startup event forcefully (true) or state has changed (false)
CommCenter: [com.apple.CommCenter:xpc.event] #I   --------------> kCTEventPullCallIsPossible (145) sent to 0 (of 1) clients.
CommCenter: [com.apple.CommCenter:rm] #I Starting
CommCenter: [com.apple.CommCenter:rm] #I available = true
CommCenter: [com.apple.CommCenter:rm] #I fNoBBWiFiOffInAirplaneMode true. fNoBBAirplaneMode false  fWiFiAvailable true
CommCenter: [com.apple.CommCenter:rm] #I Pretending that NoBB Radio is on. fNoBBAirplaneMode false  fWiFiAvailable true
CommCenter: [com.apple.CommCenter:evt] #I Firing event 'WiFiOffInAirplaneMode': with params= <private>
CommCenter: (libSystemDetermination.dylib) [com.apple.CommCenter:5wi.sd] #I RadioEnabled
CommCenter: [com.apple.CommCenter:evt] #I Firing event 'postponementStatusChanged': with params= <private>
CommCenter: [com.apple.CommCenter:rm] #I fNoBBWiFiOffInAirplaneMode false. fNoBBAirplaneMode false  fWiFiAvailable true
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I tethering: on entitlements update
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I updated: tethering status: context=kOne, conn=kDataConnectionWirelessModemTraffic
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I updated: tethering status: context=kOne, conn=kDataConnectionLLWirelessModemTraffic
CommCenter: [com.apple.CommCenter:ui-apn.1] #I apply: <<== APN(s)
CommCenter: [com.apple.CommCenter:DATA.Connection.Internet.1] #I updatePersistentAgentAvailability: fAgent.change NWAgent XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX61A networkProvider false->true userActivated false->true
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I (restore) fCellularDataIsEnabled changed: true ==>> true
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I initializing network policy for DATA.Connection.VVM.1
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I initializing network policy for DATA.Connection.MMS.1
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I initializing network policy for DATA.Connection.PushEmail.1
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I initializing network policy for DATA.Connection.WirelessModemTraffic.1
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I initializing network policy for DATA.Connection.WirelessModemAuthentication.1
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I initializing network policy for DATA.Connection.Provisioning.1
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I initializing network policy for DATA.Connection.AppleWirelessDiagnostics.1
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I initializing network policy for DATA.Connection.DataTest.1
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I initializing network policy for DATA.Connection.OTAActivation.1
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I initializing network policy for DATA.Connection.3GFaceTimeTraffic.1
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I initializing network policy for DATA.Connection.3GFaceTimeAuthentication.1
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I initializing network policy for DATA.Connection.OMADM.1
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I initializing network policy for DATA.Connection.OTAInternet.1
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I initializing network policy for DATA.Connection.ZeroRated.1
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I initializing network policy for DATA.Connection.EntitlementTraffic.1
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I initializing network policy for DATA.Connection.InternalDataProbe.1
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I initializing network policy for DATA.Connection.iw5.1
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I initializing network policy for DATA.Connection.Em.1
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I initializing network policy for DATA.Connection.Bootstrap.1
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I initializing network policy for DATA.Connection.UT.1
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I initializing network policy for DATA.Connection.BootstrapRoamingInternetBypass.1
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I initializing network policy for DATA.Connection.EmLoc.1
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I initializing network policy for DATA.Connection.Provisioning.1
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I initializing network policy for DATA.Connection.CarrierSpace.1
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I initializing network policy for DATA.Connection.InternetProbe.1
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I initializing network policy for DATA.Connection.iw5t.1
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I initializing network policy for DATA.Connection.LLWirelessModemTraffic.1
CommCenter: [com.apple.CommCenter:DATA.pkt:0:] #I 	Setup:/Network/Service/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX66A/Interface = <private>;
CommCenter: [com.apple.CommCenter:DATA.pkt:0:] #I 	Setup:/Network/Service/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXD32/Interface = <private>;
CommCenter: [com.apple.CommCenter:DATA.pkt:0:] #I 	Setup:/Network/Service/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXFD5/Interface = <private>;
CommCenter: [com.apple.CommCenter:DATA.pkt:0:] #I setting interface availability, pdp: 0, source: kDataDisabledButton available: 1
CommCenter: [com.apple.CommCenter:DATA.pkt:0:] #I map for pdp:0 {  (kDataEnabled:1) (kDataDisabledButton:1) }
CommCenter: [com.apple.CommCenter:DATA.pkt:0:] #I changing interface availability, pdp: 0, available: 1
CommCenter: [com.apple.CommCenter:DATA.pkt:0:] #I 	Setup:/Network/Service/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX66A/Interface = <private>;
CommCenter: [com.apple.CommCenter:DATA.pkt:0:] #I 	Setup:/Network/Service/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXD32/Interface = <private>;
CommCenter: [com.apple.CommCenter:DATA.pkt:0:] #I 	Setup:/Network/Service/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXFD5/Interface = <private>;
CommCenter: [com.apple.CommCenter:DATA.pkt:1:] #I setting interface availability, pdp: 1, source: kDataEnabled available: 1
CommCenter: [com.apple.CommCenter:DATA.pkt:1:] #I map for pdp:1 {  (kDataEnabled:1) }
CommCenter: [com.apple.CommCenter:DATA.pkt:1:] #I changing interface availability, pdp: 1, available: 1
CommCenter: [com.apple.CommCenter:DATA.iRatController] #I Session is logged in. Start iRatClient
CommCenter: [com.apple.CommCenter:DATA.iRatClient.1] #I Starting iRat Client
CommCenter: [com.apple.CommCenter:DATA.iRatController] #I with app Types <private>
CommCenter: [com.apple.CommCenter:DATA.iRatController] #I Subscribe app Types not changed
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I handleAPNSettingsChange_sync: (1) refreshapn: reason = kDataSystemInitialized, bb=true, tech=true
CommCenter: [com.apple.CommCenter:DATA.Connection.Internet.1] #I checkActivateConnection: change = false activate = false state = kDataConnectionStateIdle fIsActivatingAccrossSimSwap = 0
CommCenter: [com.apple.CommCenter:DATA.Connection.VVM.1] #I checkActivateConnection: change = false activate = false state = kDataConnectionStateIdle fIsActivatingAccrossSimSwap = 0
CommCenter: [com.apple.CommCenter:DATA.Connection.MMS.1] #I checkActivateConnection: change = false activate = false state = kDataConnectionStateIdle fIsActivatingAccrossSimSwap = 0
CommCenter: [com.apple.CommCenter:DATA.Connection.PushEmail.1] #I checkActivateConnection: change = false activate = false state = kDataConnectionStateIdle fIsActivatingAccrossSimSwap = 0
CommCenter: [com.apple.CommCenter:DATA.Connection.WirelessModemTraffic.1] #I checkActivateConnection: change = false activate = false state = kDataConnectionStateIdle fIsActivatingAccrossSimSwap = 0
CommCenter: [com.apple.CommCenter:DATA.Connection.WirelessModemAuthentication.1] #I checkActivateConnection: change = false activate = false state = kDataConnectionStateIdle fIsActivatingAccrossSimSwap = 0
CommCenter: [com.apple.CommCenter:DATA.Connection.Provisioning.1] #I checkActivateConnection: change = false activate = false state = kDataConnectionStateIdle fIsActivatingAccrossSimSwap = 0
CommCenter: [com.apple.CommCenter:DATA.Connection.AppleWirelessDiagnostics.1] #I checkActivateConnection: change = false activate = false state = kDataConnectionStateIdle fIsActivatingAccrossSimSwap = 0
CommCenter: [com.apple.CommCenter:DATA.Connection.DataTest.1] #I checkActivateConnection: change = false activate = false state = kDataConnectionStateIdle fIsActivatingAccrossSimSwap = 0
CommCenter: [com.apple.CommCenter:DATA.Connection.OTAActivation.1] #I checkActivateConnection: change = false activate = false state = kDataConnectionStateIdle fIsActivatingAccrossSimSwap = 0
CommCenter: [com.apple.CommCenter:DATA.Connection.3GFaceTimeTraffic.1] #I checkActivateConnection: change = false activate = false state = kDataConnectionStateIdle fIsActivatingAccrossSimSwap = 0
CommCenter: [com.apple.CommCenter:DATA.Connection.3GFaceTimeAuthentication.1] #I checkActivateConnection: change = false activate = false state = kDataConnectionStateIdle fIsActivatingAccrossSimSwap = 0
CommCenter: [com.apple.CommCenter:DATA.Connection.OMADM.1] #I checkActivateConnection: change = false activate = false state = kDataConnectionStateIdle fIsActivatingAccrossSimSwap = 0
CommCenter: [com.apple.CommCenter:DATA.Connection.OTAInternet.1] #I checkActivateConnection: change = false activate = false state = kDataConnectionStateIdle fIsActivatingAccrossSimSwap = 0
CommCenter: [com.apple.CommCenter:DATA.Connection.ZeroRated.1] #I checkActivateConnection: change = false activate = false state = kDataConnectionStateIdle fIsActivatingAccrossSimSwap = 0
CommCenter: [com.apple.CommCenter:DATA.Connection.EntitlementTraffic.1] #I checkActivateConnection: change = false activate = false state = kDataConnectionStateIdle fIsActivatingAccrossSimSwap = 0
CommCenter: [com.apple.CommCenter:DATA.Connection.InternalDataProbe.1] #I checkActivateConnection: change = false activate = false state = kDataConnectionStateIdle fIsActivatingAccrossSimSwap = 0
CommCenter: [com.apple.CommCenter:DATA.Connection.iw5.1] #I checkActivateConnection: change = false activate = false state = kDataConnectionStateIdle fIsActivatingAccrossSimSwap = 0
CommCenter: [com.apple.CommCenter:DATA.Connection.Em.1] #I checkActivateConnection: change = false activate = false state = kDataConnectionStateIdle fIsActivatingAccrossSimSwap = 0
CommCenter: [com.apple.CommCenter:DATA.Connection.Bootstrap.1] #I checkActivateConnection: change = false activate = false state = kDataConnectionStateIdle fIsActivatingAccrossSimSwap = 0
CommCenter: [com.apple.CommCenter:DATA.Connection.Bootstrap.1] #I checkActivateConnection: change = false activate = false state = kDataConnectionStateIdle fIsActivatingAccrossSimSwap = 0
CommCenter: [com.apple.CommCenter:DATA.Connection.UT.1] #I checkActivateConnection: change = false activate = false state = kDataConnectionStateIdle fIsActivatingAccrossSimSwap = 0
CommCenter: [com.apple.CommCenter:DATA.Connection.BootstrapRoamingInternetBypass.1] #I checkActivateConnection: change = false activate = false state = kDataConnectionStateIdle fIsActivatingAccrossSimSwap = 0
CommCenter: [com.apple.CommCenter:DATA.Connection.EmLoc.1] #I checkActivateConnection: change = false activate = false state = kDataConnectionStateIdle fIsActivatingAccrossSimSwap = 0
CommCenter: [com.apple.CommCenter:DATA.Connection.Provisioning.1] #I checkActivateConnection: change = false activate = false state = kDataConnectionStateIdle fIsActivatingAccrossSimSwap = 0
CommCenter: [com.apple.CommCenter:DATA.Connection.CarrierSpace.1] #I checkActivateConnection: change = false activate = false state = kDataConnectionStateIdle fIsActivatingAccrossSimSwap = 0
CommCenter: [com.apple.CommCenter:DATA.Connection.InternetProbe.1] #I checkActivateConnection: change = false activate = false state = kDataConnectionStateIdle fIsActivatingAccrossSimSwap = 0
CommCenter: [com.apple.CommCenter:DATA.Connection.iw5t.1] #I checkActivateConnection: change = false activate = false state = kDataConnectionStateIdle fIsActivatingAccrossSimSwap = 0
CommCenter: [com.apple.CommCenter:DATA.Connection.LLWirelessModemTraffic.1] #I checkActivateConnection: change = false activate = false state = kDataConnectionStateIdle fIsActivatingAccrossSimSwap = 0
CommCenter: (IDS) [com.apple.IDS:_IDSService] Client setup service -- checked in {service: com.apple.private.alloy.thumper.keys}
CommCenter: [com.apple.CommCenter:DATA.tech.drv.1] #I updateCurrentImsPrefOnAllConnections: 3
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I Internal event start: ==>>
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I      internal event: If(kDataNotSupported{Default in canActivateWithoutOverrides })
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I Internal event start (any sim): ==>>
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I      Internal event (any sim): new value = kDataNotSupported(Default in canActivateWithoutOverrides)
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I      internal event: If(kDataNotSupported{Default in canActivateWithoutOverrides })
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I <<== Internal event end (any sim): due to <private>
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I      internal event: Vf(kDataNotSupported{Default in canActivateWithoutOverrides })
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I      internal event: Mf(kDataNotSupported{Default in canActivateWithoutOverrides })
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I      internal event: Ef(kDataNotSupported{Default in canActivateWithoutOverrides })
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I      internal event: Wf(kDataNotSupported{Default in canActivateWithoutOverrides })
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I      internal event: wf(kDataNotSupported{Default in canActivateWithoutOverrides })
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I      internal event: Pf(kDataNotSupported{Default in canActivateWithoutOverrides })
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I      internal event: Df(kDataNotSupported{Default in canActivateWithoutOverrides })
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I      internal event: Tf(kDataNotSupported{Default in canActivateWithoutOverrides })
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I      internal event: Of(kDataNotSupported{Default in canActivateWithoutOverrides })
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I      internal event: Ff(kDataNotSupported{Default in canActivateWithoutOverrides })
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I      internal event: ff(kDataNotSupported{Default in canActivateWithoutOverrides })
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I      internal event: mf(kDataNotSupported{Default in canActivateWithoutOverrides })
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I      internal event: of(kDataNotSupported{Default in canActivateWithoutOverrides })
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I      internal event: Zf(kDataNotSupported{Default in canActivateWithoutOverrides })
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I      internal event: $f(kDataNotSupported{Default in canActivateWithoutOverrides })
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I      internal event: if(kDataNotSupported{Default in canActivateWithoutOverrides })
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I      internal event: Sf(kDataNotSupported{Default in canActivateWithoutOverrides })
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I      internal event: 9f(kDataNotSupported{Default in canActivateWithoutOverrides })
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I      internal event: Bf(kDataNotSupported{Default in canActivateWithoutOverrides })
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I      internal event: Uf(kDataNotSupported{Default in canActivateWithoutOverrides })
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I      internal event: bf(kDataNotSupported{Default in canActivateWithoutOverrides })
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I      internal event: Lf(kDataNotSupported{Default in canActivateWithoutOverrides })
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I      internal event: 0f(kDataNotSupported{Default in canActivateWithoutOverrides })
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I      internal event: Cf(kDataNotSupported{Default in canActivateWithoutOverrides })
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I      internal event: pf(kDataNotSupported{Default in canActivateWithoutOverrides })
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I      internal event: tf(kDataNotSupported{Default in canActivateWithoutOverrides })
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I      internal event: lf(kDataNotSupported{Default in canActivateWithoutOverrides })
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I      internal event: 1f(kDataNotSupported{Default new availability })
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I      internal event: 2f(kDataNotSupported{Default new availability })
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I      internal event: 3f(kDataNotSupported{Default new availability })
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I      internal event: 4f(kDataNotSupported{Default new availability })
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I      internal event: 5f(kDataNotSupported{Default new availability })
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I      internal event: 6f(kDataNotSupported{Default new availability })
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I      internal event: 7f(kDataNotSupported{Default new availability })
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I      internal event: 8f(kDataNotSupported{Default new availability })
CommCenter: (IDS) [com.apple.IDS:_IDSService] _IDSService - initing {self: 0x142136760, service: com.apple.private.alloy.thumper.keys, commands: (null), manualAck: NO}
CommCenter: [com.apple.CommCenter:DATA.ServiceController] #I recalculateConnectionAvailabilityProcessQueue_sync: sending CT event due to <private> (forceSend true, errorChanged true, availabilityChanged true)
CommCenter: [com.apple.CommCenter:DATA.tech.drv.1] #I updateCurrentImsPrefOnAllConnections: 3
CommCenter: (IDS) [com.apple.IDS:_IDSService] Client setup service -- checked in {service: com.apple.private.alloy.thumper.keys}
secd: [com.apple.securityd:keychainitemupgrade] kicking off keychain item upgrade
-->


In the following example, an unknown agent 'NWAgent', activates and appears to update the network provider. 
In the WiFi settings, there are a number of available networks which do not match with the actual networks within proximity to our location. Concerningly, these networks are shown as full strength. A log from 'airportd: (CoreWiFi) [com.apple.WiFiManager:] [corewifi]' shows that some of those unknown WiFi networks created by the attackers share the same string number as the ones created by us. There is a long list of 'auto-join' and 'spairport_supported_channels' that do not belong to anyone within the vicinity. 

The presence of the additional full-strength networks suggests the attackers have either: 
- modified the router settings to add additional network names
- modified one or more of our mobile phones to be used as a hotspot or internet connection
- a mobile WiFi device has been placed either within or externally at our location.

The file 'Net-plist.txt' has a list of all the daemons and processes who access the internet. Our 'spairport' network and wireless country codes are set to the US. We are not in the US. The 'spairport' has the locale set to 'ETSI'. There is also a string for '/private/var/run/.sim_diagnosticd_socket' and 'AppleTalk'.

IO80211Family, often doing suspicious tasks, is somehow able to get the kernel to set a new MAC address using a command 'setSelfMacAddr'.

<--
kernel: (IO80211Family) [WiFiTimeSync]: postMessage APPLE80211_M_MAC_ADDRESS_CHANGED, got new MAC 0xXX XX XX XX XX 1a, calling super::setSelfMacAddr()
-->


Excerpts from the data file for wifiFirmwareLoader.
<--
com.apple.wifiFirmwareLoader

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN' "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>com.apple.corecapture.manager-access</key>
	<true/>
	<key>com.apple.developer.driverkit.userclient-access</key>
	<array> 
		<string>com.apple.DriverKit-AppleBCMWLAN</string>
	</array>
	<key>com.apple.keystore.sik.access</key>
	<true/>
	<key>com.apple.private.ZhuGeSupport.CopyValue</key> 
	<true/>
	<key>com.apple.wlan.authentication</key> 
	<true/>
	<key>com.apple.wlan.userclient</key> 
	<true/>
</dict>
</plist>

sdb.writePlatformConfigPlatformConfig
wlan.11d.power.constraint.ignored
wlan.adaptiveroaming.enabled
wlan.dsa.power.boostwlan.tx
wlan.autocountry.enabled
wlan.enhancedlocale.enabled
wlan.bss.5GHZpreferencewlan.sdb.profile
wlan.fast_enterprise_nw.enabled
wlan.voice_enterprise_nw.enabled
wlan.chip.power.dutycyclewlan.lowlatency.enable
wlan.wnm.enabled
wlan.awdl.params
wlan.dfrtsbcom.oscar.profilestates
wlan.tethering.enabled
wlan.mimo_ps.enabled
wlan.listen.interval
wlan.vo.blockack
wlan.llw.tx.ring.size
wlan.tx.ring.size
wlan.rx.ring.size
wlan.tx.submission-queue.size
wlan.dfsproxy.enabled
wlan.tx-power-cap-ctrl
wlan.psbw.enabled
wlan.gpio-tx-envelope-ind
wlan.chip.power.dutycycle
wlan.lowlatency.enable
wlan.11d.power.constraint.ignored
wlan.adaptiveroaming.enabled
wlan.dsa.power.boost
wlan.txsdb.mode
wlan.ant-inefficiency-mitigation.enabled
wlan.enterprise.params
wlan.lpas-allowed
wlan.aoac-allowed
wlan.continuous.cpms.power
wlan.txchain.mode
wlan.6GHz.supported
wlan.bss.6GHz-preference
wifi-calibration-fdr
wlan.skywalk.packetpoolsize
bcom.roam.enterprise
bcom.wow.magic-packet
bcom.roam.enabledenhanced
bcom.btc.paramsb
bcom.roam.profiles
bcom.ps.realtimewlan.ocl.enabled
bcom.ps.defaultwlan.
enhancedTrgDisc
bcom.roam.default

Kicking corecaptured to start


com.apple.WiFiFirmwareLoaderDriverKitDriverWe are using driverkit driver
Property read for % returned NULL
IOUserClassWe are using IOKit driver
Matched class name '%s', starting ... 
msf cal file is too big or too small 
failed to alloc memory for msf cal 
copy MSF CAL failed
failed to create MSF Data Ref
WiFiMSFCalPlatformConfigFileNameno PlatformConfigFileName in ioreg
PlatformConfigFileName is not CFstring!
/System/Library/DriverExtensions/com.apple.DriverKit-AppleBCMWLAN.dext/PlatformConfig/iOS//usr/share/firmware/wifi/config
full name % size %zu
Platform config file is too big or too small config full name %s
fail to create CFStringRef for file w path 
fail to create fileURL 
fail to create fileStream 
fail to open fileStream
Setting property list errorCode:%d, status:%u
fail to create property list
Propery list is not CFDictionary! 
fail to allocate memory for keys %5ld: %s allow: %d 
key not in allowList
wlan.is.fdr.cal% isFdrCal %d
writePlatformConfigPlatformConfigwlan.autocountry.enabledbcom.roam.e enhancedTrgDiscbcom.roam.defaultwlan.enhancedlocale.enabledwlan.bss. preferencewlan.sdb.profilewlan.fast_enterprise_nw.enabledwlan.voice_ profilestatesbcom.bc.paramsbcom.roam.profileswlan.tethering.enabled packetwlan.listen.intervalwlan.vo.blockackwlan.llw.tx.ring.sizewlan. queue.sizewlan.dfsproxy.enabledwlan.tx-power-cap-ctrlwlan.psbw.enabl indwlan.chip.power.dutycyclewlan.lowlatency.enablewlan.11d.power.con modewlan.ant-inefficiency-mitigation.enabledwlan.enterprise.paramswl allowedwlan.continuous.cpms.powerwlan.txchain.modewlan.6GHz.supporte fdrwlan.skywalk.packetpoolsize redacted % dataClass %s addWiFiCalibrationFDR% successful fdr %s add wcal
% failed dict get value %s failed fdr wcal
addWiFiCalibrationFDR%s successful fdr %s add wcal
% failed dict get value 
% failed fdr wcal
wifi-fw-pathFirmwareResolved to Firmware file path: "%s" 
wifi-signature-pathResolved to signature file path: "%s" 
 wifi-nvram-pathNVRAMResolved to NVRAM file path: "%s"
Deprecated feature
RegulatoryResolved to Regulatory file path: "%s"
TxCapResolved to TxCap file path: "%s"
Sandboxing init issue, couldn't find profile in default paths, attempting default compiled profile
wifiFirmwareLoader sandbox_init: "%s" 
wifiFirmwareLoader failed to run, check profile
Sandboxing init issue failed, wifiFirmwareLoader failed to run, check profile
wifiFirmwareLoader sandbox_init: Success 
Sandboxing init issue resolved: "Success"
com.apple.wififirmwareloaderdaemonwififirmwareloader/private/var/log/wifiFirmwareLoader.log
com.apple.wifiFirmwareLoader/Library/Preferences/
SystemConfiguration/com.apple.wifiFirmwareLoader.plistLoggingEnabled fF:N:C:S:rR:T:MmP:mfg



_AMFDRSealingMapCopyLocalDictForClass_CFAbsoluteTimeGetCurrent_CFArrayGetCount_CFArrayGetValueAtIndex_ CFBooleanGetTypeID_CFBooleanGetValue_CFDataCreateWithBytesNoCopy_ CFDataGetTypeID_CFDictionaryGetCount_CFDictionaryGetKeysAndValues_ CFDictionaryGetTypeID_CFDictionaryGetValue_CFDictionarySetValue_CFEqual_CFGetTypeID_CFNumberGetTypeID_CFNumberGetValue_ CFPropertyListCreateWithStream_CFReadStreamClose_CFReadStreamCreateWithFile_CFReadStreamOpen_CFRelease_CFRunLoopAddSource_CFRUnLoopAddTimer_CFRunLoopGetCurrent_CFRunLoopPerformBlock_CFRunLoopRemoveSource_CFRunLoopRemoveTimer_CFRunLoopRunInMode_CFRunLoopStop_CFRunLoopTimerCreate_CFStringAppend_CFStringCompare_CFStringCreateFromExternalRepresentation_CFStringCreateMutableCopy_CFStringCreateWithCString_CFStringCreateWithFormat_CFStringGetCStringPtr_CFStringGetIntValue_CFStringGetTypeID_CFURLCreateWithFileSystemPath_CoreCaptureControlCreate_CoreCaptureControlStart_IOConnectCallMethod_IOConnectCallScalarMethod_IOConnectMapMemory_IOIteratorNext_IONotificationPortCreate_IONotificationPortDestroy_IONotificationPortGetRunLoopSource_IOObjectCopyClass_IOObjectRelease_IORegistryEntryCreateCFProperty_IORegistryEntrySetCFProperty_IOServiceAddMatchingNotification_IOServiceClose_IOServiceNameMatching_IOServiceOpen_SCPreferencesCreate_SCPreferencesGetValue_CFRuntimeCreateInstance_CFRuntimeRegisterClass__NSConcreteStackBlock___bzero___error___stack _chk_fall___stack_chk_guard___stderrp___stdoutp___strlcat_chK___strlepy_chk__os_log_default__os_log_error_impl__os_log_impl_close_dprintf_exit_fprintf_free_fwrite_getopt_KCFALlocatorDefault_KCFAllocatorNull_KCFBooleanTrue_kCFRunLoopDefaultMode_kIOMainPortDefault_localtime_lstat$INODE64_mach_continuous_time_mach_task_self__mach_timebase_info_malloc_memcpy_open_optarg_os_log_create_os_log_type_enabled_os_transaction_create_pthread_create_pthread_once_puts_read_realpath$DARWIN_EXTSN_sandbox_free_error_sandbox_init_signal_strcasestr_strcmp_strerror_strftime_strncmp_time vsnprintf_xpc_set_event_stream_handler_NSConcreteGlobalBlock_CFConstantStringClassReference_mh_execute_header

ACDEFGHIJKLMNOPORSTUVWXYZ[\]^_'bcdefghijklmnopqrstuv__mh_execute_ header_AMFDRSealingMapCopyLocalDictForClass_CFAbsoluteTimeGetCurrent_CFArrayGetCount_CFArrayGetValueAtIndex_CFBooleanGetTypeID_CFBooleanGetValue_CFDataCreateWithBytesNoCopy_CFDataGetTypeID_CFDictionaryGetCount_CFDictionaryGetKeysAndValues_CFDictionaryGetTypeID_CFDictionaryGetValue_CFDictionarySetValue_CFEqual_CFGetTypeID_CFNumberGetTypeID_CFNumberGetValue_CFPropertyListCreateWithStream_CFReadStreamClose_CFReadStreamCreateWithFile_CFReadStreamOpen_CFRelease_CFRUnLoopAddSource_CFRunLoopAddTimer_CFRunLoopGetCurrent_CFRunLoopPerformBlock_CFRunLoopRemoveSource_CFRunLoopRemoveTimer_ CFRunLoopRunInMode_CFRunLoopStop_CFRUnLoopTimerCreate_CFStringAppend_CFStringCompare_CFStringCreateFromExternalRepresentation_CFStringCreateMutableCopy_CFStringCreateWithCString_CFStringCreateWithFormat_CFStringGetCStringPtr_CFStringGetIntValue_CFStringGetTypeID_CFURLCreateWithFileSystemPath_CoreCaptureControlCreate_CoreCaptureControlStart_IOConnectCallMethod_IOConnectCallScalarMethod_IOConnectMapMemory_IOIteratorNext_IONotificationPortCreate_IONotificationPortDestroy_IONotificationPortGetRUnLoopSource_IOObjectCopyClass_IOObjectRelease_IORegistryEntryCreateCFProperty_IORegistryEntrySetCFProperty_IOServiceAddMatchingNotification_IOServiceClose_IOServiceNameMatching_IOServiceOpen_SCPreferencesCreate_SCPreferencesGetValue_CFRuntimeCreateInstance_CFRuntimeRegisterClass__NSConcreteGlobalBlock__NSConcreteStackBlock__CFConstantStringClassReference___bzero_ _error___stack_chk_fail___stack_chk_guard___stderrp___stdoutp__ _strlcat_chk_ _strlcpy_chk__OS_log_default__os_log_error_impl_ _os_log_impl_close_dprintf_exit_fprintf_free_fwrite_getop_kCFAllocatorDefault_kCFAllocatorNull_KCFBooleanTrue_KCFRunLoopDefaultMode_kIOMainPortDefault_localtime_stat$INODE64_mach_continuous_time_mach_task_self__mach_timebase_info_malloc_memcpy_objc_msgSend_open_optarg_os_log_create_os_log_type_enabled_os_transaction_create_pthread_create_pthread_once_puts_read_realpath$DARWIN_EXTSN_sandbox_free_error_sandbox_init_signal_strcasestr_stremp_strerror_strftime_strncmp_time_vsnprintf_xpc_set_event_stream_handler

WiFiUserClientGetMemoryDescriptorForTvse return % for type %
RequestedFilesFileExtensionsRequestedFilesOverrideWiFiUserClientWiFiUserClient@%p%s:path['%'],resolved['%']
-->

<--
UserEventAgent: (CoreAccessories) [com.apple.accessories.frameworks.core-accessories:Transport Client] Register AvailabilityChangedHandler (0, com.apple.accessories.externalaccessory-server.availability-changed)
UserEventAgent: (CoreAccessories) [com.apple.accessories.frameworks.core-accessories:Transport Client] _SetupAvailabilityChangedHandlerForServiceEntry (0)
UserEventAgent: (CoreAccessories) [com.apple.accessories.frameworks.core-accessories:Transport Client] _SetupAvailabilityChangedHandlerForServiceEntry (0, com.apple.accessories.externalaccessory-server.availability-changed)
UserEventAgent: (CoreAccessories) [com.apple.accessories.frameworks.core-accessories:External Accessory] self.remoteObject = (null)
UserEventAgent: (CoreAccessories) [com.apple.accessories.frameworks.core-accessories:External Accessory] Getting remote object...
UserEventAgent: (IAP) IAPAppConnectedAccessories: __eaClientHasCheckedForConnectedAccessories 0 -> 1
UserEventAgent: (IAP) IAPAppConnectedAccessories: IAPDHasLaunched 0, IAP2DHasLaunched 0
UserEventAgent: (ExternalAccessory) On: 1052 RegisteredForLocalNotifications Count: 1
UserEventAgent: [com.apple.UserEventAgent:Daemon] Initializer for /System/Library/UserEventPlugins/com.apple.ExternalAccessory.matching.plugin finished (took 0.005942 seconds)
UserEventAgent: Successfully activated the xpc_provider with name: <private>
kernel: (corecapture) 000009.620181 wlan0.A[76] [ik] publishHWIdentifiers@5535:Platform set to "module-instance=atlantisb"
kernel: (corecapture) 000009.620190 wlan0.A[77] [ik] publishHWIdentifiers@5550: "s" = "B1"
kernel: (corecapture) 000009.620194 wlan0.A[78] [ik] publishHWIdentifiers@5550: "M" = "RASP"
kernel: (corecapture) 000009.620197 wlan0.A[79] [ik] publishHWIdentifiers@5550: "m" = "6.5"
kernel: (corecapture) 000009.620200 wlan0.A[80] [ik] publishHWIdentifiers@5550: "V" = "u"
kernel: (corecapture) 000009.620203 wlan0.A[81] [ik] publishHWIdentifiers@5550: "P" = "atlantisb"
kernel: (corecapture) 000009.620260 wlan0.A[82] [ik] attachPCIeBusGated@3915: Published 'WiFiCapability': [awdl:1, ranging:1]
-->

<--
wifiFirmwareLoader: 000009.458155 getSizeFromFile: path['/usr/share/firmware/wifi/atlantisb-PlatformConfig.plist'], resolved['/usr/share/firmware/wifi/atlantisb-PlatformConfig.plist']
wifiFirmwareLoader: 000009.458451 Get size of "/usr/share/firmware/wifi/atlantisb-PlatformConfig.plist", size = 2647 bytes
wifiFirmwareLoader: 000009.458453 config full name /usr/share/firmware/wifi/atlantisb-PlatformConfig.plist size 2647
wifiFirmwareLoader: 000009.458454 config full name /usr/share/firmware/wifi/atlantisb-PlatformConfig.plist
wifiFirmwareLoader: 000009.458852 Setting property list  errorCode:0, status:1
wifiFirmwareLoader: 000009.458856     0: wlan.llw.tx.ring.size allow: 1
wifiFirmwareLoader: 000009.458857     1: bcom.roam.enabledenhanced allow: 1
wifiFirmwareLoader: 000009.458858     2: wlan.autocountry.enabled allow: 1
wifiFirmwareLoader: 000009.458858     3: bcom.ps.realtime allow: 1
wifiFirmwareLoader: 000009.458859     4: wlan.dfsproxy.enabled allow: 1
wifiFirmwareLoader: 000009.458860     5: wlan.ocl.enabled allow: 1
wifiFirmwareLoader: 000009.458860     6: wlan.enhancedTrgDisc allow: 1
wifiFirmwareLoader: 000009.458861     7: wlan.rx.ring.size allow: 1
wifiFirmwareLoader: 000009.458862     8: bcom.roam.default allow: 1
wifiFirmwareLoader: 000009.458862     9: wlan.enhancedlocale.enabled allow: 1
wifiFirmwareLoader: 000009.458863    10: bcom.ps.default allow: 1
wifiFirmwareLoader: 000009.458864    11: wlan.aoac-allowed allow: 1
wifiFirmwareLoader: 000009.458865    12: wlan.bss.5GHz-preference allow: 1
wifiFirmwareLoader: 000009.458865    13: wlan.sdb.profile allow: 1
wifiFirmwareLoader: 000009.458866    14: wlan.vo.blockack allow: 1
wifiFirmwareLoader: 000009.458866    15: wlan.tx.submission-queue.size allow: 1
wifiFirmwareLoader: 000009.458867    16: wlan.fast_enterprise_nw.enabled allow: 1
wifiFirmwareLoader: 000009.458868    17: wlan.awdl.params allow: 1
wifiFirmwareLoader: 000009.458868    18: wlan.wnm.enabled allow: 1
wifiFirmwareLoader: 000009.458869    19: wlan.tx.ring.size allow: 1
wifiFirmwareLoader: 000009.458870    20: wlan.dfrts allow: 1
wifiFirmwareLoader: 000009.458870    21: wlan.enterprise.params allow: 1
wifiFirmwareLoader: 000009.458871    22: wlan.lpas-allowed allow: 1
wifiFirmwareLoader: 000009.458872    23: bcom.btc.params allow: 1
wifiFirmwareLoader: 000009.458873    24: bcom.roam.profiles allow: 1
wifiFirmwareLoader: 000009.458876    25: wlan.tethering.enabled allow: 1
wifiFirmwareLoader: 000009.458877    26: wlan.mimo_ps.enabled allow: 1
wifiFirmwareLoader: 000009.458878    27: wlan.listen.interval allow: 1
wifiFirmwareLoader: 000009.458879    28: bcom.roam.enterprise allow: 1
wifiFirmwareLoader: 000009.458879    29: wlan.voice_enterprise_nw.enabled allow: 1
wifiFirmwareLoader: 000009.458880    30: bcom.wow.magic-packet allow: 1
wifiFirmwareLoader: 000009.458881 writePlatformConfig isFdrCal 0
kernel: (corecapture) 000009.459096 wlan0.A[35] [ik] newUserClient@4687: wifiFirmwareLoader UserClient, starting
kernel: (corecapture) 000009.459103 wlan0.A[36] [ik] newUserClient@4700: wifiFirmwareLoader now[000009.459103], notification@[000005.859617], diff[000003.599485]
wifiFirmwareLoader: 000009.460685 getSizeFromFile: path['/usr/share/firmware/wifi/C-4378__s-B1/atlantisb.trx'], resolved['/usr/share/firmware/wifi/C-4378__s-B1/honshu.trx']
wifiFirmwareLoader: 000009.461482 Get size of "/usr/share/firmware/wifi/C-4378__s-B1/honshu.trx", size = 1377019 bytes
wifiFirmwareLoader: 000009.461485 full path firmwareName is /usr/share/firmware/wifi/C-4378__s-B1/atlantisb.trx
wifiFirmwareLoader: 000009.461540 getSizeFromFile: path['/usr/share/firmware/wifi/C-4378__s-B1/atlantisb.trx'], resolved['/usr/share/firmware/wifi/C-4378__s-B1/honshu.trx']
wifiFirmwareLoader: 000009.461579 Get size of "/usr/share/firmware/wifi/C-4378__s-B1/honshu.trx", size = 1377019 bytes
0x713      Info        0x0                  119    0    apsd: (libsandbox.1.dylib) sandbox compile: <private>
kernelmanagerd: setting up RealBridgeClient
wifiFirmwareLoader: 000009.462142 getSizeFromFile: path['/usr/share/firmware/wifi/C-4378__s-B1/P-atlantisb-X3_M-RASP_V-u__m-6.5.txt'], resolved['/usr/share/firmware/wifi/C-4378__s-B1/P-atlantisb_M-RASP_V-u__m-6.5.txt']
wifiFirmwareLoader: 000009.462290 Get size of "/usr/share/firmware/wifi/C-4378__s-B1/P-atlantisb_M-RASP_V-u__m-6.5.txt", size = 7723 bytes
wifiFirmwareLoader: 000009.462294 full path NVRAM is /usr/share/firmware/wifi/C-4378__s-B1/P-atlantisb-X3_M-RASP_V-u__m-6.5.txt
wifiFirmwareLoader: 000009.462352 getSizeFromFile: path['/usr/share/firmware/wifi/C-4378__s-B1/P-atlantisb-X3_M-RASP_V-u__m-6.5.txt'], resolved['/usr/share/firmware/wifi/C-4378__s-B1/P-atlantisb_M-RASP_V-u__m-6.5.txt']
wifiFirmwareLoader: 000009.462406 Get size of "/usr/share/firmware/wifi/C-4378__s-B1/P-atlantisb_M-RASP_V-u__m-6.5.txt", size = 7723 bytes
wifiFirmwareLoader: 000009.462600 getSizeFromFile: path['/usr/share/firmware/wifi/C-4378__s-B1/atlantisb-X3.clmb'], resolved['/usr/share/firmware/wifi/C-4378__s-B1/atlantisb.clmb']
wifiFirmwareLoader: 000009.462719 Get size of "/usr/share/firmware/wifi/C-4378__s-B1/atlantisb.clmb", size = 33493 bytes
wifiFirmwareLoader: 000009.462722 full path Regulatory is /usr/share/firmware/wifi/C-4378__s-B1/atlantisb-X3.clmb
wifiFirmwareLoader: 000009.462749 getSizeFromFile: path['/usr/share/firmware/wifi/C-4378__s-B1/atlantisb-X3.clmb'], resolved['/usr/share/firmware/wifi/C-4378__s-B1/atlantisb.clmb']
wifiFirmwareLoader: 000009.462765 Get size of "/usr/share/firmware/wifi/C-4378__s-B1/atlantisb.clmb", size = 33493 bytes
wifiFirmwareLoader: 000009.462843 getSizeFromFile: path['/usr/share/firmware/wifi/C-4378__s-B1/atlantisb-X3.txcb'], resolved['/usr/share/firmware/wifi/C-4378__s-B1/atlantisb.txcb']
wifiFirmwareLoader: 000009.462977 Get size of "/usr/share/firmware/wifi/C-4378__s-B1/atlantisb.txcb", size = 304 bytes
wifiFirmwareLoader: 000009.462980 full path TxCap is /usr/share/firmware/wifi/C-4378__s-B1/atlantisb-X3.txcb
wifiFirmwareLoader: 000009.463009 getSizeFromFile: path['/usr/share/firmware/wifi/C-4378__s-B1/atlantisb-X3.txcb'], resolved['/usr/share/firmware/wifi/C-4378__s-B1/atlantisb.txcb']
wifiFirmwareLoader: 000009.463041 Get size of "/usr/share/firmware/wifi/C-4378__s-B1/atlantisb.txcb", size = 304 bytes
kernel: (corecapture) 000009.463052 wlan0.A[37] [ik] isLimitedAggregationSupported@3038:isLimitedAggregationSupported: No
kernel: (corecapture) 000009.463060 wlan0.A[38] [ik] removeWpsHashMap@1099:Total deleted extra nodes: 0
kernel: (corecapture) 000009.463063 wlan0.A[39] [ik] buildWPSRollingHash@1075:buildWPSRollingHash: Could not build WPS information hash map
kernel: (corecapture) 000009.463112 wlan0.A[40] [ik] gatherParameterData@1429:Using default power to duty cycle table.
kernel: (corecapture) 000009.463160 wlan0.A[41] [ik] gatherKvrParameterData@1771:EnterpriseEnhancementParams: enhancedDisAssociationInfo:1 beaconReporting:1 osVersionReporting:1!
kernel: (corecapture) 000009.463302 wlan0.A[42] [ik] populatePlatformProperties@2086:WiFiRoam : 6GHz support defaults to disable for platform, 0
kernelmanagerd: Disabling kext auditing: We are on Apple Silicon
kernel: (corecapture) 000009.463341 wlan0.A[43] flags 0 fullRoamScanPeriod 0 partialRoamScanPeriod 0 roamResetRSSIDelta 0 fullRoamScanCount 0 txFailTrigger 0 2.4GHz=[rssiTrigger 0 rssiQualDelta 0] 5GHz=[rssiTrigger 0 rssiQualDelta 0]
kernel: (corecapture) 000009.463345 wlan0.A[44] 2.4GHz Roam profile[0]: RSSI:[-10,-75], Flag:0xc, ScanParams:(X,XXXX,XXX,X,1200), Candidate:(20,-65,50)
kernel: (corecapture) 000009.463348 wlan0.A[45] 2.4GHz Roam profile[0]: RSSI:[-75,-128], Flag:0x10, ScanParams:(X,XX,XX,X,30), Candidate:(12,-65,50)
kernel: (corecapture) 000009.463351 wlan0.A[46] 5GHz Roam profile[0]: RSSI:[-75,-128], Flag:0x10, ScanParams:(X,XX,XX,X,30), Candidate:(12,-128,10)
kernel: (corecapture) 000009.463395 wlan0.A[47] [ik] initWithDriver@1004:Setting AVC advisory notification periodicity to 300
kernel: (corecapture) 000009.463405 wlan0.A[48] [ik] initWithDriver@158:Override Adaptive Roaming support: 1
kernel: (corecapture) 000009.463408 wlan0.A[49] [ik] allocateSkywalkBusResource@19844:Skywalk resources txLlwQueueSize 1536 txQueueSize 768 rxQueueSize 2048 skywalkPacketPoolSize 8448
sandboxd: [com.apple.sandbox:sandcastle] get_home_directories: called
kernel: (corecapture) 000009.464496 wlan0.A[50] [ik] getProvisionedData@306:WiFi MAC Address: XX:XX:XX:XX:XX:1a, HW[ 00:00:00:00:00:00 ]
kernel: (corecapture) 000009.464501 wlan0.A[51] [ik] skywalkInfraInit@52834:WiFi MAC Address: XX:XX:XX:XX:XX:1a, HW<[ 00:00:00:00:00:00 ], HW>[ XX:XX:XX:XX:XX:1a ]
kernel: (AppleBCMWLANCore) AppleBCMWLANSkywalkInterface::init start
kernel: (IO80211Family) IO80211SkywalkInterface::init start
kernel: (IO80211Family) IO80211SkywalkInterface::initIvars complete
kernel: (AppleBCMWLANCore) Interface Init complete
kernel: (corecapture) 000009.464536 wlan0.A[52] [ik] createSkywalkInterface@52928:Creating skywalk interface 0 id:0 role:1, sif 0x************ab6
-->


There is a file titled 'P-atlantisb_M-RASP_V-u__m-6.5.txt' in a folder titled 'C-4378__s-B1' which is used in relation to WiFi. There are also a number of country titled platform configuration plists as well as a corrosponding .clmb, .trx and .txcb file for each country.

<-- Snippet of the country files.
capri-PlatformConfig.plist
corsica-PlatformConfig.plist
ekans-PlatformConfig.plist
fiji-PlatformConfig.plist
formosa-PlatformConfig.plist
hanauma-PlatformConfig.plist
hawaii-PlatformConfig.plist
hokkaido-PlatformConfig.plist
honshu-PlatformConfig.plist
kahana-PlatformConfig.plist
kauai-PlatformConfig.plist
kure-PlatformConfig.plist
kyushu-PlatformConfig.plist
lanai-PlatformConfig.plist
madagascar.PlatformConfig.plist
maldives-PlatformConfig.plist
marlin-PlatformConfig.plist
maui-PlatformConfig.plist
midway-PlatformConfig.plist 
miyake-PlatformConfig.plist
-->

<-- Snippet of the P-atlantisb_M-RASP_V-u__m-6.5.txt file contents.
NVRAMRev=$Rev: 971216 $ 
sromrev=11
boardrev=0x1600
boardtype=0x08c2
boardflags=0x10001001
boardflags2=0x00800000
boardflags3=0x40000100
jtag_irw=38
PPRRev=PPR-AtlantisB-20200810-Rev1
ccode=XZ 
regrev=0
subvid=0x106b 
vendid-0x14e4
devid=0x4425
manfid=0x2d0
antswitch=0
pdgain5g=0
pdgain2g=0
aa2g=3
aa5g=3
-->


CAPTIVE PORTAL

One of the things I could not get a definitive answer on is the presence of a 'captive portal'. My understanding is that this is used in scenarios where public WiFi is available at locations such as restaurants and hotels. I am unsure if the captive portal is how the attackers control web browser usage. Some website acess is blocked or modified.

The following is on my Internet connection information.

<--
Portal state:
Captive portal detected
-->


From the System.plist file:

<--
			<dict>
				<key>_name</key>
				<string>Captive Network Assistant</string>
				<key>arch_kind</key>
				<string>arch_arm_i64</string>
				<key>lastModified</key>
				<date>2023-02-09T09:39:53Z</date>
				<key>obtained_from</key>
				<string>apple</string>
				<key>path</key>
				<string>/System/Library/CoreServices/Captive Network Assistant.app</string>
				<key>signed_by</key>
				<array>
					<string>Software Signing</string>
					<string>Apple Code Signing Certification Authority</string>
					<string>Apple Root CA</string>
				</array>
				<key>version</key>
				<string>5.0</string>
			</dict>

			<dict>
				<key>_name</key>
				<string>CaptiveNetwork</string>
				<key>lastModified</key>
				<date>2023-02-09T09:39:53Z</date>
				<key>obtained_from</key>
				<string>unknown</string>
				<key>path</key>
				<string>/System/Library/PrivateFrameworks/CaptiveNetwork.framework</string>
				<key>private_framework</key>
				<string>yes</string>
				<key>version</key>
				<string>13.0</string>
			</dict>
-->

<--
Users:
AppleMetaNodeLocation: /Local/Default
GeneratedUID: XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
NFSHomeDirectory: /var/empty
Password: *
PrimaryGroupID: 258
RealName: captiveagent
RecordName: _captiveagent
RecordType: dsRecTypeStandard:Users
UniqueID: 258
UserShell: /usr/bin/false
-->

<--
captiveagent: (Network) [com.apple.network:connection] nw_resolver_create_dns_getaddrinfo_locked [C1.1] Starting host resolution Hostname#*****d23:80, flags 0xc000d000 proto 0 using hostname: <NO HOSTNAME>
-->


Throughout the logs, com.apple.WebKit.WebContent.CaptivePortal creates 'the implicit endpoint upfront' and then drains messages. Below is an example of services created by com.apple.WebKit.WebContent.CaptivePortal using pid 644.

<--
(pid/512/com.apple.WebKit.WebContent.CaptivePortal.XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX997 [644]) <Notice>: job state = running
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.ImageKit.RecentPictureService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.LocalAuthenticationRemoteService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.StreamingUnzipService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.quicklook.QuickLookUIService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.siri.DeepSyncVerificationService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.siri.media-indexer
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.externalaccessory.WACEAService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.AuthKitUI.AKAuthorizationRemoteViewService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.ContactsUI.ContactPickerService
(pid/644/com.apple.sidecar.DisplayMarkup) <Notice>: created the implicit endpoint upfront
(pid/644/com.apple.sidecar.DisplayMarkup) <Notice>: draining messages from com.apple.sidecar.DisplayMarkup
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.AnnotationKit.MigratorService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.managedclient.pds.AirPlay
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.managedclient.pds.AppleService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.managedclient.pds.Assessment
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.AssetCacheProfilePlugin
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.BTMProfileService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.managedclient.pds.CardDAV
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.managedclient.pds.Certificate
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.ClassroomKit.ClassroomMCXService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.managedclient.pds.EraseDevice
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.managedclient.pds.Exchange
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.ExecutionPolicyService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.FeatureFlagsProfileService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.managedclient.pds.FileVaultEscrow
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.managedclient.pds.Firewall
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.managedclient.pds.FirmwarePassword
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.managedclient.pds.Font
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.LOMXPCService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.managedclient.pds.MAIDService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.managedclient.pds.MDM
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.managedclient.pds.PlugInKit
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.RemoteManagementMCXService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.managedclient.pds.SampleService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.managedclient.pds.SingleSignOn
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.SystemExtensionsMDM
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.managedclient.pds.SystemPolicy
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.TCCProfileService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.SafariServices.ExtensionHelper
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.SafariServices
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.AddressBook.ABPersonViewService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.FTLivePhotoService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.FaceTime.FTConversationService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.LookupViewService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.CoreMLModelSecurityService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.Photos.CPLDiagnose
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.Photos.Migration.Reader
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.Photos.Migration
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.AssetCacheLocatorService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.AuthenticationServices.Helper
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.OSLogService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.ANECompilerService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.private.ANEStorageMaintainer
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.iTunesCloud.SharedListeningConnectionService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.AppStoreDaemon.StoreAEService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.AppStoreDaemon.StoreUIService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.ScreenTimeViewService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.SafariFoundation.CredentialProviderExtensionHelper
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.LinkPresentation.LinkSnapshotGeneratorService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.StorageManagement.CloudStorageHelper
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.StorageManagement.MessagesHelper
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.Safari.CredentialExtractionHelper
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.Safari.SearchHelper
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.intents.intents-helper
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.ctcategories.service
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.CalendarWeatherKitService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.DataDetectorsActionService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.DataDetectorsViewService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.StoreKit.UIService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.desktopservices.ArchiveService
(pid/644/com.apple.quicklook.externalSatellite.arm64) <Notice>: created the implicit endpoint upfront
(pid/644/com.apple.quicklook.externalSatellite.arm64) <Notice>: draining messages from com.apple.quicklook.externalSatellite.arm64
(pid/644/com.apple.quicklook.externalSatellite.x86_64) <Notice>: created the implicit endpoint upfront
(pid/644/com.apple.quicklook.externalSatellite.x86_64) <Notice>: draining messages from com.apple.quicklook.externalSatellite.x86_64
(pid/644/com.apple.quicklook.satellite) <Notice>: created the implicit endpoint upfront
(pid/644/com.apple.quicklook.satellite) <Notice>: draining messages from com.apple.quicklook.satellite
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.DPSubmissionService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.photos.ImageConversionService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.photos.VideoConversionService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.LoginUserService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.icloud.FindMyDevice.FindMyDeviceEraseXPCService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.icloud.FindMyDevice.FindMyDeviceIdentityXPCService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.MediaLibraryService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.mscamerad-xpc
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.ZhuGeService
(pid/644 [com.apple.WebKi]) <Notice>: Service stub created for com.apple.MediaPlayer.RemotePlayerService
-->


BLUETOOTH

bluetoothd, BlueTool and IO80211 in it's variety forms are the height of sussyness. I know that changes are pushed and data is extracted from the Macs and iOS devices because logged events appear even when all services are meant to be disabled.

I have not reached a conclusion on the following snippet involving 'medicalDeviceorStateRestorationAppPendingTCC'. I can't locate the evidence, but I recall a log showing a lot of detailed medical related terms like atrial fibrialation. At the time I had no idea why medical information was logged. 

'medicalDeviceorStateRestorationAppPendingTCC' and other medical related logs may mean the attackers have hacked a relatives heart defibrillerator implant which uses bluetooth. The hospital accesses this remotely. The information displayed may have been data extracted from the device. 

Alternatively, I have pondered the theory that they are using a medical database system to manage the data harvested. There are many similarities to that particular database structure which are difficult to ignore. This theory also supports the presence of NULL in my places.

<--
bluetoothd: [com.apple.bluetooth:Server.XPC] Power state changed. PowerState:0 managerState:4 fUserAuthorization: 0	 medicalDeviceorStateRestorationAppPendingTCC:0
-->

<--
bluetoothd: (CoreUtils) [com.apple.CoreUtils:CUSystemMonitor] ScreenOn monitoring start (DR)
bluetoothd: (CoreUtils) [com.apple.CoreUtils:CUSystemMonitor] ScreenOn initial: on
bluetoothd: (CoreUtils) [com.apple.CoreUtils:CUSystemMonitor] FirstUnlock monitoring start
bluetoothd: (CoreUtils) [com.apple.CoreUtils:CUSystemMonitor] FirstUnlock starting poll timer
bluetoothd: (CoreUtils) [com.apple.CoreUtils:CUSystemMonitor] FirstUnlock initial: no
bluetoothd: (CoreUtils) [com.apple.CoreUtils:CUSystemMonitor] WiFi monitoring start
bluetoothd: (CoreUtils) [com.apple.CoreUtils:CUSystemMonitor] Activated
bluetoothd: (CoreUtils) [com.apple.CoreUtils:CUWiFiManager] SysMon: Activate
bluetoothd: (CoreUtils) [com.apple.CoreUtils:CUWiFiManager] SysMon: WiFi start monitoring
bluetoothd: (CoreUtils) [com.apple.CoreUtils:CUSystemMonitor] Activated
kernel: (ALF) ALF, hash_free: found kext_info <private>
kernel: (Sandbox) 1 duplicate report for Sandbox: bluetoothd(140) deny(1) file-read-data /Library/Preferences/com.apple.networkd.plist
kernel: (Sandbox) Sandbox: bluetoothd(140) deny(1) iokit-open-user-client IO80211APIUserClient
kernel: IOUC IO80211APIUserClient failed MACF in process pid 140, bluetoothd
airportd: (IO80211) ERROR: bluetoothd (140) is not entitled for com.apple.wifi.events.private, will not register for event type 100
airportd: (IO80211) [com.apple.WiFiManager:] <airport[171]> ERROR: bluetoothd (140) is not entitled for com.apple.wifi.events.private, will not register for event type 100
bluetoothd: (CoreUtils) [com.apple.CoreUtils:CUWiFiManager] SysMon: WiFiManagerClient started
bluetoothd: (CoreUtils) [com.apple.CoreUtils:CUWiFiManager] SysMon: WiFiDeviceClient started
airportd: (IO80211) ERROR: bluetoothd (140) is not entitled for com.apple.wifi.events, but allowing anyways for event type 5
airportd: (IO80211) [com.apple.WiFiManager:] <airport[171]> ERROR: bluetoothd (140) is not entitled for com.apple.wifi.events, but allowing anyways for event type 5
airportd: (IO80211) [com.apple.WiFiManager:] Info: <airport[171]> START MONITORING EVENT request (type=7) received from pid 140 (bluetoothd)
airportd: (IO80211) ERROR: bluetoothd (140) is not entitled for com.apple.wifi.events, but allowing anyways for event type 7
airportd: (IO80211) [com.apple.WiFiManager:] <airport[171]> ERROR: bluetoothd (140) is not entitled for com.apple.wifi.events, but allowing anyways for event type 7
airportd: (IO80211) [com.apple.WiFiManager:] Info: <airport[171]> START MONITORING EVENT request (type=1) received from pid 140 (bluetoothd)
airportd: (IO80211) ERROR: bluetoothd (140) is not entitled for com.apple.wifi.events, but allowing anyways for event type 1
airportd: (IO80211) [com.apple.WiFiManager:] <airport[171]> ERROR: bluetoothd (140) is not entitled for com.apple.wifi.events, but allowing anyways for event type 1
airportd: (IO80211) [com.apple.WiFiManager:] Info: <airport[171]> START MONITORING EVENT request (type=2) received from pid 140 (bluetoothd)
airportd: (IO80211) ERROR: bluetoothd (140) is not entitled for com.apple.wifi.events, but allowing anyways for event type 2
airportd: (IO80211) [com.apple.WiFiManager:] <airport[171]> ERROR: bluetoothd (140) is not entitled for com.apple.wifi.events, but allowing anyways for event type 2
BlueTool: [com.apple.bluetooth:BlueTool] PCIe successfully created BTI transport
BlueTool: [com.apple.bluetooth:BlueTool] Device opened successfully from bluetool_command_device
BlueTool: [com.apple.bluetooth:BlueTool] ready to download default HCD file from bluetool_command_broadcom
BlueTool: [com.apple.bluetooth:BlueTool] Expecting firmware file: <private>
BlueTool: [com.apple.bluetooth:BlueTool] Opening firmware file: <private>
BlueTool: [com.apple.bluetooth:BlueTool] firmeare file SHA check passed
BlueTool: [com.apple.bluetooth:BlueTool] Firmware file <private> successfully opened
BlueTool: [com.apple.bluetooth:BlueTool] Raw firmware data loaded: <private>
BlueTool: [com.apple.bluetooth:BlueTool] No PTB file matching <private> in <private>
BlueTool: [com.apple.bluetooth:BlueTool] SKU=<private> specific PTB file not found. Attempting to load default (non-SKU) PTB file
BlueTool: [com.apple.bluetooth:BlueTool] PTB file matching <private> is <private>
BlueTool: [com.apple.bluetooth:BlueTool] Loaded default non-SKU PTB file: <private>
BlueTool: [com.apple.bluetooth:BlueTool] Regulatory data : <private>
BlueTool: [com.apple.bluetooth:BlueTool] Regulatory data loaded successfully
bluetoothd: [com.apple.bluetooth:Server.Core] PowerAssertionHistory push time:702337664.33 source:BLUETOOL event:Destroy com.apple.bluetooth.bluetool.script ID:00008070
bluetoothd: [com.apple.bluetooth:Stack.UNKNOWN] PCIe registered event listener successfully
bluetoothd: [com.apple.bluetooth:Stack.UNKNOWN] Registered ABTM listener successfully
bluetoothd: [com.apple.bluetooth:Stack.UNKNOWN] PCIe registered time sync listener successfully
bluetoothd: [com.apple.bluetooth:Server.Core] Powering on chipset
bluetoothd: [com.apple.bluetooth:Server.XPC] Creating XPCServiceConnection to com.apple.BlueTool
BlueTool: [com.apple.bluetooth:BlueTool] Running xpcRunBuiltinScript
bluetoothd: [com.apple.bluetooth:Server.Core] BlueTool finished running init script
bluetoothd: [com.apple.bluetooth:Server.TimeLine.Power] Destroying com.apple.bluetooth.bluetool.script
bluetoothd: [com.apple.bluetooth:Server.XPC] XPCServiceConnection (com.apple.BlueTool) finalized
-->

<--
identityservicesd: [com.apple.Transport:LinkManager] LinkManager requires BT: YES.
identityservicesd: [com.apple.Transport:WPLinkManager] ============= New WPLinkManager <private> starting =============
identityservicesd: [com.apple.Transport:UTun] Loaded settings: utunLogPackets:0 dataChannelEncryptionEnabled:1 controlChannelEncryptionDisabled:0 utunChannel:1 readmultiple:0/0 ignoreUTunChannelWriteSignal:NO (devices:0)
identityservicesd: [com.apple.IDS:UTunPeer] Initing IDSUTunPeer 0x14541ca80 UTunDelivery-Default
identityservicesd: [com.apple.IDS:UTunPeer] btuuid (null) isDefaultPairedDevice: YES pipePeripheralUUIDString: (null) waitForDefaultPairedDevice: YES uniqueID 00000000-0000-0000-0000-000000000000 shouldUseIPsecLink: NO
-->


MEDIA CAPTURE

Then there is the use screencapture, replay, recording, microphone capture, continuity and sidecar (where you can mirror your screen to another device or use it as a second screen)

<--
ContinuityCaptureAgent: ContinuityCaptureAgent, start
<key>/System/Library/Frameworks/CoreMediaIO.framework/Resources/iOSScreenCapture.plugin/Contents/Resources/iOSScreenCaptureAssistant</key>
-->


MODIFIED APPS, APIS AND ACCESS


Geniune apps and processes are modified along with the introduction of new ones. This is why apps and browsers appear ‘mostly’ normal except for the non-typical login directs of all web based email accounts and various platforms logins through their APIs. 

Here is our macOS Ventura Safari https://virustotal.com/gui/file/c668611861dabc39dc714dd950a1b68a6a16c3b287849f1af747c7f92b250a37/details

<--
Twitter:
https://twitter.com/i/api/graphql/redacted/CreateTweet
wss://*****-websocket-a.intercom.io/pubsub/5-XXXX?X-*****-New-Client=true&X-*****-Version=0.10.0&user_role=undefined
parameters "EXCLUDE_USER_PREFERENCES, DO_NOT_WARN"
-->

The Netflix app on iOS appears as:

<--
Version: 15.37.0 (4438)
SDK Version: 2012.4
ESN: NFAPPL-01-IPAD12=1.A5B1
-->


OS AND BROWSER DETECTION

There are odd error messages that we get frequently as well as new login notifications for iOS identifying as weird operating systems.

Some of the OS and browser detections include:

<--
iOS:
Device: Chrome on Linux
Device: Chrome on Android
Device: Unknown
Operating System/Browser: Mac OS X/Safari
An Unknown Device

Safari:
Safari on Mac
Safari MAC (Cadmium)
Safari 16 on Mac OS X 10

Apple Mail:
Mozilla/5.0 (Macintosh: Intel Mac OS X 10.15; rv: 110.0) Gecko/20100101 Thunderbird/110.0
-->

ERROR MESSAGES

ERROR MESSAGES: SAFARI

Safari errors encounted regularly:

<--
- Apple Security Report at https://security.apple.com/reports/: Could not submit report. Can't find variable: FileReader
- 'This app is available only on the App Store for iPhone and iPad.' (When you’re using an iOS device!)
- NSURLErrorCannotParseResponse
- 'Your session has expired. Please log in again to continue using the app.' (When using a browser page with no visible extensions installed)
- Unfortunately, your browser is unsupported. Please switch to a supported browser to view rich content.
- Your browser did something unexpected. Please try again. If the error continues, try disabling all browser extensions.
- 'Sorry, but Apple Safari version 11 is no longer supported. Older browsers are slower, less secure, and don't support our latest features. To continue, please update Safari or download another browser such as Microsoft Edge, Google Chrome or Mozilla Firefox.' (When you using what you think IS the latest version because Apple update Safari with each new update)
- Zoom web version on Safari iOS: 'Your browser does not support using the computer's Audio device. To use Zoom, install the latest version of a standard browser, such as Chrome, Firefox and Chromium Edge.' (and)
- 'Thank you for attending the meeting. For a better experience during your next meeting, Zoom recommends that you upgrade your browser to the latest version. After the upgrade, you will be able to: See the video of the active speaker. Use the audio devices on your computer to speak and listen.'
- '404. That's an error. The requested URL was not found on this server. That's all we know.' (When accessing Gmail)
- OneDrive Web: Sorry, something went wrong [Error Message] Can't find variable: ResizeObserver
- Safari couldn't open the page because the server stopped responding.
- You may be trying to access JSTOR with an out-of-date or incompatible browser, causing some features not to load or work correctly. In order to maximize your JSTOR experience we suggest you update to a more recent browser version or install a more compatible browser to use with JSTOR.
-->

Safari: (Accounts) [com.apple.accounts:core] "Exceeded the maximum number of connections (2) to accountsd: 7 connections open. Consider switching to +[ACAccountStore defaultStore]"

ERROR MESSAGES: iOS APPS

<--
- The Operation Can't Be Completed. Couldn't communicate with a helper application.
- Microsoft Word iOS app: Randomly says: "Restart Required. Restart Office to apply changes to your privacy preferences." (I had not made any changes)
- "Files" would like to paste from "Files" Do you want to allow this?
-->


KICKING STUFF

The Stealthy Developers prominent signature is to kick a lot of things. 'kicking off our agents - with licencse to kill' sounds even more ominous with the distinct typo.

<--
dataaccessed: [com.apple.dataaccess:DA] dataaccessd_main kicking off our agents - with licencse to kill
secd: [com.apple.securityd:keychainitemupgrade] kicking off keychain item upgrade
bird: (CloudDocsDaemon) [com.apple.clouddocs:default personal] [WARNING] Not waiting for account <private> loading synchronously since we did not yet kick loadAccounts request
identityservicesd: [com.apple.IDS:Registration] Kicking dequeue of pending requests
wifiFirmwareLoader: [com.apple.wifiFirmwareLoader] Kicking corecaptured to start logging...
ane: [com.apple.aned] No model in cache, kicking off compilation.
itunescloudd: (iTunesCloud) [com.apple.amp.iTunesCloud:AgeVerification] ICAgeVerificationManager 0x136b***** - ageVerificationStateForUserIdentity - Retrieving state [Disk cache] - Kicking off refresh - State=<private>
imagent: (IMFoundation) [com.apple.IDS:Registration] Dispatch registration success {name: com.apple.Messages.kickOffDailySync}
imagent: (IMDaemonCore) [com.apple.Messages:IMDaemon_CloudKit] kickOffCloudKitSyncIfNeededOnImagentLaunch
imagent: (IMDaemonCore) [com.apple.Messages:IMDaemon_CloudKit] Not kicking off a sync as there was no sync in progress or we hit max limit attempts of sync
imagent: [com.apple.Messages:Daemon] Kicking off auto reconnect
seserviced: [com.apple.seserviced:default] Kicking off first unlock actions
dataaccessd: (DADaemonCalDAV) [com.apple.dataaccess:CalDAV] Account "<private>" (MobileCalDAVDaemonAccount XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX) was told it is safe to refresh. Kicking off a refresh.
homed: (HomeKitDaemonLegacy) [com.apple.HomeKit:default] Kicking shared home push delay
homed: (HomeKitDaemonLegacy) [com.apple.HomeKit:CloudManager] Account status has changed (accountIsActive YES), re-kicking query of current account state
loginwindow: [com.apple.loginwindow.logging:Standard] -[ApplicationManager kickstartJobWithLabel:usingDebugID:] |                 kickstartJobWithLabel: com.apple.WindowManager.agent
loginwindow: [com.apple.loginwindow.logging:Standard] -[ApplicationManager kickstartJobWithLabel:usingDebugID:] |                 kickstartJobWithLabel: com.apple.Dock.agent
loginwindow: [com.apple.loginwindow.logging:Standard] -[ApplicationManager kickstartJobWithLabel:usingDebugID:] |                 kickstartJobWithLabel: com.apple.controlcenter
loginwindow: [com.apple.loginwindow.logging:Standard] -[ApplicationManager kickstartJobWithLabel:usingDebugID:] |                 kickstartJobWithLabel: com.apple.SystemUIServer.agent
loginwindow: [com.apple.loginwindow.logging:Standard] -[ApplicationManager kickstartJobWithLabel:usingDebugID:] |                 kickstartJobWithLabel: com.apple.Finder
-->


LOCATION TRACKING

Location services has been toggled off (by me). Inititially requests from locationd were denied but later it was seen accessing location data. Location is tracked through locationd, geod and findmydeviced.

With location services disabled this has likely been achieved by using demos, simulations or the 'geod' process which is also discussed.

<--
locationd: (LocationSupport) [com.apple.LocationSupport:Intersilo] {"msg":"#Manufacturing service complete", "EffectiveServiceName":"CLSimulatedLocationProvider"}
locationd: [com.apple.locationd.Core:Simulation] {"msg":"Do we have a listener?", "listtner":"<NSXPCListener: 0x******cc0> service: com.apple.locationd.simulation"}
findmydeviced: [com.apple.icloud.findmydeviced:_] Checked in APS mach handlder development:<private>
findmydeviced: (ApplePushService) [com.apple.apsd:connection] Initializing APSConnection <private>: env=demo port=<private> 
-->


LOCATION TRACKING: FIND MY

Even though FindMyDevice is toggled off, the 'FindMy' service is activated.

<--
findmydeviced: (ApplePushService) [com.apple.apsd:connection] <private> _setEnableStatusNotifications NO sendToDaemon YES
findmydeviced: (libxpc.dylib) [com.apple.xpc.activity:Client] _xpc_activity_unregister: com.apple.icloud.findmydeviced.keep-alive-on-dirty 0, last registration: true
findmydeviced: [com.apple.icloud.findmydeviced:_] Checking for /private/var/db/.AppleSetupDone & waiting, if it does not exist
findmydeviced: (ApplePushService) [com.apple.apsd:connection] <private> setMessageSize: 5120
findmydeviced: (ApplePushService) [com.apple.apsd:connection] <private> setLargeMessageSize: 51200
findmydeviced: [com.apple.icloud.findmydeviced:_] Started watching for the appearance of /private/var/db/.AppleSetupDone
findmydeviced: [com.apple.icloud.findmydeviced:_] FMDLocationManagerFactory creating location manager
findmydeviced: [com.apple.icloud.findmydeviced:_] FMDLocationManagerFactory created <private>
findmydeviced: [com.apple.icloud.findmydeviced:_] Checked in APS mach handlder production:<private>
findmydeviced: (ApplePushService) [com.apple.apsd:connection] Initializing APSConnection <private>: env=development port=<private> darkWakeEnabled=YES queue=<private>
findmydeviced: [com.apple.icloud.findmydeviced:_] Checked in APS mach handlder development:<private>
findmydeviced: (ApplePushService) [com.apple.apsd:connection] Initializing APSConnection <private>: env=demo port=<private> darkWakeEnabled=YES queue=<private>
findmydeviced: [com.apple.icloud.findmydeviced:_] Checked in APS mach handlder demo:<private>
findmydeviced: [com.apple.icloud.findmydeviced:_] FMDLocalActivationLockInfoManager posted activationLockInfo changed notification after startup
findmydeviced: [com.apple.icloud.findmydeviced:_] ActionManager operation count 1
findmydeviced: (FMCore) [com.apple.icloud.FMCore:_] Beginning xpc transaction ActionManagerTransaction
findmydeviced: (libxpc.dylib) [com.apple.xpc.activity:Client] xpc_activity_set_criteria: com.apple.icloud.findmydeviced.keep-alive-on-dirty (0x******a80), setting state now to 1
-->


In the iOS App Privacy Report, 'Find My' miraculously manages to contact p113-fmfmobile.icloud.com, even though Find My Device is disabled, as is bluetooth and WiFi.

There were instances of location tracking using suspicious services. High up on the scale of sussyness is, 'nearbyd: [com.apple.lib****:client] ****ParameterCache: device type 997' which uses my first name. Neither of these are referenced at all online after checking numerous search engines. Thus, I believe they may have been created uniquely to my iPhone. The 'device type 997' context is not clear, I did happen to come across a reference to 997 while investigating the way in which my USIM was being used virtually. The Issuer Identification Number for Kazakhstan is 997. 

In a log on my iPhone, the ****ParameterCache appears along with the following certificate. 'SFAppleIdentity' appears to related Shared Files. I do not know what those shared files are, however I presume they relate to 'Recent Documents' which appears attract a lot of interest from the attackers and their agents. 

<--
****ParameterCache
Identity: SFAppleIdentity
AccountIdentifier: com.apple.idms.appleid.prd.000XXX-XX-XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXX
AltDSID: 000XXX-XX-XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXX
CertificateExpirationDate: 2024-09-01 00:00:00:000
IntermediateCertificateSerialNumber: XXXXXXXXXXXXXXXX
IntermediateCertificatePersistentReference: 0x0000000XXXXXXXXX
<--

<--
UARPUpdaterServiceLegacyAudio: Loaded Native iAUP Accessory List
nearbyd: (WirelessProximity) [com.apple.bluetooth:WirelessProximity] Ranging is not supported on this platform
nearbyd: (WirelessProximity) [com.apple.bluetooth:WirelessProximity] WPClient deallocing (0x******f90 - WPRanging)
nearbyd: [com.apple.lib****:client] ****ParameterCache: device type 997
UARPUpdaterServiceLegacyAudio: [com.apple.accessoryupdater.uarp:legacyAudioUpdater] <private>
UARPUpdaterServiceLegacyAudio: (MobileAsset) [com.apple.mobileassetd:Notice] -[MAXpcManager ensureConnection]: Creating client/daemon connection: XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXX5D9
nearbyd: [com.apple.nearbyd:general] regulatory,comp,getDeviceBasebandType,<private>
nearbyd: [com.apple.nearbyd:general] regulatory,settings,init
nearbyd: [com.apple.nearbyd:general] regulatory,download,sm,init
UARPUpdaterServiceLegacyAudio: [com.apple.accessoryupdater.uarp:legacyAudioUpdater] <private>
nearbyd: [com.apple.nearbyd:general] regulatory,download,triggerUpdate,startup
nearbyd: [com.apple.nearbyd:general] regulatory,geof,setUwbOn
nearbyd: [com.apple.nearbyd:general] regulatory,geo,monitor,onRestrictedRegionChanged:1
nearbyd: [com.apple.nearbyd:general] regulatory,prov,onRestrictedRegionChanged,1
nearbyd: [com.apple.nearbyd:general] regulatory,settings,isRestrictedRegion,1
nearbyd: [com.apple.nearbyd:general] regulatory,settings,fChannelPref[CH5][Airplane],0
nearbyd: [com.apple.nearbyd:general] regulatory,settings,fChannelPref[CH5][RegulatoryArea],0
nearbyd: [com.apple.nearbyd:general] regulatory,settings,fChannelPref[CH5][UwbSwitch],1
nearbyd: [com.apple.nearbyd:general] regulatory,settings,fChannelPref[CH5][RestrictedRegion],1
nearbyd: [com.apple.nearbyd:general] regulatory,settings,ch,CH5,current,0,newChannelPreference,0
nearbyd: [com.apple.nearbyd:general] regulatory,settings,fChannelPref[CH9][Airplane],0
nearbyd: [com.apple.nearbyd:general] regulatory,settings,fChannelPref[CH9][RegulatoryArea],0
nearbyd: [com.apple.nearbyd:general] regulatory,settings,fChannelPref[CH9][UwbSwitch],1
nearbyd: [com.apple.nearbyd:general] regulatory,settings,fChannelPref[CH9][RestrictedRegion],1
nearbyd: [com.apple.nearbyd:general] regulatory,settings,ch,CH9,current,0,newChannelPreference,0
nearbyd: [com.apple.nearbyd:general] regulatory,settings,setInRestrictedRegion,ignoreUpdates,isChannelSettingChanged,0,isPowerTableChanged,0
nearbyd: [com.apple.nearbyd:general] prov,onRestrictedRegionChanged,isoCountry,<private>
nearbyd: [com.apple.nearbyd:general] regulatory,geo,sm,init
nearbyd: [com.apple.nearbyd:general] regulatory,download,triggerUpdate,copyFromCLMobileAsset,skipped
nearbyd: [com.apple.nearbyd:general] regulatory,download,triggerUpdate,retry
nearbyd: (CoreLocation) [com.apple.locationd.Core:Client] {"msg":"CLLocationManager", "event":"activity", "_cmd":"initWithEffectiveBundleIdentifier:bundlePath:delegate:silo:", "self":"0x******470", "identifier":"", "bundlePath":"\/System\/Library\/LocationBundles\/UWBRegulatory.bundle"}
nearbyd: (MobileKeyBag) <private>
nearbyd: (CoreLocation) [com.apple.locationd.Core:Core] {"msg":"state transition", "event":"state_transition", "state":"LocationManager", "id":"0x******470", "property":"init", "new":{"trackRunInfoEnabled":false,"previousAuthorizationStatusValid":false,"paused":false,"requestingLocation":false,"updatingVehicleSpeed":false,"desiredAccuracy":100,"allowsBackgroundLocationUpdates":false,"dynamicAccuracyReductionEnabled":false,"distanceFilter":-1,"allowsLocationPrompts":true,"activityType":0,"groundAltitudeEnabled":false,"pausesLocationUpdatesAutomatically":1,"fusionInfoEnabled":false,"isAuthorizedForWidgetUpdates":false,"updatingVehicleHeading":false,"batchingLocation":false,"showsBackgroundLocationIndicator":false,"updatingLocation":false,"requestingRanging":false,"updatingHeading":false,"previousAuthorizationStatus":0,"allowsMapCorrection":true,"matchInfoEnabled":false,"allowsAlteredAccessoryLocations":false,"updatingRanging":false,"limitsPrecision":false,"courtesyPromptNeeded":false,"headingFilter":1}}
nearbyd: (CoreLocation) [com.apple.locationd.Core:Core] {"msg":"state transition", "event":"state_transition", "state":"LocationManager", "id":"0x******470", "property":"lifecycle", "old":"0x0", "new":"0x******770"}
nearbyd: [com.apple.nearbyd:general] regulatory,prov,initialized,fDeviceType=<private> 
nearbyd: (CoreLocation) [com.apple.locationd.Core:Client] {"msg":"client allocated", "client":"0x******990"}
nearbyd: (libxpc.dylib) [com.apple.xpc.activity:Client] xpc_activity_set_criteria: com.apple.nearbyd.regdownload (0x******470), setting state now to 1
nearbyd: (libxpc.dylib) [com.apple.xpc.activity:Client] _xpc_activity_set_state: com.apple.nearbyd.regdownload (0x******470), 1
nearbyd: [com.apple.nearbyd:general] #ota,query configurable parameters on startup
nearbyd: [com.apple.nearbyd:general] PRRangingManager construction
nearbyd: [com.apple.nearbyd:general] PRRangingManager: Not a supported platform.
nearbyd: [com.apple.nearbyd:general] #ota,query all files
nearbyd: [com.apple.nearbyd:general] #ota,query file <private>
nearbyd: [com.apple.nearbyd:general] #ota,empty file content
nearbyd: [com.apple.nearbyd:general] #ota,query file <private>
nearbyd: [com.apple.nearbyd:general] #ota,empty file content
nearbyd: [com.apple.nearbyd:general] [PRXPCServicesManager] setting up XPC listener for mach service: com.apple.nearbyd.xpc.nearbyinteraction
UserEventAgent: (com.apple.cts) [com.apple.xpc.activity:Internal] Activity com.apple.nearbyd.regdownload (0x******cc0) does not match XPC Activity with name com.apple.mobileactivationd.DCRT.OOB (0x******9b0)
UserEventAgent: (com.apple.cts) [com.apple.xpc.activity:Internal] Activity com.apple.nearbyd.parameters.update (0x147617720) does not match XPC Activity with name com.apple.mobileactivationd.DCRT.OOB (0x******9b0)
...
locationd: [com.apple.locationd.Core:Core] Client [XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXX10C] connected with message name LocationManager/kCLConnectionMessageRegistration
locationd: CL: LocationManager/kCLConnectionMessageRegistration
locationdq: [com.apple.locationd.Core:Client] Client [XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXX10C] is attempting to masquerade as uninstalled app with effective bundle path </System/Library/LocationBundles/UWBRegulatory.bundle>
locationd: (libsystem_trace.dylib) Activity for state dumps
locationd: [com.apple.locationd.Core:Core] {"msg":"computing freshAuthorizationContext", "ClientKey":"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXX10C:com.apple.locationd.executable-", "BigSwitch":1, "InUseLevel":{"type":"decode failure","raw value":0,"expected type":"Generic"}}
locationd: (XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXX173) CLLocationManagerStateTracker
{"trackRunInfoEnabled":false,"previousAuthorizationStatusValid":true,"paused":false,"requestingLocation":false,"updatingVehicleSpeed":false,"desiredAccuracy":2147483646,"allowsBackgroundLocationUpdates":false,"dynamicAccuracyReductionEnabled":false,"distanceFilter":-1,"allowsLocationPrompts":true,"activityType":0,"groundAltitudeEnabled":false,"pausesLocationUpdatesAutomatically":1,"fusionInfoEnabled":false,"isAuthorizedForWidgetUpdates":false,"updatingVehicleHeading":false,"batchingLocation":false,"showsBackgroundLocationIndicator":false,"updatingLocation":true,"requestingRanging":false,"updatingHeading":false,"previousAuthorizationStatus":2,"allowsMapCorrection":true,"matchInfoEnabled":false,"allowsAlteredAccessoryLocations":false,"updatingRanging":false,"limitsPrecision":true,"courtesyPromptNeeded":false,"headingFilter":1}
-->


LOCATION REGULATORY MASQUERADE

There are some off location related mysteries. Such as a number of instances where 'Client' masquerades as the UWBRegulatory.bundle. There are numerous mentions of com.apple.LaunchServices.chinaRegion. 

Additionally, there is the odd coincidence of finding the following locations listed as 'custom locations' in Google settings: Berlin DE, Moscow RU, Shanghai CN, London GB, Mountain View US, Mumbai IN, São Paulo BR, Tokyo JP and San Francisco US. Weirdly, these countries match 'macosLegacy CustomVoice' mobile assets downloaded by axassetsd (SiriTTSService). Maybe I am overthinking but they could be using them to invoke Siri actions as I saw this recently come to light elsewhere.

<--
locationd: [com.apple.locationd.Core:Core] {"msg":"state transition", "event":"state_transition", "state":"DaemonClient", "id":"0x13b******", "property":"clientName", "old":"", "new":"[XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXX010C]"}
locationd: [com.apple.locationd.Core:Core] Client [XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXX010C] connected with message name LocationManager/kCLConnectionMessageRegistration
nearbyd: [com.apple.nearbyd:general] regulatory,prov,initialized,fDeviceType=<private>
locationd: [com.apple.locationd.Core:Client] Client [XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXX010C] is attempting to masquerade as uninstalled app with effective bundle path </System/Library/LocationBundles/UWBRegulatory.bundle>
locationd: [com.apple.locationd.Core:Core] location disabled system-wide, denying executable XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXX010C:com.apple.locationd.executable-
locationd: [com.apple.locationd.Core:Core] {"msg":"computing freshAuthorizationContext", "ClientKey":"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXX010C:com.apple.locationd.executable-", "BigSwitch":0, "InUseLevel":{"type":"decode failure","raw value":0,"expected type":"Generic"}}
locationd: [com.apple.locationd.Core:Core] location disabled system-wide, denying executable XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXX010C:com.apple.locationd.executable-
-->

<--
565    5    followupd: [com.apple.followup:query] Executing query: pragma foreign_keys=on
151    0    lsd: (CarbonCore) [com.apple.CarbonCore:nameddata] _CSGetNamedData _CSGetNamedData(com.apple.LaunchServices.chinaRegion, err=5 data=0x0/0
151    0    lsd: (CarbonCore) [com.apple.CarbonCore:nameddata] _CSSetNamedData _CSSetNamedData(com.apple.LaunchServices.chinaRegion, data=0x16b4aee4f/1
388    0    lsd: (CarbonCore) [com.apple.CarbonCore:nameddata] _CSGetNamedData _CSGetNamedData(com.apple.LaunchServices.chinaRegion, err=5 data=0x0/0
388    0    lsd: (CarbonCore) [com.apple.CarbonCore:nameddata] _CSSetNamedData _CSSetNamedData(com.apple.LaunchServices.chinaRegion, data=0x16bcbedbf/1
390    0    Finder: (CarbonCore) [com.apple.CarbonCore:nameddata] _CSGetNamedData _CSGetNamedData(com.apple.LaunchServices.chinaRegion, err=0 data=0x107c50000/1
434    0    NotificationCenter: (CarbonCore) [com.apple.CarbonCore:nameddata] _CSGetNamedData _CSGetNamedData(com.apple.LaunchServices.chinaRegion, err=0 data=0x1107f4000/1
8039   0    Dock: (CarbonCore) [com.apple.CarbonCore:nameddata] _CSGetNamedData _CSGetNamedData(com.apple.LaunchServices.chinaRegion, err=5 data=0x0/0
8039   0    Dock: (CarbonCore) [com.apple.CarbonCore:nameddata] _CSSetNamedData _CSSetNamedData(com.apple.LaunchServices.chinaRegion, data=0x16be3708f/1
...
539    0    nearbyd: [com.apple.nearbyd:general] regulatory,download,triggerUpdate,startup
539    0    nearbyd: [com.apple.nearbyd:general] regulatory,geof,setUwbOn
539    0    nearbyd: [com.apple.nearbyd:general] regulatory,geo,monitor,onRestrictedRegionChanged:1
539    0    nearbyd: [com.apple.nearbyd:general] regulatory,prov,onRestrictedRegionChanged,1
539    0    nearbyd: [com.apple.nearbyd:general] regulatory,settings,isRestrictedRegion,1
539    0    nearbyd: [com.apple.nearbyd:general] regulatory,settings,fChannelPref[CH5][Airplane],0
539    0    nearbyd: [com.apple.nearbyd:general] regulatory,settings,fChannelPref[CH5][RegulatoryArea],0
539    0    nearbyd: [com.apple.nearbyd:general] regulatory,settings,fChannelPref[CH5][UwbSwitch],1
539    0    nearbyd: [com.apple.nearbyd:general] regulatory,settings,fChannelPref[CH5][RestrictedRegion],1
539    0    nearbyd: [com.apple.nearbyd:general] regulatory,settings,ch,CH5,current,0,newChannelPreference,0
539    0    nearbyd: [com.apple.nearbyd:general] regulatory,settings,fChannelPref[CH9][Airplane],0
539    0    nearbyd: [com.apple.nearbyd:general] regulatory,settings,fChannelPref[CH9][RegulatoryArea],0
539    0    nearbyd: [com.apple.nearbyd:general] regulatory,settings,fChannelPref[CH9][UwbSwitch],1
539    0    nearbyd: [com.apple.nearbyd:general] regulatory,settings,fChannelPref[CH9][RestrictedRegion],1
539    0    nearbyd: [com.apple.nearbyd:general] regulatory,settings,ch,CH9,current,0,newChannelPreference,0
539    0    nearbyd: [com.apple.nearbyd:general] regulatory,settings,setInRestrictedRegion,ignoreUpdates,isChannelSettingChanged,0,isPowerTableChanged,0
539    0    nearbyd: [com.apple.nearbyd:general] prov,onRestrictedRegionChanged,isoCountry,<private>
539    0    nearbyd: [com.apple.nearbyd:general] regulatory,geo,sm,init
539    0    nearbyd: [com.apple.nearbyd:general] regulatory,download,triggerUpdate,copyFromCLMobileAsset,skipped
539    0    nearbyd: [com.apple.nearbyd:general] regulatory,download,triggerUpdate,retry
-->


UNRELATED LOCATIONS AND LANGUAGE SERVICES
=@=
<--
imklaunchagent: (ExtensionFoundation) [com.apple.extensionkit:NSExtension] discovered extensions: attributes <private>, extensionSet {(
    <EXConcreteExtension: 0x******b50> {id = com.apple.inputmethod.TYIM},
    <EXConcreteExtension: 0x******480> {id = com.apple.inputmethod.Kotoeri.RomajiTyping},
    <EXConcreteExtension: 0x******430> {id = com.apple.inputmethod.Korean},
    <EXConcreteExtension: 0x******960> {id = com.apple.inputmethod.VietnameseIM},
    <EXConcreteExtension: 0x******2c0> {id = com.apple.PressAndHold},
    <EXConcreteExtension: 0x******f40> {id = com.apple.inputmethod.TransliterationIM},
    <EXConcreteExtension: 0x******ed0> {id = com.apple.inputmethod.Kotoeri.KanaTyping},
    <EXConcreteExtension: 0x******800> {id = com.apple.inputmethod.TCIM},
    <EXConcreteExtension: 0x******040> {id = com.apple.inputmethod.EmojiFunctionRowItem},
    <EXConcreteExtension: 0x******140> {id = com.apple.inputmethod.ChineseHandwriting},
    <EXConcreteExtension: 0x******5b0> {id = com.apple.inputmethod.SCIM}
)}
-->

<--
3080   0    csnameddatad: [com.apple.CarbonCore:nameddata] -[ServiceDelegate listener:shouldAcceptNewConnection:] NAMEDDATA: Incoming read/write connection <NSXPCConnection: 0x******340> connection from pid 151 on anonymousListener or serviceListener on listener <NSXPCListener: 0x******150> service: (null)
...
lsd: (CarbonCore) [com.apple.CarbonCore:nameddata] _CSGetNamedData _CSGetNamedData(com.apple.LaunchServices.chinaRegion, err=5 data=0x0/0
3080   0    lsd: (CarbonCore) [com.apple.CarbonCore:nameddata] _CSSetNamedData _CSSetNamedData(com.apple.LaunchServices.chinaRegion, data=0x******e4f/1
...
3080   0    lsd: (CarbonCore) [com.apple.CarbonCore:nameddata] _CSGetNamedData _CSGetNamedData(com.apple.LaunchServices.chinaRegion, err=5 data=0x0/0
3080   0    lsd: (CarbonCore) [com.apple.CarbonCore:nameddata] _CSSetNamedData _CSSetNamedData(com.apple.LaunchServices.chinaRegion, data=0x******dbf/1
...
3080   0    Finder: (CarbonCore) [com.apple.CarbonCore:nameddata] _CSGetNamedData _CSGetNamedData(com.apple.LaunchServices.chinaRegion, err=0 data=0x107*****0/1
...
3080   0    NotificationCenter: (CarbonCore) [com.apple.CarbonCore:nameddata] _CSGetNamedData _CSGetNamedData(com.apple.LaunchServices.chinaRegion, err=0 data=0x110*****0/1
-->


Via 'com.apple.appkit.xpc.openAndSavePanelService: (SharedFileList) [com.apple.sharedfilelist:XPC]', they would then go on to:
fetchList: com.apple.LSSharedFileList.FavoriteItems, com.apple.LSSharedFileList.FavoriteVolumes
get list: com.apple.LSSharedFileList.FavoriteItems, com.apple.LSSharedFileList.FavoriteVolumes
received: com.apple.LSSharedFileList.FavoriteItems, com.apple.LSSharedFileList.FavoriteVolumes
change object: com.apple.LSSharedFileList.FavoriteItems, com.apple.LSSharedFileList.FavoriteVolumes and
register name: com.apple.sharedfilelist.launch object: kCFNotificationAnyObject for both com.apple.LSSharedFileList.FavoriteItems and com.apple.LSSharedFileList.FavoriteVolumes.

They then appear to have retrieved the items:
com.apple.appkit.xpc.openAndSavePanelService: (KernelManagement) Creating connection to service com.apple.KernelExtensionServer
com.apple.appkit.xpc.openAndSavePanelService: (IO80211) _getIfListCopy: @[45485.329565] exit 0/0x00000000, total time [0.000082], ifCount[4]

There are also odd regulatory changes to restricted regions:

<--
nearbyd: [com.apple.nearbyd:general] regulatory,download,triggerUpdate,startup
nearbyd: [com.apple.nearbyd:general] regulatory,geof,setUwbOn
nearbyd: [com.apple.nearbyd:general] regulatory,geo,monitor,onRestrictedRegionChanged:1
nearbyd: [com.apple.nearbyd:general] regulatory,prov,onRestrictedRegionChanged,1
nearbyd: [com.apple.nearbyd:general] regulatory,settings,isRestrictedRegion,1
nearbyd: [com.apple.nearbyd:general] regulatory,settings,fChannelPref[CH5][Airplane],0
nearbyd: [com.apple.nearbyd:general] regulatory,settings,fChannelPref[CH5][RegulatoryArea],0
nearbyd: [com.apple.nearbyd:general] regulatory,settings,fChannelPref[CH5][UwbSwitch],1
nearbyd: [com.apple.nearbyd:general] regulatory,settings,fChannelPref[CH5][RestrictedRegion],1
nearbyd: [com.apple.nearbyd:general] regulatory,settings,ch,CH5,current,0,newChannelPreference,0
nearbyd: [com.apple.nearbyd:general] regulatory,settings,fChannelPref[CH9][Airplane],0
nearbyd: [com.apple.nearbyd:general] regulatory,settings,fChannelPref[CH9][RegulatoryArea],0
nearbyd: [com.apple.nearbyd:general] regulatory,settings,fChannelPref[CH9][UwbSwitch],1
nearbyd: [com.apple.nearbyd:general] regulatory,settings,fChannelPref[CH9][RestrictedRegion],1
nearbyd: [com.apple.nearbyd:general] regulatory,settings,ch,CH9,current,0,newChannelPreference,0
nearbyd: [com.apple.nearbyd:general] regulatory,settings,setInRestrictedRegion,ignoreUpdates,isChannelSettingChanged,0,isPowerTableChanged,0
nearbyd: [com.apple.nearbyd:general] prov,onRestrictedRegionChanged,isoCountry,<private>
nearbyd: [com.apple.nearbyd:general] regulatory,geo,sm,init
nearbyd: [com.apple.nearbyd:general] regulatory,download,triggerUpdate,copyFromCLMobileAsset,skipped
nearbyd: [com.apple.nearbyd:general] regulatory,download,triggerUpdate,retry
-->


In Google Drive, the following are listed under 'Custom locations':

Berlin de-DE Europe/Berlin
London en-GB Europe/London
Moscow ru-RU Europe/Moscow
Mountain View en-US America/Los_Ange...
Mumbai mr-IN Asia/Kolkata
San Francisco en-US America/Los_Ange...
Shanghai zh-Hans-CN Asia/Shanghai
São Paulo pt-BR America/Sao Paulo
Tokyo ja-JP Asia/Tokyo


<--
AXVisualSupportAgent: (SiriTTSService) [com.apple.ttsasset:catalog] Listing asset types: '[com.apple.MobileAsset.VoiceServices.CustomVoice, com.apple.MobileAsset.VoiceServicesVocalizerVoice]', filter: '[Technology: custom, Available: true]'
AXVisualSupportAgent: (SiriTTSService) [com.apple.ttsasset:catalog] #MobileAsset listing assets for type '<private>', filter: '[Technology: custom, Available: true]'
mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager handleClientConnection:on:]_block_invoke: assetType: com.apple.MobileAsset.VoiceServices.CustomVoice client: AXVisualSupportAgent, command: 1 (MA_QUERY_ASSET_TYPE)
mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager handleClientConnection:on:]_block_invoke_2: AXVisualSupportAgent issued query command for com.apple.MobileAsset.VoiceServices.CustomVoice
mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager handleQueryRequest:clientName:connection:message:]: AXVisualSupportAgent queried for: com.apple.MobileAsset.VoiceServices.CustomVoice with returnType of: 1 (MAInstalledOnly) - will not block on network by client request
mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager determineAssets:clientName:connection:downloadingTasks:message:resultTypes:queryArray:isForSpecificAsset:specificAssetId:specificAllowedDifferences:]: AXVisualSupportAgent queried for: com.apple.MobileAsset.VoiceServices.CustomVoice with returnType of: 1 with Purpose: (null)
mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager newCatalogLoad:withPurpose:]: Catalog fileLocation: /System/Library/AssetsV2/com_apple_MobileAsset_VoiceServices_CustomVoice/com_apple_MobileAsset_VoiceServices_CustomVoice.xml
mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager handleClientConnection:on:]_block_invoke: assetType: com.apple.MobileAsset.VoiceServices.CustomVoice client: AXVisualSupportAgent, command: 2 (MA_DOWNLOAD_METADATA)
mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager newCatalogLoad:withPurpose:]: Catalog fileLocation: /System/Library/AssetsV2/com_apple_MobileAsset_VoiceServices_CustomVoice/com_apple_MobileAsset_VoiceServices_CustomVoice.xml
siriactionsd: (CloudKit) [com.apple.cloudkit:CK] Allowing CKContainer to set any environment
mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[DownloadManager startDownloadAndUpdateState:for:startingAt:withLength:extractWith:modified:options:downloadSize:using:with:clientName:autoAssetJob:ofJobType:notify:]_block_invoke: Non discretionary download. Setting nonDiscretionaryUpgradeTime to downloadStartTime
AXVisualSupportAgent: (SiriTTSService) [com.apple.ttsasset:catalog] Searching voice bundles in (
    "file:///Users/redacted/Library/Speech/Voices/",
    "file:///Library/Speech/Voices/",
    "file:///System/Library/Speech/Voices/",
    "file:///System/Cryptexes/App/System/Library/Speech/Voices/",
    "file:///System/Library/SpeechBase/Voices/",
    "file:///System/Cryptexes/App/System/Library/SpeechBase/Voices/"
)
AXVisualSupportAgent: (SiriTTSService) [com.apple.ttsasset:asset] Found '[com.apple.MobileAsset.VoiceServices.CustomVoice, com.apple.MobileAsset.VoiceServicesVocalizerVoice]' assets [Li-Mu:zh-CN:custom:compact:macosLegacy:1.2.0, Martin:de-DE:custom:compact:macosLegacy:1.2.0, Arthur:en-GB:custom:compact:macosLegacy:1.2.0, Dan:fr-FR:custom:compact:macosLegacy:1.2.0, Yu-Shu:zh-CN:custom:compact:macosLegacy:1.2.0, Catherine:en-AU:custom:compact:macosLegacy:1.2.0, Helena:de-DE:custom:compact:macosLegacy:1.2.0, Nicky:en-US:custom:compact:macosLegacy:1.2.0, O-Ren:ja-JP:custom:compact:macosLegacy:1.2.0, Marie:fr-FR:custom:compact:macosLegacy:1.2.0, Martha:en-GB:custom:compact:macosLegacy:1.2.0, Hattori:ja-JP:custom:compact:macosLegacy:1.2.0, Aaron:en-US:custom:compact:macosLegacy:1.2.0, Gordon:en-AU:custom:compact:macosLegacy:1.2.0]
-->


mobileassetd also downloaded MacInTalk assets:

<--
mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager determineAssets:clientName:connection:downloadingTasks:message:resultTypes:queryArray:isForSpecificAsset:specificAssetId:specificAllowedDifferences:]: AXVisualSupportAgent queried for: com.apple.MobileAsset.MacinTalkVoiceAssets with returnType of: 2 with Purpose: (null)
mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[ControlManager newCatalogLoad:withPurpose:]: Catalog fileLocation: /System/Library/AssetsV2/com_apple_MobileAsset_MacinTalkVoiceAssets/com_apple_MobileAsset_MacinTalkVoiceAssets.xml
AXVisualSupportAgent: (AXAssetLoader) [com.apple.Accessibility:AXAssetLoader] MacinTalkVoiceAssets<0x*********590>: Refreshing assets. Metadata query successful
AXVisualSupportAgent: (AXAssetLoader) [com.apple.Accessibility:AXAssetLoader] MacinTalkVoiceAssets<0x*********590>: Refreshing assets. Retrieved 22 totals assets. 22 supported assets
AXVisualSupportAgent: (AXAssetLoader) [com.apple.Accessibility:AXAssetLoader] MacinTalkVoiceAssets<0x*********590>: Replacing cached assets with 22 items
-->


triald downloads a Chinese related asset:
<--
triald: (ProactiveSupport) [com.apple.triald:server] New connection to com.apple.triald.namespace-management from unknown process (518).
triald: (TrialServer) [com.apple.triald:server] TRIXPCNamespaceManagementRequestHandler 0x******880: begin statusOfDownloadForFactors:(
    "com.apple.siri.asr.assistant.zh_CN"
) withNamespace:SIRI_UNDERSTANDING_ASR_ASSISTANT fstate:(null) qos:25 completion:
triald: (TrialServer) [com.apple.triald:server] TRIXPCNamespaceManagementRequestHandler 0x******880: end statusOfDownloadForFactors:(
    "com.apple.siri.asr.assistant.zh_CN"
) withNamespace:SIRI_UNDERSTANDING_ASR_ASSISTANT fstate:(null) qos:25 completion:
-->


A Chinese Text Converter Service app is installed.

<--
20352  2    lsd: (LaunchServices) [com.apple.launchservices:default] - *****955: Checking whether application is managed at file:///System/Library/Services/ChineseTextConverterService.app/com.apple.ChineseTextConverterService
20352  2    lsd: (LaunchServices) [com.apple.launchservices:default] - *****955: Checking whether application is managed at file:///System/Library/Services/ChineseTextConverterService.app/com.apple.ChineseTextConverterService
20351  0    pkd: (libsystem_containermanager.dylib) [com.apple.containermanager:unspecified] container_create_or_lookup_for_platform: success
20351  0    pkd: (libsystem_containermanager.dylib) [com.apple.containermanager:unspecified] container_create_or_lookup_path_for_platform: success
20351  0    pkd: [com.apple.PlugInKit:discovery] [d <private>] [u XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX9B0] [<private>(<private>)] Created plugin
20351  0    pkd: [com.apple.PlugInKit:discovery] [d <private>] <private>
20352  0    lsd: (Security) SecTrustEvaluateIfNecessary
20352  14   lsd: (MobileInstallation) [com.apple.appinstallation:TransactionLog] com.apple.ChineseTextConverterService:5:5:1:1:Building bundle record for app
20352  2    lsd: (LaunchServices) [com.apple.launchservices:appinstallation] Parsed Info.plist for com.apple.ChineseTextConverterService
20352  2    lsd: (LaunchServices) [com.apple.launchservices:appinstallation] Parsed MobileInstallation data for com.apple.ChineseTextConverterService
20352  14   lsd: (MobileInstallation) [com.apple.appinstallation:TransactionLog] com.apple.ChineseTextConverterService:5:5:2:1:Built bundle record for app
20352  2    lsd: (LaunchServices) [com.apple.launchservices:default] bundle record for com.apple.ChineseTextConverterService will be registered trusted.
-->

<--
ChineseTextConverterService:

  Version:	2.1
  Obtained from:	Apple
  Last Modified:	2/4/2023, 2:46 am
  Kind:	Universal
  Signed by:	Software Signing, Apple Code Signing Certification Authority, Apple Root CA
  Location:	/System/Library/Services/ChineseTextConverterService.app
  Get Info String:	Chinese Text Converter 1.1

CIMFindInputCodeTool:

  Version:	104
  Obtained from:	Apple
  Last Modified:	2/4/2023, 2:46 am
  Kind:	Universal
  Signed by:	Software Signing, Apple Code Signing Certification Authority, Apple Root CA
  Location:	/System/Library/PrivateFrameworks/CoreChineseEngine.framework/Versions/A/SharedSupport/CIMFindInputCodeTool.app

JapaneseIM-KanaTyping:

  Version:	6.3
  Obtained from:	Apple
  Last Modified:	2/4/2023, 2:46 am
  Kind:	Universal
  Signed by:	Software Signing, Apple Code Signing Certification Authority, Apple Root CA
  Location:	/System/Library/Input Methods/JapaneseIM-KanaTyping.app

JapaneseIM-RomajiTyping:

  Version:	6.3
  Obtained from:	Apple
  Last Modified:	2/4/2023, 2:46 am
  Kind:	Universal
  Signed by:	Software Signing, Apple Code Signing Certification Authority, Apple Root CA
  Location:	/System/Library/Input Methods/JapaneseIM-RomajiTyping.app

KoreanIM:

  Version:	1.0
  Obtained from:	Apple
  Last Modified:	2/4/2023, 2:46 am
  Kind:	Universal
  Signed by:	Software Signing, Apple Code Signing Certification Authority, Apple Root CA
  Location:	/System/Library/Input Methods/KoreanIM.app
-->


Located in a 'Sample of mDNSResponder'.

<--
PrivateFrameworks/APFS.framework/Versions/A/APFS
       0x18d088000 -        0x18d08ffff  libChineseTokenizer.dylib (40) <XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXB15> /usr/lib/libChineseTokenizer.dylib
-->



Other language region references:
<--
TextInputMenuAgent: (TextInputMenuUI) _InputSwitcherStart
distnoted: [com.apple.distnoted:diagnostic] register name: com.apple.KeyboardUIModeDidChange object: kCFNotificationAnyObject token: 3*******37 pid: 493
distnoted: [com.apple.distnoted:diagnostic] register name: com.apple.Carbon.TISNotifyEnabledKeyboardInputSourcesChanged object: kCFNotificationAnyObject token: 4*******36 pid: 493
distnoted: [com.apple.distnoted:diagnostic] register name: ICNMessageTypeSoftwareInstalled object: kCFNotificationAnyObject token: 1******00 pid: 486
-->


DATA HARVESTING
A vast amount of data collected is collated and organised using a server database. Moreover, the attackers use deep learning systems to determine demographic inference from video and images. There is also a significant use of Siri to both collect audio, differentiate voices and to profile accents.

Apple:

<--
locationd: [com.apple.locationd.Core:AvengerScanner] {"msg":"CLAvengerReconciler: recreating reconciler"}
locationd: [com.apple.locationd.Position:GeneralCLX] AlsInit, server, <private>, override, 0, timeout, 10, log request/response, 0, 0
locationd: [com.apple.locationd.Core:Harvester] {"msg":"#CLAvengerObservationReporterService received avenger scanner registration"}
locationd: [com.apple.locationd.Utility:Database] {"msg":"setIncrementalVacuumEnabled", "enabled":1, "rc":"SQLITE_OK"}
locationd: [com.apple.locationd.Core:Harvester] {"msg":"#CLAvengerObservationReporterService changed state", "_currentState":1, "_currentContext.cameraForegrounded":0}
locationd: (LocationSupport) [com.apple.LocationSupport:Intersilo] {"msg":"#Manufacturing service complete", "EffectiveServiceName":"CLAvengerObservationReporterService"}
locationd: [com.apple.locationd.Core:AvengerScanner] {"msg":"CLAvengerScanner: submitClientRequestsEvent", "ClientId":"CLAvengerObservationReporterService", "analyticsEvent":"{    client = CLAvengerObservationReporterService;    requestCount = 0;    scanType = Aggressive;}"}

Google & Android: 
BlueAvengers_Geotagging_Data_Collction_V2%22&xxx=redacted_enAU
-->


DATABASE MANAGEMENT AND SERVERS

Similiar to the findings of Kaspersky's Triangulation survelliance implant, the Stealth Developer Mode uses database referencing including: schemas, operations, tables, records and transactions. Other methods are assets, assertions, flavor, templates, factories, stores, objects, schemes, parameters, graphs and namespaces. There is also the interesting use of the terms contexts, characteristics, fences and topics.

The data is gathered through a number of services including Google Tag Manager. Evidence suggests they are using Appium to automate the movement of data using runners and frameworks.

I have no idea what Windows MSRPC service is being used. There is also active use of SMB. VMWare references also appear.

<--
launchd: [pid/207 [awdd]:] uncorking exec source upfront
launchd: [pid/207 [awdd]:] created
launchd: [system/com.apple.msrpc.netlogon [230]:] service state: running
launchd: [system/com.apple.msrpc.netlogon [230]:] internal event: INIT, code = 0
launchd: [system/com.apple.msrpc.netlogon [230]:] Successfully spawned rpcsvchost[230] because ipc (socket)
launchd: [pid/230 [rpcsvchost]:] uncorking exec source upfront
launchd: [pid/230 [rpcsvchost]:] created
-->


BIOME SERVER
On Apple systems and devices I am unsure whether Biome is a legitimate Apple process. The attackers use BiomePubSub to invoke functions, auth and storage tasks to BiomeStorage, which appears to be a hidden database partician within iCloud, possibly mirrored on one of the disks. 

<--
coreduetd: (BiomeStorage) [com.apple.Biome:BiomeStorage] Successfully mapped file: /private/var/db/biome/streams/restricted/_DKEvent.App.InFocus/local/XXXXXXXXXXXXXXX offset:56 size:1048520
coreduetd: (BiomePubSub) [com.apple.Biome:BiomePubSub] <private> - subscribe
coreduetd: (BiomePubSub) [com.apple.Biome:BiomePubSub] <private> - completion
Google Chrome: (UserActivity) [com.apple.useractivity:biome-XXXXXXXX] XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX INVALIDATE	wasCurrent=true needsSave=false dirty=false sendToServer=true
-->


During the set up phases after an Apple Store full reset, the following was public folder SharePoint group was invoked. The "RealName" begins with my first name and the year 2019. 

<--
opendirectoryd[66]: [session] UID: 0, EUID: 0, GID: 0, EGID: 0, PID: 87, PROC: templateMigrator ODQueryCreateWithNode request, NodeID: XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX710, RecordType(s): dsRecTypeStandard:Groups, Attribute: dsAttrTypeStandard:RecordName, MatchType: EqualTo, Equality: CaseExact, Value(s): com.apple.sharepoint.group.1, Requested Attributes: dsAttributesStandardAll, Max Results: 1
opendirectoryd[66]: [session] queuing request to connection - XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXE62 - CFBundle 0x******7b0 </System/Library/OpenDirectory/Modules/PlistFile.bundle> (bundle, loaded)
opendirectoryd[66]: [session] ODQueryCreateWithNode completed
opendirectoryd[66]: [session] UID: 0, EUID: 0, GID: 0, EGID: 0, PID: 87, PROC: templateMigrator ODNodeCreateRecord request, NodeID: XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX710, RecordType: dsRecTypeStandard:Groups, RecordName: com.apple.sharepoint.group.1, Attributes: {
	    "dsAttrTypeNative:IsHidden" =     (
	        1
	    );
	    "dsAttrTypeNative:record_daemon_version" =     (
	        8602000
	    );
	    "dsAttrTypeStandard:GeneratedUID" =     (
	        "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX9CE"
	    );
	    "dsAttrTypeStandard:PrimaryGroupID" =     (
	        701
	    );
	    "dsAttrTypeStandard:RealName" =     (
	        "****U2019s Public Folder"
	    );
	    "dsAttrTypeStandard:RecordName" =     (
	        "com.apple.sharepoint.group.1"
	    );
	}
opendirectoryd[66]: [session] flushing dirty record '/Volumes/Macintosh HD - Data/private/var/db/dslocal/nodes/Default/groups/com.apple.sharepoint.group.1' from line 9835
-->


GEOD - MOBILE DEVICE DATABASES

IOS TRIAGE SCRIPT

I began looking for information on 'PDPlaceCacheDB', one of the databases referenced in the example below. This led me to a bash script to extract data from a 'chekcra1ned' device (https://swiftobc.com/repo/ios-logs-events-and-plist-parser), (https://blog.digital-forensics.it/2019/12/checkra1n-era-ep-5-automating.html), (https://github.com/RealityNet/ios_triage). This tool collects device information and can execute live commands on the device: date, sysctl -a, hostname, uname -a, id, df, df -ah, ifconfig -a, netstat -an, ltop, mount, ps -ef, ps aux and ioreg. 

The script can work in After First Unlock (AFU) and Before First Unlock (BFU). Additionally, it can collect data from Twitter, Skype, WhatsApp and could be easily modified to include other communication applications. The scripts name is ios_triage, the script could be acting under any of the numerous 'com.apple.*.api-triage' processes found on the devices.

The tool can also execute 'find' commands to extract file and folder names including (but not limited to):
find /private/var/mobile/Library/DataAcess -type d -name "IMAP-*"
find /private/var/mobile/Library/Mail -type f -name "*.pdf" ls
find /private/var/mobile/Library/Mail -type f -name "*.doc" ls
find /private/var/mobile/Library/Mail -type f -name "*.xls" ls
find /private/var/mobile/Library/Containers -type d -name "*@s.whatsapp.net"
find /private/var/mobile/Library/Containers -type d -name "*@g.us*"
find /private/var/ -ls

The results are stored in a seperate TXT file for each executed 'find' command.

Another option in the script is to aquire a 'BFU files' (Before First Unlock) image. It will extract files BFU and then creates a TAR file. The following is a selection of some of the file paths that can be extracted.. 

<--
/private/var/containers/Data
/private/var/containers/Shared
/private/var/containers/db/analyticsd
/private/var/containers/db/dhcpd_leases
/private/var/containers/db/dhcpclient/leases/
/private/var/containers/db/spindump/UUIDToBinaryLocations
/private/var/containers/db/systemstats
/private/var/containers/installd/Library/Logs/MobileInstallation/
/private/var/containers/installd/Library/MobileInstallation/
/private/var/containers/log/
/private/var/containers/logs/
/private/var/mobile/Library/Accounts/
/private/var/mobile/Library/AggregateDictionary/ADDataStore.sqlitedb
/private/var/mobile/Library/AppConduit/AvailableApps.plist
/private/var/mobile/Library/AvailableCompanionApps.plist
/private/var/mobile/Library/ApplicationSync/AssetSortOrder.plist
/private/var/mobile/Library/Caches/com.apple.mobilesms.compose/
/private/var/mobile/Library/SpringBoard/LockBackgroundThumbnail.jpg
/private/var/mobile/Library/Synced Preferences/
/private/var/mobile/Library/TCC/
/private/var/mobile/Library/UserNotifications/
/private/var/mobile/Library/UserConfigurationProfiles/
/private/var/mobile/Library/Voicemail/voicemail.db
/private/var/mobile/Library/Media/iTunes_Control/iTunes/
/private/var/preferences/
/private/var/root/Library/Caches/locationd/cache.plist
/private/var/root/Library/Caches/locationd/clients.plist
/private/var/root/Library/Preferences
/private/var/root/Library/Lockdown/
/private/var/root/Library/Logs/MobileContainerManager/
/private/var/root/Library/MobileContainerManager/containers.sqlite3
/private/var/wireless/Library/Databases/CellularUsage.db
/private/var/wireless/Library/Databases/DataUsage.sqlite3
/private/var/wireless/Library/Preferences/
-->


The script can also create a TAR file of the '/private' folder. It says excluding Bundles and MobileAssets, however I am sure it could be tweaked to include them. It can also extract and process files and parse them with sysdiagnose scripts, Mobile Installation Logs Parser and APOLLO. Under AFU it can extract a larger range of files because they are not in use. The failure of files in use return "Option not permitted". 


GEOURLs, GEO FILE PATHS CACHES AND DATABASES 

These GEO file paths were captured in a Mac log.

<--
locationd: [com.apple.locationd.Core:Client] {"msg":"Creating subscription due to demand", "type":"19CLFenceSubscription"}
locationd: (XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX857) GEOFilePaths 0x******f50
{
    AnalyticsPipelineDB = "/var/db/locationd/Library/Containers/com.apple.geod/Data/Library/Caches/com.apple.geod/Vault/AP.db";
    AnalyticsUploadFolder = "/var/db/locationd/Library/Containers/com.apple.geod/Data/Library/Caches/com.apple.geod/Analytics";
    DaemonSystemCacheFolder = "/var/db/locationd/Library/Containers/com.apple.geod/Data/Library/Caches/com.apple.geod";
    DaemonUserCacheFolder = "/var/db/locationd/Library/Containers/com.apple.geod/Data/Library/Caches/com.apple.geod";
    DevResourcesFolder = "/var/db/locationd/Library/Caches/GeoServices/DevResources";
    ExperimentsDB = "/var/db/locationd/Library/Caches/GeoServices/Experiments.pbd";
    ImageServiceDB = "/var/db/locationd/Library/Containers/com.apple.geod/Data/Library/Caches/com.apple.geod/Vault/ImageService.db";
    LocationShiftDB = "/var/db/locationd/Library/Containers/com.apple.geod/Data/Library/Caches/com.apple.geod/Vault/LocationShift.db";
    MapsSuggestionsFolder = "/var/db/locationd/Library/Containers/com.apple.geod/Data/Library/Caches/com.apple.Maps.Suggestions";
    MobileAssetsFolder = "/var/db/locationd/Library/Containers/com.apple.geod/Data/Library/Caches/com.apple.geod/MAResources";
    NetworkDefaultsDB = "/var/db/locationd/Library/Caches/GeoServices/networkDefaults.plist";
    PDPlaceCacheDB = "/var/db/locationd/Library/Containers/com.apple.geod/Data/Library/Caches/com.apple.geod/Vault/PDPlaceCache.db";
    PreferencesFolder = "/var/db/locationd/Library/Containers/com.apple.geod/Data/Library/Preferences";
    RegionalResourcesContainer = "/var/db/locationd/Library/Caches/GeoServices";
    RequestCountPowerLogDB = "/var/db/locationd/Library/Caches/GeoServices/PLReqCounters.enc";
    RequestCountsDB = "/var/db/locationd/Library/Caches/GeoServices/ReqCount.db";
    RequestResponseLogDB = "/var/db/locationd/Library/Caches/GeoServices/RRLogs/RRLogs.db";
    RequestResponseLogFolder = "/var/db/locationd/Library/Caches/GeoServices/RRLogs";
    ResourcesContainer = "/var/db/locationd/Library/Caches/GeoServices";
    SearchAttributionDB = "/var/db/locationd/Library/Caches/GeoServices/SearchAttribution.pbd";
    SearchAttributionFolder = "/var/db/locationd/Library/Caches/GeoServices/SearchAttribution";
    SharedSystemCacheFolder = "/var/db/locationd/Library/Caches/GeoServices";
    SharedUserCacheFolder = "/var/db/locationd/Library/Caches/GeoServices";
    SystemConfigDB = "/var/db/locationd/Library/Containers/com.apple.geod/Data/Library/Caches/com.apple.geod/GEOSystemConfigStore.db";
    SystemDirectConfigDB = "/var/db/locationd/Library/Caches/GeoServices/DirectReadConfigStore.plist";
    TileCacheContainer = "/var/db/locationd/Library/Containers/com.apple.geod/Data/Library/Caches/com.apple.geod";
    TileCacheFolder = "/var/db/locationd/Library/Containers/com.apple.geod/Data/Library/Caches/com.apple.geod/MapTiles";
    UserConfigDB = "/var/db/locationd/Library/Containers/com.apple.geod/Data/Library/Caches/com.apple.geod/GEOConfigStore.db";
    UserDirectConfigDB = "/var/db/locationd/Library/Caches/GeoServices/DirectReadUserConfigStore.plist";
    geoServicesCacheDirectoryPath = "/var/db/locationd/Library/Caches/GeoServices";
    homeDirectory = "/var/db/locationd/Library/Containers/com.apple.geod/Data";
}
-->


GEOURLs

Mentioned in the logs are a list of GEO related URLs. I do not know the context for their use.

<--
locationd: (XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX857) GEOURLs 0x******a60
{
    "Address Correction Init" =     {
        "config_key" = GEOURLAddressCorrectionInitURL;
        "config_url" = "<null>";
        description = "Address Correction Init";
        "manifest_url" = "https://gsp47-ssl.ls.apple.com/ac";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "https://gsp47-ssl.ls.apple.com/ac";
        source = 6;
        "source_description" = "Resource Manifest";
    };
    "Address Correction Tagged Location" =     {
        "config_key" = AddressCorrectionTaggedLocationURL;
        "config_url" = "<null>";
        description = "Address Correction Tagged Location";
        "manifest_url" = "https://gsp47-ssl.ls.apple.com/ac";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "https://gsp47-ssl.ls.apple.com/ac";
        source = 6;
        "source_description" = "Resource Manifest";
    };
    "Address Correction Update" =     {
        "config_key" = GEOURLAddressCorrectionUpdateURL;
        "config_url" = "<null>";
        description = "Address Correction Update";
        "manifest_url" = "https://gsp47-ssl.ls.apple.com/ac";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "https://gsp47-ssl.ls.apple.com/ac";
        source = 6;
        "source_description" = "Resource Manifest";
    };
    Announcements =     {
        "config_key" = GEOVoltaireAnnouncementsURL;
        "config_url" = "<null>";
        description = Announcements;
        "manifest_url" = "https://gspe35-ssl.ls.apple.com/config/announcements?environment=prod";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "https://gspe35-ssl.ls.apple.com/config/announcements?environment=prod";
        source = 6;
        "source_description" = "Resource Manifest";
    };
    "Background Dispatcher" =     {
        "config_key" = BackgroundDispatcherURL;
        "config_url" = "<null>";
        description = "Background Dispatcher";
        "manifest_url" = "https://gsp57-ssl-background.ls.apple.com/dispatcher.arpc";
        mptcp = 1;
        proxied = 0;
        "resolved_url" = "https://gsp57-ssl-background.ls.apple.com/dispatcher.arpc";
        source = 6;
        "source_description" = "Resource Manifest";
    };
    "Background Reverse Geocoder" =     {
        "config_key" = BackgroundRevGeoURL;
        "config_url" = "<null>";
        description = "Background Reverse Geocoder";
        "manifest_url" = "https://gsp57-ssl-revgeo.ls.apple.com/dispatcher.arpc";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "https://gsp57-ssl-revgeo.ls.apple.com/dispatcher.arpc";
        source = 6;
        "source_description" = "Resource Manifest";
    };
    "Batch Reverse Geocoder" =     {
        "config_key" = BatchRevGeoPlaceRequestURL;
        "config_url" = "<null>";
        description = "Batch Reverse Geocoder";
        "manifest_url" = "https://gsp36-ssl.ls.apple.com/revgeo_pr.arpc";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "https://gsp36-ssl.ls.apple.com/revgeo_pr.arpc";
        source = 6;
        "source_description" = "Resource Manifest";
    };
    "Batch Reverse Geocoder (Legacy)" =     {
        "config_key" = GEOVoltaireBatchReverseGeocoderURL;
        "config_url" = "<null>";
        description = "Batch Reverse Geocoder (Legacy)";
        "manifest_url" = "https://gsp36-ssl.ls.apple.com/revgeo.arpc";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "https://gsp36-ssl.ls.apple.com/revgeo.arpc";
        source = 6;
        "source_description" = "Resource Manifest";
    };
    "Batch Traffic Probe" =     {
        "config_key" = BatchTrafficProbeURL;
        "config_url" = "<null>";
        description = "Batch Traffic Probe";
        "manifest_url" = "https://gsp10-ssl.ls.apple.com/hvr/v2/loc";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "https://gsp10-ssl.ls.apple.com/hvr/v2/loc";
        source = 6;
        "source_description" = "Resource Manifest";
    };
    "Blue POI" =     {
        "config_key" = BluePOIURL;
        "config_url" = "<null>";
        description = "Blue POI";
        "manifest_url" = "https://gsp57-ssl-locus.ls.apple.com/dispatcher.arpc";
        mptcp = 1;
        proxied = 0;
        "resolved_url" = "https://gsp57-ssl-locus.ls.apple.com/dispatcher.arpc";
        source = 6;
        "source_description" = "Resource Manifest";
    };
    "Business Portal Base URL" =     {
        "config_key" = BusinessPortalBaseURL;
        "config_url" = "<null>";
        description = "Business Portal Base URL";
        "manifest_url" = "https://mapsconnect.apple.com/business/ui/claimPlace";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "https://mapsconnect.apple.com/business/ui/claimPlace";
        source = 6;
        "source_description" = "Resource Manifest";
    };
    "Community Token Authentication" =     {
        "config_key" = GEOTokenAuthenticationURL;
        "config_url" = "<null>";
        description = "Community Token Authentication";
        "manifest_url" = "<null>";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "<null>";
        source = 0;
        "source_description" = None;
    };
    "Country Code" =     {
        "config_key" = GEOVoltaireCurrentCountryURL;
        "config_url" = "<null>";
        description = "Country Code";
        "manifest_url" = "<null>";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "https://gspe1-ssl.ls.apple.com/pep/gcc";
        source = 7;
        "source_description" = "Default [Baked-in]";
    };
    Directions =     {
        "config_key" = GEOVoltaireDirectionsURL;
        "config_url" = "<null>";
        description = Directions;
        "manifest_url" = "https://gsp-ssl.ls.apple.com/directions.arpc";
        mptcp = 1;
        proxied = 0;
        "resolved_url" = "https://gsp-ssl.ls.apple.com/directions.arpc";
        source = 6;
        "source_description" = "Resource Manifest";
    };
    ETA =     {
        "config_key" = GEOVoltaireETAURL;
        "config_url" = "<null>";
        description = ETA;
        "manifest_url" = "https://gsp-ssl.ls.apple.com/directions.arpc";
        mptcp = 1;
        proxied = 0;
        "resolved_url" = "https://gsp-ssl.ls.apple.com/directions.arpc";
        source = 6;
        "source_description" = "Resource Manifest";
    };
    Experiments =     {
        "config_key" = ExperimentsURL;
        "config_url" = "<null>";
        description = Experiments;
        "manifest_url" = "https://gsp-ssl.ls.apple.com/ab.arpc";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "https://gsp-ssl.ls.apple.com/ab.arpc";
        source = 6;
        "source_description" = "Resource Manifest";
    };
    "Image Service" =     {
        "config_key" = ImageServiceURL;
        "config_url" = "<null>";
        description = "Image Service";
        "manifest_url" = "<null>";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "<null>";
        source = 0;
        "source_description" = None;
    };
    "Location Shift (polynomial)" =     {
        "config_key" = GEOVoltairePolyLocationShiftURL;
        "config_url" = "<null>";
        description = "Location Shift (polynomial)";
        "manifest_url" = "<null>";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "<null>";
        source = 0;
        "source_description" = None;
    };
    "LogMessage Usage" =     {
        "config_key" = GEOVoltaireLogMessageUsageURL;
        "config_url" = "<null>";
        description = "LogMessage Usage";
        "manifest_url" = "https://gsp64-ssl.ls.apple.com/a/v2/use";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "https://gsp64-ssl.ls.apple.com/a/v2/use";
        source = 6;
        "source_description" = "Resource Manifest";
    };
    "LogMessage Usage v3" =     {
        "config_key" = GEOLogMessageUsageV3URL;
        "config_url" = "<null>";
        description = "LogMessage Usage v3";
        "manifest_url" = "https://gsp64-ssl.ls.apple.com/hvr/v3/use";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "https://gsp64-ssl.ls.apple.com/hvr/v3/use";
        source = 6;
        "source_description" = "Resource Manifest";
    };
    "Maps Auth Service Proxy URL" =     {
        "config_key" = GEOMapsProxyURL;
        "config_url" = "<null>";
        description = "Maps Auth Service Proxy URL";
        "manifest_url" = "<null>";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "<null>";
        source = 0;
        "source_description" = None;
    };
    "Maps Authentication for client feature flags URL" =     {
        "config_key" = GEOMapsClientFeatureFlagsURL;
        "config_url" = "<null>";
        description = "Maps Authentication for client feature flags URL";
        "manifest_url" = "<null>";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "<null>";
        source = 0;
        "source_description" = None;
    };
    "Munin Base" =     {
        "config_key" = GEOMuninBaseURL;
        "config_url" = "<null>";
        description = "Munin Base";
        "manifest_url" = "<null>";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "<null>";
        source = 0;
        "source_description" = None;
    };
    "Network Defaults" =     {
        "config_key" = GEONetworkDefaultsURL;
        "config_url" = "<null>";
        description = "Network Defaults";
        "manifest_url" = "<null>";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "https://configuration.ls.apple.com/config/defaults";
        source = 7;
        "source_description" = "Default [Baked-in]";
    };
    "Network Selection Harvest Data" =     {
        "config_key" = GEONetworkSelectionHarvestURL;
        "config_url" = "<null>";
        description = "Network Selection Harvest Data";
        "manifest_url" = "<null>";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "<null>";
        source = 0;
        "source_description" = None;
    };
    "POI Busyness Data" =     {
        "config_key" = BusynessDataURL;
        "config_url" = "<null>";
        description = "POI Busyness Data";
        "manifest_url" = "https://gsp53-ssl.ls.apple.com/hvr/rt_poi_activity";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "https://gsp53-ssl.ls.apple.com/hvr/rt_poi_activity";
        source = 6;
        "source_description" = "Resource Manifest";
    };
    "PlaceData Dispatcher" =     {
        "config_key" = DispatcherURL;
        "config_url" = "<null>";
        description = "PlaceData Dispatcher";
        "manifest_url" = "https://gsp-ssl.ls.apple.com/dispatcher.arpc";
        mptcp = 1;
        proxied = 0;
        "resolved_url" = "https://gsp-ssl.ls.apple.com/dispatcher.arpc";
        source = 6;
        "source_description" = "Resource Manifest";
    };
    "Pressure Probe Data" =     {
        "config_key" = PressureDataURL;
        "config_url" = "<null>";
        description = "Pressure Probe Data";
        "manifest_url" = "https://gsp10-ssl.ls.apple.com/hvr/cpr";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "https://gsp10-ssl.ls.apple.com/hvr/cpr";
        source = 6;
        "source_description" = "Resource Manifest";
    };
    "Proactive Routing" =     {
        "config_key" = ProactiveRoutingURL;
        "config_url" = "<null>";
        description = "Proactive Routing";
        "manifest_url" = "https://gsp-ssl-commute.ls.apple.com/directions.arpc";
        mptcp = 1;
        proxied = 0;
        "resolved_url" = "https://gsp-ssl-commute.ls.apple.com/directions.arpc";
        source = 6;
        "source_description" = "Resource Manifest";
    };
    "RAP Categories" =     {
        "config_key" = GEOLocalizedCategoriesURL;
        "config_url" = "<null>";
        description = "RAP Categories";
        "manifest_url" = "https://gspe21-ssl.ls.apple.com/config/com.apple.GEO.BusinessLocalizedCategories-270.plist";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "https://gspe21-ssl.ls.apple.com/config/com.apple.GEO.BusinessLocalizedCategories-270.plist";
        source = 6;
        "source_description" = "Resource Manifest";
    };
    "RAP Opt-Ins" =     {
        "config_key" = ProblemOptInURL;
        "config_url" = "<null>";
        description = "RAP Opt-Ins";
        "manifest_url" = "https://jana-mpr.ls.apple.com/grp/oi";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "https://jana-mpr.ls.apple.com/grp/oi";
        source = 6;
        "source_description" = "Resource Manifest";
    };
    "RAP Status" =     {
        "config_key" = GEOVoltaireProblemStatusURL;
        "config_url" = "<null>";
        description = "RAP Status";
        "manifest_url" = "https://sundew.ls.apple.com/grp/st";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "https://sundew.ls.apple.com/grp/st";
        source = 6;
        "source_description" = "Resource Manifest";
    };
    "RAP Submission" =     {
        "config_key" = GEOVoltaireProblemURL;
        "config_url" = "<null>";
        description = "RAP Submission";
        "manifest_url" = "https://sundew.ls.apple.com/v1/feedback/submission.arpc";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "https://sundew.ls.apple.com/v1/feedback/submission.arpc";
        source = 6;
        "source_description" = "Resource Manifest";
    };
    "RAP V4 Lookup" =     {
        "config_key" = GEOFeedbackLookupURL;
        "config_url" = "<null>";
        description = "RAP V4 Lookup";
        "manifest_url" = "https://gsp57-ssl.ls.apple.com/feedback.arpc";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "https://gsp57-ssl.ls.apple.com/feedback.arpc";
        source = 6;
        "source_description" = "Resource Manifest";
    };
    "RAP V4 Submission" =     {
        "config_key" = GEOFeedbackSubmissionURL;
        "config_url" = "<null>";
        description = "RAP V4 Submission";
        "manifest_url" = "https://sundew.ls.apple.com/v1/feedback/submission.arpc";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "https://sundew.ls.apple.com/v1/feedback/submission.arpc";
        source = 6;
        "source_description" = "Resource Manifest";
    };
    "RAP Web Module" =     {
        "config_key" = GEORAPWebModuleBaseURL;
        "config_url" = "<null>";
        description = "RAP Web Module";
        "manifest_url" = "https://cdn.apple-mapkit.com/rap";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "https://cdn.apple-mapkit.com/rap";
        source = 6;
        "source_description" = "Resource Manifest";
    };
    "Ratings and Photos Submission URL" =     {
        "config_key" = GEOEnrichmentSubmissionURL;
        "config_url" = "<null>";
        description = "Ratings and Photos Submission URL";
        "manifest_url" = "https://sundew.ls.apple.com/v1/feedback/submission.arpc";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "https://sundew.ls.apple.com/v1/feedback/submission.arpc";
        source = 6;
        "source_description" = "Resource Manifest";
    };
    "Realtime Traffic Probe" =     {
        "config_key" = RealtimeTrafficProbeURL;
        "config_url" = "<null>";
        description = "Realtime Traffic Probe";
        "manifest_url" = "https://gsp9-ssl.apple.com/hvr/v2/rtloc";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "https://gsp9-ssl.apple.com/hvr/v2/rtloc";
        source = 6;
        "source_description" = "Resource Manifest";
    };
    "Resource Manifest" =     {
        "config_key" = GEOVoltaireResourceManifestURL;
        "config_url" = "<null>";
        description = "Resource Manifest";
        "manifest_url" = "<null>";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "https://gspe35-ssl.ls.apple.com/geo_manifest/dynamic/config%{DEVICE_QUERY}";
        source = 7;
        "source_description" = "Default [Baked-in]";
    };
    "Reverse Geocoder Versions" =     {
        "config_key" = GEOReverseGeocoderVersionFileURL;
        "config_url" = "<null>";
        description = "Reverse Geocoder Versions";
        "manifest_url" = "https://gspe21-ssl.ls.apple.com/config/revgeo-version-11.plist";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "https://gspe21-ssl.ls.apple.com/config/revgeo-version-11.plist";
        source = 6;
        "source_description" = "Resource Manifest";
    };
    "Search Manifest" =     {
        "config_key" = GEOVoltaireSearchAttributionManifestURL;
        "config_url" = "<null>";
        description = "Search Manifest";
        "manifest_url" = "https://gspe21-ssl.ls.apple.com/config/search-attribution-843";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "https://gspe21-ssl.ls.apple.com/config/search-attribution-843";
        source = 6;
        "source_description" = "Resource Manifest";
    };
    "Simple ETA" =     {
        "config_key" = GEOURLSimpleETAURL;
        "config_url" = "<null>";
        description = "Simple ETA";
        "manifest_url" = "https://gsp-ssl.ls.apple.com/directions.arpc";
        mptcp = 1;
        proxied = 0;
        "resolved_url" = "https://gsp-ssl.ls.apple.com/directions.arpc";
        source = 6;
        "source_description" = "Resource Manifest";
    };
    "Spatial Lookup" =     {
        "config_key" = SpatialLookupURL;
        "config_url" = "<null>";
        description = "Spatial Lookup";
        "manifest_url" = "https://gsp51-ssl.ls.apple.com/api/v1.0/poi/data";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "https://gsp51-ssl.ls.apple.com/api/v1.0/poi/data";
        source = 6;
        "source_description" = "Resource Manifest";
    };
    "UGC Log Discard" =     {
        "config_key" = GEOUGCDeleteServiceURL;
        "config_url" = "<null>";
        description = "UGC Log Discard";
        "manifest_url" = "https://sundew.ls.apple.com/v1/log_message";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "https://sundew.ls.apple.com/v1/log_message";
        source = 6;
        "source_description" = "Resource Manifest";
    };
    "Usage v3 for cohort session messages" =     {
        "config_key" = AnalyticsCohortSessionURL;
        "config_url" = "<null>";
        description = "Usage v3 for cohort session messages";
        "manifest_url" = "https://gsp64-ssl.ls.apple.com/hvr/v3/use";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "https://gsp64-ssl.ls.apple.com/hvr/v3/use";
        source = 6;
        "source_description" = "Resource Manifest";
    };
    "Usage v3 for long session messages" =     {
        "config_key" = AnalyticsLongSessionURL;
        "config_url" = "<null>";
        description = "Usage v3 for long session messages";
        "manifest_url" = "https://gsp64-ssl.ls.apple.com/hvr/v3/use";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "https://gsp64-ssl.ls.apple.com/hvr/v3/use";
        source = 6;
        "source_description" = "Resource Manifest";
    };
    "Usage v3 for sessionless messages" =     {
        "config_key" = AnalyticsSessionlessURL;
        "config_url" = "<null>";
        description = "Usage v3 for sessionless messages";
        "manifest_url" = "https://gsp64-ssl.ls.apple.com/hvr/v3/use";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "https://gsp64-ssl.ls.apple.com/hvr/v3/use";
        source = 6;
        "source_description" = "Resource Manifest";
    };
    "Usage v3 for short session messages" =     {
        "config_key" = AnalyticsShortSessionURL;
        "config_url" = "<null>";
        description = "Usage v3 for short session messages";
        "manifest_url" = "https://gsp64-ssl.ls.apple.com/hvr/v3/use";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "https://gsp64-ssl.ls.apple.com/hvr/v3/use";
        source = 6;
        "source_description" = "Resource Manifest";
    };
    "Web Module Base" =     {
        "config_key" = GEOWebModuleBaseURL;
        "config_url" = "<null>";
        description = "Web Module Base";
        "manifest_url" = "https://maps.apple.com";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "https://maps.apple.com";
        source = 6;
        "source_description" = "Resource Manifest";
    };
    "WiFi Connection Quality Probe" =     {
        "config_key" = WiFiConnectionQualityProbeURL;
        "config_url" = "<null>";
        description = "WiFi Connection Quality Probe";
        "manifest_url" = "https://gsp10-ssl.ls.apple.com/hvr/wcq";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "https://gsp10-ssl.ls.apple.com/hvr/wcq";
        source = 6;
        "source_description" = "Resource Manifest";
    };
    "WiFi Quality Service" =     {
        "config_key" = WiFiQualityURL;
        "config_url" = "<null>";
        description = "WiFi Quality Service";
        "manifest_url" = "https://gsp85-ssl.ls.apple.com/wifi_request";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "https://gsp85-ssl.ls.apple.com/wifi_request";
        source = 6;
        "source_description" = "Resource Manifest";
    };
    "WiFi Tile Service" =     {
        "config_key" = WiFiTileURL;
        "config_url" = "<null>";
        description = "WiFi Tile Service";
        "manifest_url" = "https://gspe85-ssl.ls.apple.com/wifi_request_tile";
        mptcp = 0;
        proxied = 0;
        "resolved_url" = "https://gspe85-ssl.ls.apple.com/wifi_request_tile";
        source = 6;
        "source_description" = "Resource Manifest";
    };
}
com.apple.geod: (GeoServices) [com.apple.GeoServices:GEOPlatform] Advanced Map Support: YES
-->


Some of geod files mentioned in the BTLEServer check on VirusTotal also match filenames from our Mac logs below. BTLEServer is discussed in the section BTLE SERVER APP.

<--
locationd: (XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX857) <GEOResourceManifestManager 0x******560>
{
    "Auth Token State" =     {
        "Has MAT" = 0;
        "Has MRT" = 0;
    };
    "Configured Environment" = prod;
    "Downloaded Resources" =     (
        "streaks_hz-1@2x.png",
        "cemetery-15.png",
        "sky20Grey1-6@2x.png",
        "globe-default-6438@2x.styl",
        "scene-812.styl",
        "LandCoverGradient9-1.png",
        "sky20Grey3-5@2x.png",
        "sky20Grey2-5@2x.png",
        "night-cemetery-2.png",
        "water-16.png",
        "globe-default-iosmac-1614.styl",
        "water-16@2x.png",
        "night-DetailedLandCoverSand-1.png",
        "hybrid-iosmac-2038.styl",
        "venues-ceiling-2.png",
        "no_data-2.png",
        "default-iosmac-4752@2x.styl",
        "Default_Shields-586@2x.iconconfigpack",
        "hybrid-6694@2x.styl",
        "sand-1@2x.png",
        "LocalizationStyleAttributes-8.plist",
        "concrete-17.png",
        "park-16.png",
        "regional_vehicle_info-7.pb",
        "night-water-2.png",
        "tomtom-mask-4@2x.png",
        "LandCoverGradient9-1@2x.png",
        "LandCoverGradient8-1@2x.png",
        "lane_change_chevron-1@2x.png",
        "RealisticRoadLocalRoad-1@2x.png",
        "concrete-17@2x.png",
        "supportedCountriesEVDirections-16.plist",
        "Default-12854.iconmappack",
        "lane_change_chevron-1.png",
        "southpole-1.c3h",
        "cemetery-15@2x.png",
        "globe-default-6464.styl",
        "land-carplay-1.png",
        "DetailedLandCoverPavedArea-1@2x.png",
        "lane_change_chevron_gradient-1.png",
        "scene-789@2x.styl",
        "tomtom-mask-3.png",
        "LandCoverGradient8-1.png",
        "park-16@2x.png",
        "road-noise-light-1@2x.png",
        "default-search-4666@2x.styl",
        "land-carplay-1@2x.png",
        "white-1@2x.png",
        "SFShieldsSemicondensed-Bold-1.otf",
        "road-noise-light-1.png",
        "night-RealisticRoadLocalRoad-1@2x.png",
        "Default_Shields-1480.iconconfigpack",
        "supportedCountriesCommute-1.plist",
        "Default_Icons-12922@2x.iconconfigpack",
        "default-38690@2x.styl",
        "night-DetailedLandCoverPavedArea-2.png",
        "sand-1.png",
        "LandCoverGradient16-1@2x.png",
        "SFDisplayShields-CompressedBold-1.otf",
        "golf_course-15@2x.png",
        "default-36117.styl",
        "no_data-2@2x.png",
        "SFDisplayShields-Bold-1.otf",
        "northpole-1.c3h",
        "hybrid-iosmac-2027@2x.styl",
        "Guides_Icons_Default-272@2x.icondatapack",
        "road-noise-1@2x.png",
        "transparent-1.png",
        "southpole_0_0_0-1.c3b",
        "Default-13971@2x.iconmappack",
        "RealisticRoadHighway-1@2x.png",
        "tunnel_shine-1.png",
        "night-golf_course-2.png",
        "Default_Icons-12774@2x.icondatapack",
        "LandCoverGradient1-1@2x.png",
        "Default_Icons-12514.icondatapack",
        "publisher_attribution_dot_coms-70.pb",
        "Guides_Icons_Default-273@2x.iconconfigpack",
        "sky20Grey4-6.png",
        "northpole_0_0_0-1.c3b",
        "night-park-2.png",
        "RealisticRoadHighway-1.png",
        "night-RealisticRoadLocalRoad-1.png",
        "sky20Grey0-5@2x.png",
        "night-land-2@2x.png",
        "streaks_lz-1@2x.png",
        "POITypeMapping-2.json",
        "SFShieldsCondensed-Bold-1.otf",
        "sky20Grey2-5.png",
        "night-land-carplay-1@2x.png",
        "night-park-2@2x.png",
        "LandCoverGradient16-1.png",
        "Default_Shields-1383.icondatapack",
        "supportedCountriesTraffic-5.plist",
        "sky20Grey0-5.png",
        "DetailedLandCoverPavedArea-1.png",
        "checker-1@2x.png",
        "streaks_hz-1.png",
        "Guides_Icons_Default-277.icondatapack",
        "Default_Icons-12646.iconconfigpack",
        "checker-1.png",
        "lane_change_chevron_gradient-1@2x.png",
        "supportedCountriesDirections-20.plist",
        "clut-night-2.png",
        "night-water-2@2x.png",
        "golf_course-15.png",
        "white-1.png",
        "Guides_Icons_Default-278.iconconfigpack",
        "sky20Grey5-6.png",
        "globe-default-iosmac-1602@2x.styl",
        "land-18.png",
        "localizationRegions-4.plist",
        "night-RealisticRoadHighway-1@2x.png",
        "default-iosmac-4755.styl",
        "streaks_lz-1.png",
        "LandCoverGradient1-1.png",
        "supportedCountriesAvoidStairs-3.plist",
        "sky20Grey5-6@2x.png",
        "sky20Grey4-6@2x.png",
        "night-golf_course-2@2x.png",
        "supportedEVInfo-16.json",
        "night-concrete-1@2x.png",
        "transparent-1@2x.png",
        "night-DetailedLandCoverPavedArea-2@2x.png",
        "road-noise-2.png",
        "venues-ceiling-1@2x.png",
        "hybrid-6717.styl",
        "night-concrete-1.png",
        "publisher_attribution_manifest_index-57.pb",
        "RealisticRoadLocalRoad-1.png",
        "land-19@2x.png",
        "night-DetailedLandCoverSand-1@2x.png",
        "default-search-4213.styl",
        "sky20Grey1-6.png",
        "night-land-carplay-1.png",
        "night-RealisticRoadHighway-1.png",
        "night-cemetery-2@2x.png",
        "tunnel_shine-1@2x.png",
        "altitude-1042.xml",
        "Default_Shields-569@2x.icondatapack",
        "night-land-2.png",
        "sky20Grey3-5.png"
    );
    "Has Resource Manifest" = YES;
    "Tile Group Environment" = prod;
    "Tile Group ID" = "https://gspe35-ssl.ls.apple.com/geo_manifest/dynamic/config?application=geod&application_version=1&country_code=AU&hardware=Macmini9,1&os=osx&os_build=22E252&os_version=13.3:2304034:11:scl=1,2&scn=2&dsid=0";
}
-->


BTLE SERVER APP

When the BTLEServer.app file was checked on VirusTotal (https://www.virustotal.com/gui/file/43dd278bd05671ea48515534cbfa30424cbf0ce64dd7f4629fe93f1846689c39/details) it also contained a Windows file zXXjvl1P.exe.

Along with two bundled files:

43dd278bd05671ea48515534cbfa30424cbf0ce64dd7f4629fe93f1846689c39~.arm64-2147483650

File Header: x86_64
File Type: executable
Magic: 0xfeedfacf
Req Architecture: x86_64
Sub Architecture: x86_64_ALL
Reserved: 0x0

43dd278bd05671ea48515534cbfa30424cbf0ce64dd7f4629fe93f1846689c39~.x64

File Header: ARM64
File Type: executable
Magic: 0xfeedfacf
Req Architecture: ARM64
sub Architecture: ARM64E
Reserved: 0x0

Files written by the app:
/Pictures/Photos Library.photoslibrary/resourcescloudsharing/caches
/Pictures/Photos Library.photoslibrary/resourcescloudsharing/caches/diskcacherepository.plist

Dropped file:
python3 file: https://www.virustotal.com/gui/file/932d5b3338c3845294727ff6a7353b87061b23935daeb9e9fef941bfe230887d/details

Wrote:
Library/Preferences/SystemConfiguration/com.apple.smb.server.plist.lock

/var/folders/4c/.../T/com.apple.geod/TemporaryFiles/(A Document Being Saved By)
ActiveTileGroup.pad
GEOCacheStore.plist
LocalizationStyleAttributes-8.plist
networkDefaults.plist
ResourceManifest.pbd 
SearchAttribution.pbd 
altitude-952.xml
default-34707.styl
default-37315@2x.styl
globe-default-5822.styl
hybrid-6072@x2x.styl
hybrid-6075.styl
scene-773@2x.styl

Shell Commands
/Users/user1/Desktop/python3

Process Tree
/Users/user1/Desktop/python3
/user/libexec/pkd


The plist for the BTLEServer shows numerous ways communication can be intercepted and tampered with, for example, the ability access-calls and modify-calls.

<--
com.apple.BTLEServer

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http: //www.apple.com/DTDs/PropertyList-1.0.dtd"> 
<plist version="1.0"> 
<dict> 
	<key>com.apple.BTServer.allowRestrictedServices</key>
	<true/> 
	<key>com.apple.BTServer.le.att</key> 
	<true/> 
	<key>com.apple.Contacts.database-allow</key> 
	<true/> 
	<key>com.apple.DiagnosticExtensions.BluetoothHeadset</key> 
	<true/> 
	<key>com.apple.accessories.transport.allowauth</key> 
	<true/> 
	<key>com.apple.accessoryupdater.uarp</key> 
	<true/>
	<key>com.apple.bluetooth.system</key> 
	<true/>
	<key>com.apple.bulletinboard.observer</key> 
	<true/>
	<key>com.apple.corespeech.xpc</key> 
	<true/>
	<key>com.apple.corespeechd.activation</key> 
	<true/>
	<key>com.apple.developer.device-information.user-assigned-device-name</key> 
	<true/>
	<key>com.apple.donotdisturb.service</key> 
	<true/>
	<key>com.apple.hid.manager.user-access-device</key> 
	<true/>
	<key>com.apple.hid.manager.user-access-keyboard</key> 
	<true/>
	<key>com.apple.private.corespeech.xpc</key> 
	<true/>
	<key>com.apple.private.corespeechd.activation</key> 
	<true/> 
	<key>com.apple.private.donotdisturb.behavior.resolution.client-identifiers</key>
	<array>
		<string>com.apple.BTLEServer.ANCS</string> 
	</array> 
	<key>com.apple.private.donotdisturb.state.request.client-identifiers</key>
	<array>
		<string>com.apple.BTLEServer.ANCS</string> 
	</array> 
	<key>com.apple.private.sandbox.profile:embedded</key>
	<string>temporary-sandbox</string> 
	<key>com.apple.private.security.storage.CallHistory</key> 
	<true/> 
	<key>com.apple.private.siri.activation</key> 
	<true/>
	<key>com.apple.private.tcc.allow</key> 
	<array>
		<string>kTCCServiceAddressBook</string> 
		<string>kTCCServiceBluetoothPeripheral</string>
	</array> 
	<key>com.apple.security.exception.files.absolute-path.read-only</key> 
	<array>
		<string>/private/var/preferences/com.apple.networkd.plist</string> 
		<string>private/var/containers/Bundle/Application/</string>
		<string>/private var containers/Data/System/</string> 
	<string>/usr/sbin</string>
	</array> 
	<key>com.apple.security.exception.files.absolute-path.read-write</key>
	<array>
		<string>/private/var/db/accessoryupdater/uarp/</string> 
		<string>/private/var/tmp/</string>
	</array> 
	<key>com.apple.security.exception.files.home-relative-path.read-write</key> 
	<array>
		<string>/Library/CallHistoryDB/</string> 
		<string>/Library/AddressBook/</string> 
		<string>/Library/Caches/GeoServices/</string> 
		<string>/Library/Logs/Bluetooth/</string>
	</array>
	<key>com.apple.security.exception.iokit-user-client-class</key> 
	<array>
		<string>RootDomainUserClient</string> 
		<string>IOHIDResourceDeviceUserClient</string> 
		<string>IOHIDLibUserClient</string>
	</array>
	<key>com.apple.security.exception.mach-lookup.global-name</key> 
	<array>
		<string>com.apple.telephonyutilities.callservicesdaemon.callstatecontroller</string> 
		<string>com.apple.telephonyutilities.callservicesdaemon.callcapabilities</string> 
		<string>com.apple.corespeech.corespeechd.activation.xpc</string> 
		<string>com.apple.corespeech.corespeechservices</string> 
		<string>com.apple.corespeech.xpc</string> 
		<string>com.apple.bulletinboard.observerconnection</string> 
		<string>com.apple.coremedia.systemcontroller.xpc</string> 
		<string>com.apple.server.bluetooth.le.att.xpc</string>
		<string>com.apple.server.bluetooth.le.pipe.xpc</string> 
		<string>com.apple.accessories.transport-server</string> 
		<string>com.apple.SystemConfiguration.configd</string> 
		<string>com.apple.accessories.blepairing</string> 
		<string>com.apple.PowerManagement.control</string> 
		<string>com.apple.CallHistorySyncHelper</string> 
		<string>com.apple.accessoryupdater.uarp</string> 
		<string>com.apple.donotdisturb.service</string> 
		<string>com.apple.mediaremoted.xpc</string> 
		<string>com.apple.voicemail.vmd</string> 
		<string>com.apple.privacyaccountingd</string> 
		<string>com.apple.ABDatabaseDoctor</string> 
		<string>com.apple.SBUserNotification</string> 
		<string>com.apple.installerauthagent</string> 
		<string>com.apple.AppSSO.service-xpc</string> 
		<string>com.apple.assistant.analytics</string> 
		<string>com.apple.siri.activation</string> 
		<string>com.apple.usymptomsd</string> 
		<string>com.apple.securityd</string> 
		<string>com.apple.trustd</string> 
		<string>com.apple.geod</string>
	</array>
	<key>com.apple.security.exception.shared-preference.read-only</key> 
	<array>
		<string>com.apple.AppSupport</string> 
		<string>com.apple.coremedia</string> 
		<string>com.apple.UIKit</string> 
		<string>com.apple.mediaremote</string>
	</array>
	<key>com.apple.security.exception.shared-preference.read-write</key> 
	<array>
		<string>com.apple.BTLEServer</string> 
	</array>
	<key>com.apple.security.network.client</key> 
	<true/> 
	<key>com.apple.security.ts.mobile-keybag-access</key> 
	<true/> 
	<key>com.apple.siri.activation</key> 
	<true/> 
	<key>com.apple.siri.external_request</key> 
	<true/> 
	<key>com.apple.springboard.CFUserNotification</key> 
	<true/> 
	<key>com.apple.symptom_diagnostics.report</key> 
	<true/>
	<key>com.apple.telephonyutilities.callservicesd</key> 
	<array>
		<string>access-calls</string> 
		<string>modify-calls</string>
	</array>
	<key>com.apple.visualvoicemail.client</key> 
	<true/> 
	<key>keychain-access-groups</key> 
	<array> 
		<string>apple</string> 
	</array>
	<key>platform-application</key> 
	<true/>
</dict> 
</plist>
-->


Some of the interesting commands from the BTLEServer data file include:

<--
clearAppleMultitouchDeviceNotification
clearDeviceManagementNotification
clearButtonInterestNotification
inertialinfraredaudioradioproximity
proximityDatasetProximityData
handleNotifyPiconetClockMsg:handleConnectClassicDeviceMsg:handleDisconnectClassicDeviceMsg:handleClassicDeviceUnexpectedDisconnectionMsg:handleStoreClassicDeviceSettingsMsg:handleNotifyPrimaryBudSideMsg:handleMFiAccessoryAuthMsg:handlePreWarmMFiAccessoryAuthMsg:handleDOAPDeviceConnectedMsg:handleUARPDeviceConnectedMsg:handleLeaEasyPairRequestMsg:handleLeaEasyPairResponseMsg:handleLeaStoreBondingInfoRequestMsg:handleLeaStoreBondingInfoResponseMsg:
removeSiriRelaysObject:siriAudioWillStart:siriAudioDidStop:didDiscoverCharacteristicsForService:setL2CAPChannels:
StartStreamingCharacteristic_StopStreamingCharacteristic_SendDataCharacteristic_EventIndicatorCharacteristic"CBCharacteristic"
:handleProximityDatasiriAudioRelaysetSiriAudioRelay:
getInertialHIDReportDescriptor
setInertial:getProximityHIDReportDescriptorsetProximity:sentHostReadyReportgotDeviceExtendedInfoReport
getInfraredHIDReportDescriptor
setInfrared:getAudioHIDReportDescriptor
setAudio:getRadioHIDReportDescriptor
deviceMgtDriverArrived:appleMultitouchDeviceArrived:
setSleepPeripheralLatencysetZeroPeripheralLatencyconnectedStandbyTokensetConnectedStandbyToken:setSiriAudioStart:_proximityData_ firstButton_buttonData_latency_instanceID_connectedStandbyToken_amdNotification_deviceMgtNotification_buttonInterestNotification_ cachedButtonsAndTimestamps_pathIDs_touchData_inertialData_serialNumber_properties_inputReportTimestamp_siriAudioRelay_lastAudioDate_ siriAudioStart_siriAudioStop_audioBuffer_queue_groupInit_groupStart_groupDeviceManagement_groupTouch_groupInertial_groupProximity_ sentHostReadyReport_gotDeviceExtendedInfoReport_deviceManagement_touch_buttons_inertial_infrared_audio_radio_proximity_
parseRecvdData:setUarpController:_manageUARPLogFile_
generatePcapLogFilename
startPacketCapture:
AppleSiriRemoteDevice
SiriAudioRelaySource
ExtendedData-[HIDAppleSiriRemoteDeviceinitWithProperties:reports:]InstanceID-[HIDAppleSiriRemoteDevice dealloc]-[HIDAppleSiriRemoteDevice stop]-[HIDAppleSiriRemoteDevice start]
Received StartStreamMsg from AVVCSiriAudioRelayHub - Received StopStreamMsg from AVVCSiriAudioRelayHub - Remove SiriAudioRelay %@
SiriAudioRelay - Send AudioFrame to AVVCSiriAudioRelay - Send invalidate to AVVCSiriAudioRelay - Send cancelStream to AVVCSiriAudioRelay - Send publish to AVVC %@ SiriAudioRelay - handleResetStreamSiriAudioRelay - startStreamSiriAudioRelay - stopStreamPerform MFIAuth for %@ Manager state is %, deferring MFI Auth for %@
Remote Siri device doesn't have proper codec
Received MyriadScore EventIndicatorSiri Myriad Score %fSiriMyriad Score acceptedSiriMyriad Score rejected: %@
DevMgmtPipeConnected
DevMgmtPipeDisconnected
Adding superbinary LOGS asset
-->


FILE STORAGE

In the time I have been researching this attack, one of the things that has stood out is the different ways in which data is moved around. In the beginning I had a feeling that my Zotero and Smultron app were up to no good. I wrote to Zotero with a copy of its activities and asked if it was normal (copying recent documents and performing tasks outside their scope). I was told all was well, however, I now know the email was likely intercepted as the email headers do not designate the sends IP as trusted. Communication with Motorola and the University IT have both confirmed this is also the case with my attempts to contact them electronically and by phone.

Files on the computer or device appear local but may be stored remotely, on iOS, signs include files being remotely edited and the removal of typical user options. Another example supporting this theory is after downloading songs from Spotify (by subscription) to listen to offline, the songs are not available when and it gives an error that you are offline. On Apple iOS, the 'Recently Deleted' folder reads "Recently deleted items may be permanently deleted by your storage provider." I do not use iCloud, the identity of the 'storage provider' is unknown.


The Files app com.apple.DocumentsApp on iOS: 

<--
  "app_name":  "Files"
  "procName" : "Files",
  "procPath" : "\/private\/var\/containers\/Bundle\/Application\/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\/Files.app\/Files",
  "bundleInfo" : {"CFBundleShortVersionString":"1.0","CFBundleVersion":"280.6.2","CFBundleIdentifier":"com.apple.DocumentsApp"},
  "storeInfo" : {"deviceIdentifierForVendor":"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXXX"},
  "parentProc" : "launchd",
  "parentPid" : 1,
  "coalitionName" : "com.apple.DocumentsApp",
  "crashReporterKey" : "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
  "ldm" : 1,
  "wasUnlockedSinceBoot" : 1,
  "isLocked" : 0,
  "codeSigningID" : "com.apple.DocumentsApp",
  "codeSigningTeamID" : "",
  "codeSigningFlags" : 570434305,
  "codeSigningValidationCategory" : 1,
  "codeSigningTrustLevel" : 0,
-->


There is a process called LocalStorageFileProvider that is modified using 'Experiments' (with the help of 'triald' and Siri).

<--
  "app_name": "LocalStorageFileProvider"
  "procName" : "LocalStorageFileProvider",
  "procPath" : "\/System\/Library\/Frameworks\/FileProvider.framework\/PlugIns\/LocalStorageFileProvider.appex\/LocalStorageFileProvider",
  "bundleInfo" : {"CFBundleShortVersionString":"1.0","CFBundleVersion":"1","CFBundleIdentifier":"com.apple.FileProvider.LocalStorage"},
  "parentProc" : "launchd",
  "parentPid" : 1,
  "coalitionName" : "com.apple.FileProvider.LocalStorage",
  "crashReporterKey" : "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
  "ldm" : 1,
  "wasUnlockedSinceBoot" : 1,
  "isLocked" : 0,
  "throttleTimeout" : 10,
  "codeSigningID" : "com.apple.FileProvider.LocalStorage",
  "codeSigningTeamID" : "",
  "codeSigningFlags" : 570434305,
  "codeSigningValidationCategory" : 1,
  "codeSigningTrustLevel" : 0,
-->


There is a mystery iOS app called 'STExtractionService'. Note the writes of 1003.02 KB per second exceeding limit of 12.43 KB per second.

<--
"app_name"        STExtractionService
Command:          STExtractionService
Path:             /System/Library/PrivateFrameworks/StreamingExtractor.framework/XPCServices/STExtractionService.xpc/STExtractionService
Identifier:       com.apple.STExtractionService
Version:          1.0 (1)
Resource Coalition ID: 205
Architecture:     arm64
PID:              296

Event:            disk writes
Action taken:     none
Writes:           1073.89 MB of file backed memory dirtied over 1071 seconds (1003.02 KB per second average), exceeding limit of 12.43 KB per second over 86400 seconds
Writes limit:     1073.74 MB
Limit duration:   86400s
Writes caused:    1073.89 MB
Writes duration:  1071s
Duration:         1070.65s
Duration Sampled: 1051.14s
Steps:            223 (10.49 MB/step)
-->


We also have another mystery app.

<--
"app_name"        ArchiveService
Command:          ArchiveService
Path:             /System/Library/PrivateFrameworks/DesktopServicesPriv.framework/XPCServices/ArchiveService.xpc/ArchiveService
Identifier:       com.apple.desktopservices.ArchiveService
Version:          13.4 (1564.6.3)
Resource Coalition ID: 462
Architecture:     arm64e
Parent:           launchd [1]
PID:              750

Event:            disk writes
Action taken:     none
Writes:           1073.75 MB of file backed memory dirtied over 60434 seconds (17.77 KB per second average), exceeding limit of 12.43 KB per second over 86400 seconds
Writes limit:     1073.74 MB
Limit duration:   86400s
Writes caused:    1073.75 MB
Writes duration:  60434s
Duration:         60433.59s
Duration Sampled: 60342.98s
Steps:            525 (10.49 MB/step)
-->

=@=

<--
opendirectoryd[66]: [session] UID: 0, EUID: 0, GID: 0, EGID: 0, PID: 87, PROC: templateMigrator ODQueryCreateWithNode request, NodeID: XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXD0, RecordType(s): dsRecTypeStandard:Users, Attribute: dsAttrTypeStandard:RecordName, MatchType: EqualTo, Equality: CaseIgnore, Value(s): ****, Requested Attributes: dsAttributesStandardAll, Max Results: 1
opendirectoryd[66]: [session] queuing request to connection - XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXBB - CFBundle 0x15b7057b0 </System/Library/OpenDirectory/Modules/PlistFile.bundle> (bundle, loaded)
opendirectoryd[66]: [session] ODQueryCreateWithNode completed
opendirectoryd[66]: [session] UID: 0, EUID: 0, GID: 0, EGID: 0, PID: 87, PROC: templateMigrator ODNodeCreateRecord request, NodeID: XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXD0, RecordType: dsRecTypeStandard:Users, RecordName: ****, Attributes: {
	    "dsAttrTypeNative:AvatarRepresentation" =     (
	        ""
	    );
	    "dsAttrTypeNative:HeimdalSRPKey" =     (
	        {length = 559, bytes = 0x******2b XXXXXXXX XXXXXXXX XXXXXXXX ... XXXXXXXX XXXXXXXX }
	    );
	    "dsAttrTypeNative:KerberosKeys" =     (
	        {length = 335, bytes = 0x******4b XXXXXXXX XXXXXXXX XXXXXXXX ... XXXXXXXX XXXXXXXX }
	    );
	    "dsAttrTypeNative:LinkedIdentity" =     (
	        "<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "/Apple/DTD PLIST 1.0/EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0">n<dict><key>appleid.apple.com</key><dict><key>allows password reset</key><true/><key>linked identities</key><array><dict><key>anchor dn</key><string>CN=Apple Root CA,OU=Apple Certification Authority,O=Apple Inc.,C=US</string>
opendirectoryd[66]: [session] queuing request to connection - XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXBB - CFBundle 0x*******b0 </System/Library/OpenDirectory/Modules/PlistFile.bundle> (bundle, loaded)
-->


IOS IPHONE

My iPhone:

My iPhone hosts an interesting bunch including a personalised '****CommunicationMgrQueue', unlikely to be genuinely created by Apple.

<--
"name":"(My first name)CommunicationMgrQueue"
"procname":"triald"
"procname":"ManagementTestSubscriber"
"procname":"RemoteManagementAgent"
"name":"IOHIDEvent Server Connection - Root"
"name":"com.apple.fseventsd.client.95"
"name":"com.apple.fseventsd.disklogger.92"
"name":"com.apple.fseventsd.volume"
"name":"com.apple.fseventsd.dev.fsevents"
"procname":"installcoordinationd"
"procname":"mDNSResponder"
"procname":"geod"
"procname":"pasted"
"procname":"com.apple.Safari.History"
"procname":"kbd"
"procname":"coreidvd"
"procname" : "Preferences"
"IndexedDB Serialization"
"procname":"mscamerad-xpc"
"procname":"ptpcamerad"
"procname":"WireGuardiOS Extension"
"name":"RemoteRenderingBackend work queue"
"procname":"mapspushd"
"procname":"reversetemplated"
"procname":"siriinferenced"
"procname":"iMessageAppsViewService"
"procname":"com.apple.sbd"
"procname":"OTATaskingAgent"
"procname":"DASDelegateService"
"procname":"InteractiveLegacyProfilesSubscr"
"procname":"MTLAssetUpgraderD"
"procname":"CommCenterRootHelper"
"name":"IOSkywalkNetworkBSDClient"
"namespace":"<0xA>"
"name":"AppleAOPVoiceTriggerController"
"name" : "SBWiFiManager callback thread"
"procname":"UserEventAgent"
"name":"AUToneMeister messenger"
"name":"com.apple.coreaudio.AQClient"
"name":"FigTransportConnectionUSB.messagesending"
"name":"TransportThread URGENT"
"name":"com.apple.coreanimation.display.wireless0"
"name":"com.apple.coreanimation.display.wireless1"
"name":"com.apple.coreanimation.display.wireless2"
"procname":"cfprefsd"
"procname":"WirelessRadioManagerd"
"procname":"druid"
"procname":"LocalStorageFileProvider"
"procname":"apfs_iosd"
"name":"ApplePMP"
"name":"AppleCLCD"
"name":"IOPCIConfigurator"
"name":"AVE_Drv"
"name":"AppleIPDormancyHandler"
"procname":"ContextService"
-->


PERSISTENCE

When the machine is reset and wiped, the exploit is retained within the memory. It goes back into the shared memory and brings the old information back in again. See discussion in MACOS REINSTALL.

Additional to the binary data injected into existing and newly created documents, a hidden plist for 'com.apple.containermanagerd.metadata.plist' resides in folders right across the system. This data is also present in the data plist files and I suspect it is also present inside the injected data placed into user files (this can checked by anyone with a paid VirusTotal account on any of the listed sample files).

<--
com.apple.containermanagerd.metadata.plist
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http: //www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict> 
<key>BuildMachine0SBuild</key>
<string>20A241133</string>
<key>CFBundleDevelopmentRegion</key>
<string>en</string>
<key>CFBundleExecutable</key>
<string>proactiveeventtrackerd</string>
<key>CFBundleIdentifier</key>
<string>com.apple.proactiveeventtrackerd</string>
<key>CFBundleInfoDictionaryVersion</key>
<string>6.0</string>
<key>CFBundleName</key>
<string>proactiveeventtrackerd</string>
<key>CFBundlePackageType</key>
<string>FMWK</string>
<key>CFBundleShortVersionString</key>
<string>1.0<string>
<key>CFBundleSignature</key>
<string>????</string>
<key>CFBundleSupportedPlatforms</key>
<array>
<string>MacOSX</string>
</array>
<key>CFBundleVersion</key>
<string>365.3<string>
<key>DTCompiler</key>
<string>com.apple.compilers.llvm.clang.1_0</string>
<key>DTPlatformBuild</key>
<string>14A6270d</ string>
<key>DTPlatformName</key>
<string>macosx</string>
<key>DTPlatformVersion</key>
<string>13.2</string>
<key>DTSDKBuild</key>
<string>22D36</string>
<key>DTSDKName</key>
<string>macos×13.2.internal</string>
<key>DTXcode</key>
<string>1400</string>
<key>DTXcodeBuild</key>
<string>14A6270d</string>
<key>LSMinimumSystemVersion</key>
<string>13.2</string>
</dict>
</plist>
-->


The placement of an .exe file (RobloxPlayerLauncher) on an iPad show concerning behaviours when ran in a test environment:
RobloxPlayerLauncher https://www.virustotal.com/gui/file/586d829ff6cbaabc90f39551782c27040f614f258820a417526d19ed182a36fd/details 


APPLE SECURITY UPDATES

The iOS Apple 16.6 update seems to have disrupted things to a very small degree. Straight after the update the attackers pushed new diskwrites to the devices. The orange recording dot now appears while the camera is not user initiated. All device cameras are covered and camera settings are off, however it still scares the kids when it randomly appears. I shudder to think what happened to anything captured of them when we were oblivious to this attack and what may have been done with it. 
^^/Apple/Collections/MobileSoftwareUpdate-UpdateBrainService/com-apple-MobileSoftwareUpdate-UpdateBrainService-diskwrites_resource-2023-07-26 2.txt
^^/Apple/Collections/StreamingUnzipService/com-apple-StreamingUnzipService-diskwrites_resource-2023-07-26-002219.txt
^^/Apple/Collections/WebKit_WebContent_CaptivePortal/com-apple-WebKit-WebContent-CaptivePortal-2023-07-26-115508.txt

Note: After updating, the device needs to a hard reboot performed after updating, because they fake a reboot (evidenced by the lack of the password screen that usually appears after a reboot). 


PROMOTEDCONTENTD

When I checked some of our app files on VirusTotal they returned results that matched command-and-control behaviours. One of the recurring patterns in the files checked was the modificated and 'dropping' of files related to promotedcontentd.

In one log, promotedcontentd, appstoreagent, amsengagementd, weatherd and adprivacyd via 'AppleMediaServices AMSAccountStoreCache' connect to an 'ACAccountStore for itunes/appstore in 'accountStore = <ACAccountStore: 0x*********>'. They then via '(AppleMediaServices) [com.apple.AppleMediaServices:general]' report, regarding the 'AMSFraudReport' that they are all 'Skipping fraud report score refresh, not enabled for this bag/client: (null)'.

<--
promotedcontentd: (AppleMediaServices) [com.apple.AppleMediaServices:general] AMSFraudReport: [******EB] Skipping fraud report score refresh, not enabled for this bag/client: (null)
-->


promotedcontentd also sets 'Ad Policy expressions', 'Ad Policy aliases' and 'Ad Policy policy' for 'com.apple.adplatforms:AdPolicy'. 

<--
promotedcontentd: (Security) [com.apple.securityd:secitemratelimit] Not internal release, disabling SIRL
promotedcontentd: (Security) [com.apple.securityd:keychain] System Keychain Always Supported set via feature flag to disabled
promotedcontentd: [com.apple.adplatforms:StatusConditions] [<private>]: User account changed, clearing cached status condition evaluations.
promotedcontentd: [com.apple.adplatforms:DeviceInformation] Updating Personalized Ads value.
-->


Interestingly, kernel denies promotedcontentd file-write-create access to '/Users/redacted/Library/Caches/com.apple.ap.promotedcontentd', '/Users/redacted/Library/HTTPStorages/com.apple.ap.promotedcontentd' and 'mach-lookup com.apple.metadata.mds'. symptomsd reports the operations Data Usage for com.apple.ap.promotedcontentd on flow 2422 - WiFi in/out: 2189129/327678, WiFi delta_in/delta_out: 7655/1321.

There are also instances of promotedcontent initializing a listener for 'MescalSigning'. 

<--
promotedcontentd: (APFoundation) [com.apple.adplatforms:XPCSupport] [<private>] Adding a delegate for machService: com.apple.ap.promotedcontent.signing
promotedcontentd: (APFoundation) [com.apple.adplatforms:XPCSupport] [<private>] Setting up the listener
trustd: [com.apple.securityd:policy] cert[0]: LeafMarkersProdAndQA =(leaf)[force]> 0
promotedcontentd: [com.apple.adplatforms:XPCSupport] [<private>] Initializing listener for MescalSigning
promotedcontentd: [com.apple.adplatforms:MescalSigning] <private>: Using bag determined AMSMescal provider.
promotedcontentd: (APFoundation) [com.apple.adplatforms:XPCSupport] [<private>] Adding a delegate for machService: com.apple.ap.promotedcontent.mescalinterface
promotedcontentd: (APFoundation) [com.apple.adplatforms:XPCSupport] [<private>] Setting up the listener
promotedcontentd: [com.apple.adplatforms:MescalSigning] [<private>]: Request signing negotiation complete; signing and verification now available. Setup took 0.00s
promotedcontentd: [com.apple.adplatforms:MescalSigning] Mescal signing state set to SetupInProgress.
promotedcontentd: [com.apple.adplatforms:MescalSigning] Mescal signing state set to SetupSucceeded.
tccd: [com.apple.TCC:access] -[TCCDAccessIdentity matchesCodeRequirement:]: SecStaticCodeCheckValidity() static code (0x******5a0) from /System/Library/PrivateFrameworks/iTunesCloud.framework/Support/itunescloudd : anchor apple; status: 0
tccd: [com.apple.TCC:access] For /System/Library/PrivateFrameworks/iTunesCloud.framework/Support/itunescloudd: matches platform requirements: Yes
tccd: [com.apple.TCC:access] Platform binary prompting is 'Deny' because: is Platform Binary
tccd: [com.apple.TCC:access] -[TCCDPlatformMacOS promptingPolicyForIdentity:accessingService:withAttributionChain:]: promptPolicy = 3; isApplePlatformBinary = 1
tccd: [com.apple.TCC:access] Handling access request to kTCCServiceAddressBook, from Sub:{/System/Library/PrivateFrameworks/iTunesCloud.framework/Support/itunescloudd}Resp:{TCCDProcess: identifier=com.apple.itunescloudd, pid=1942, auid=501, euid=501, binary_path=/System/Library/PrivateFrameworks/iTunesCloud.framework/Support/itunescloudd}, ReqResult(Auth Right: Unknown (None), DB Action:None, UpdateVerifierData)
trustd: [com.apple.securityd:policy] cert[0]: LeafMarkersProdAndQA =(leaf)[force]> 0
tccd: [com.apple.TCC:access] AUTHREQ_RESULT: msgID=105.211, authValue=1, authReason=0, authVersion=1, error=(null),
promotedcontentd: (Security) SecItemCopyMatching
promotedcontentd: (Security) SecItemCopyMatching_ios
trustd: [com.apple.securityd:ev] Leaf has invalid basic constraints
amsengagementd: (libboringssl.dylib) [com.apple.network:boringssl] boringssl_context_certificate_verify_callback(1797) [C1.1.1:2][0x******c60] Certificate verification result: OK
-->


The plist permissions for com.apple.promotedcontentd.

<--
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN' "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>com.apple.CommCenter.fine-grained</key>
	<array>
		<string>spi</string>
	</array>
	<key>com.apple.ap.signingservice.client</key> 
	<true/>
	<key>com.apple.assertiond.app-state-monitor</key> 
	<true> 
	<key>com.apple.private.ap.idmanager</key>
	<true/>
	<key>com.apple.private.applemediaservices</key>
	<true/>
	<key>com.apple.private.fpsd.client</key> 
	<true/>
	<key>com.apple.private.iad.opt-in-control</key>
	<true/>
	<key>com.apple.private.network.socket-delegate</key>
	<true/>
	<key>com.apple.private.tcc.allow</key>
	<array>
		<string>kTCCServiceUserTracking</string>
	</array>
	<key>com.apple.private.tcc.manager.access.read</key>
	<array>
		<string>kTCCServiceAll</string>
	</array>
	<key>com.apple.private.tcc.manager.check-by-audit-token</key>
	<array>
		<string>kTCCServiceUserTracking</string>
	</array>
	<key>com.apple.security.exception.files.absolute-path.read-only</key> 
	<array>
		<string>/usr/libexec</string>
		<strinq>/private/var/containers/Bundle/Application<string> 
	</array> 
	<key>com.apple.security.exception.files.home-relative-path.read-write</key>
	<array>
		<string>/Library/Application Support/com.apple.ap.promotedcontentd/</string> 
		<string>/Library/Caches/com.apple.ap.promotedcontentd/</string>
		<string>/Library/HTTPStorages</string>
		<string>/Library/HTTPStorages/com.apple.ap.promotedcontentd/</string>
	</array>
	<key>com.apple.security.exception.mach-lookup.global-name</key>
	<array>
		<string>com.apple.commcenter.coretelephony.xpc</string>
		<string>com.apple.fairplayd.versioned</string>
		<string>com.apple.ap.adprivacyd.opt-out</string>
		<string>com.apple.ap.adprivacyd.idmanager</string>
		<string>com.apple.adid</string>
		<string>com.apple.symptom_diagnostics</string>
	</array> 
	<key>com.apple.security.exception.process-info</key>
	<true/>
	<key>com.apple.security.exception.shared-preference.read-only</key>
	<array>
		<string>com.apple.springboard</string>
		<string>com.apple.ap.promotedcontentd</string>
		<string>com.apple.security</string>
		<string>com.apple.CFNetwork</string>
		<string>com.apple.itunesstored</string>
	</array>
	<key>com.apple.security.exception.shared-preference.read-write</key>
	<array>
		<string>com.apple.AdPlatforms</string> 
	</array>
	<key>com.apple.security.network.client</key>
	<true/>
	<key>com.apple.securitv.ts.tmpdir</key>
	<key>com.apple.security.exception.shared-preference.read-write</key> 
	<array>
		<string>com.apple.AdPlatforms</string>
	</array>
	<key>com.apple.security.network.client</key> 
	<true/>
	<key>com.apple.security.ts.tmpdir</key>
	<string>com.apple.ap.promotedcontentd</string>
	<key>com.apple.trial.client</key>
	<array>
		<string>513</string>
		<string>514</string>
	</array>
	<true/>
	<key>fairplay-client</key>
	<string>700802717</string>
	<key>keychain-access-groups</key>
	<array>
		<string>apple</string>
	</array>
	<key>platform-application</key>
	<true/>
	<key>seatbelt-profiles</key> 
	<array>
		<string>temporary-sandbox</string>
	</array>
</dict>
</plist>
-->


GOOGLE ACCOUNTS (CAPTIVE GOOGLE)

On Google accounts, we encounter a Google Workspaces screen on the browser and apps from the AppStore (which is a paid service, suggesting its fake). Logins are directed through various API URLs. Some I've encountered include 'ServiceLogin', 'InteractiveLogin', 'gapi_iframes', 'googleapis_client', 'boq_onegooglehttpserver', 'OneGoogleWidgetUi', 'ogs.google.com&system_name&one-google-http-server', 'accounts.google.com/signin/collaboratoraccount', 'og.qtm.en_US.myemailusername.2019.0', '&flowName=GlifWebSignIn&flowEntry=ServiceLogin', '&cbl=gmail.pinto-server_20230612.05_pO&view=ac'.

These are just name a few of many examples. On Apple, I have found the attackers have built into the browser plists (on Apple) and code on Android/ChromeOS which redirect your standard URL such as 'gmail.google.com' through their custom API. These are all non-standard and are custom API links. In the earlier days of my survelliance, the web-based Gmail interface was forced to a '@2010 Google' plain text HTML version. Today, it is currently fixed to a 2019 API with limited features. 

On Chrome, they have developer mode enabled and are using 'Field Trials' and '.test' files. The mention of delegates and collaboration accounts in URLs and source code suggests the accounts are delegated. However, nothing obvious shows up in the Google settings page that anyone else is listed as a delegate of the account (or any other platform it does the too). Evidence suggests some options are hidden.

<--
{"constants":{"activeFieldTrialGroups":[
"DesktopNtpModules:_Panorama_In_Product_Help_2023XXXX",,"WebContentsCaptureHiDPI:Control_2023XXXX","addressFamily":"certPathBuilderDigestPolicy":{"kStrong":0,"kWeakAllowSha1":1},
-->

<--
{"params":{"initiator":"chrome-untrusted://new-tab-page","load_flags":16384,"method":"GET","network_isolation_key":"chrome://new-tab-page chrome-untrusted://new-tab-page","request_type":"other","site_for_cookies":"SiteForCookies: {site=chrome://new-tab-page; schemefully_same=false}","url":"https://www.gstatic.com/og/_/js/k=og.qtm.en_US.redacted.hs.2019.O/rt=j/m=q_dnp,qmd,qcwid,qapid,qald/exm=qaaw,qabr,qadd,qaid,qalo,qebr,qein,qhaw,qhawgm3,qhba,qhbr,qhbrgm3,qhch,qhchgm3,qhga,qhid,qhidgm3,qhin,qhlo,qhlogm3,qhmn,qhpc,qhsf,qhsfgm3,qhtt/d=1/ed=1/rs=redacted"},"phase":1,"source":{"id":redacted,"start_time":"34428238","type":1},"time":"34428239","type":108},
-->

<--
keys: "1/0/_dk_chrome://new-tab-page chrome-untrusted://new-tab-page https://www.gstatic.com/og/_/js/k=og.qtm.en_US.redacted-hs.2019.O"
key: "1/0/_dk_chrome://new-tab-page chrome-untrusted://new-tab-page https://apis.google.com/_/scs/abc-static/_/js/k=gapi.gapi.en.redacted.O/m=gapi_iframes,googleapis_client/...
host: "clientservices.googleapis.com"
params: "subjects":["upload.video.google.com","*.clients.google.com","*.docs.google.com","*.drive.google.com","*.gdata.youtube.com","*.googleapis.com","*.photos.google.com","*.youtube-3rd-party.com","upload.google.com","*.upload.google.com","upload.youtube.com","*.upload.youtube.com","uploads.stage.gdata.youtube.com","bg-call-donation.goog","bg-call-donation-alpha.goog","bg-call-donation-canary.goog","bg-call-donation-dev.goog"]
BlueAvengers_Geotagging_Data_Collction_V2%22&rlz=redacted_enAU
server: "https://oauthtokenbootstrap.googleapis.com
network_anonymization_key: "https://chrome.com cross_site","server":"https://shared-storage-demo-content-producer.web.app"
-->


HIDDEN GOOGLE CHROME EXTENSIONS


Quite a number of Chrome extensions are enabled on iOS that don't appear in settings.

<--
							<key>nkeimhogjdpnpccoofpliimaahmaaome</key>
							<dict>
								<key>active_permissions</key>
								<dict>
									<key>api</key>
									<array>
										<string>desktopCapture</string>
										<string>processes</string>
										<string>webrtcAudioPrivate</string>
										<string>webrtcDesktopCapturePrivate</string>
										<string>webrtcLoggingPrivate</string>
										<string>system.cpu</string>
										<string>enterprise.hardwarePlatform</string>
									</array>
									<key>explicit_host</key>
									<array/>
									<key>manifest_permissions</key>
									<array/>
									<key>scriptable_host</key>
									<array/>
								</dict>
								<key>commands</key>
								<dict/>
								<key>content_settings</key>
								<array/>
								<key>creation_flags</key>
								<string>1</string>
								<key>events</key>
								<array>
									<string>runtime.onConnectExternal</string>
								</array>
								<key>first_install_time</key>
								<string>redacted</string>
								<key>from_webstore</key>
								<string>0</string>
								<key>incognito_content_settings</key>
								<array/>
								<key>incognito_preferences</key>
								<dict/>
								<key>last_update_time</key>
								<string>redacted</string>
								<key>location</key>
								<string>5</string>
								<key>manifest</key>
								<dict>
									<key>background</key>
									<dict>
										<key>page</key>
										<string>background.html</string>
										<key>persistent</key>
										<string>0</string>
									</dict>
									<key>externally_connectable</key>
									<dict>
										<key>matches</key>
										<array>
											<string>https://*.google.com/*</string>
										</array>
									</dict>
									<key>incognito</key>
									<string>split</string>
									<key>key</key>
									<string>redacted</string>
									<key>manifest_version</key>
									<string>2</string>
									<key>name</key>
									<string>Google Hangouts</string>
									<key>permissions</key>
									<array>
										<string>desktopCapture</string>
										<string>enterprise.hardwarePlatform</string>
										<string>processes</string>
										<string>system.cpu</string>
										<string>webrtcAudioPrivate</string>
										<string>webrtcDesktopCapturePrivate</string>
										<string>webrtcLoggingPrivate</string>
									</array>
									<key>version</key>
									<string>1.3.21</string>
								</dict>
-->


REMOTED

In the following snippet, remoted requires an interesting number of entitlements: com.apple.private.InstallCoordinationRemote, com.apple.private.sysdiagnose.remote, com.apple.private.security.cryptexd.remote, com.apple.SubmitDiagInfo.tower-access, com.apple.private.CSCSupport.antenna-access, com.apple.mobile.notification_proxy.remote, com.apple.private.mobile_storage.remote.allowedSPI, com.apple.private.dt.remoteFetchSymbols.client, com.apple.corecaptured.remoteservice-access and AppleInternal.

It then goes on to populate a number of properties. The term 'populate with' features heavily on the Macs, which reminds me of the 'Operation Triangular' comment regarding 'populate with macOS fields'. There are many similarities between their example and the attack we are experiencing. Additionally, there are many similarities comparing their sample on Virus Total and ours.

<--
remoted: [com.apple.RemoteServiceDiscovery:remoted] remoted starting up, waiting for services...
remoted: (MultiverseSupport) [com.apple.multiverse:notifications] Could not find the 'IODeviceTree:/efi/platform' registry entry
remoted: [com.apple.RemoteServiceDiscovery:watchdog] Couldn't determine platform type: MULTIVERSE_ERROR_NOT_SUPPORTED
remoted: [com.apple.RemoteServiceDiscovery:watchdog] Platform doesn't have coproc
remoted: [com.apple.RemoteServiceDiscovery:watchdog] Not enable remoted watchdog
remoted: [com.apple.RemoteServiceDiscovery:remoted] Registered remoted service: com.apple.remote.installcoordination_proxy
remoted: [com.apple.RemoteServiceDiscovery:remoted] com.apple.remote.installcoordination_proxy: <dictionary: 0x******e30> { count = 3, transaction: 0, voucher = 0x0, contents =
	"ServiceProperties" => <dictionary: 0x******e90> { count = 2, transaction: 0, voucher = 0x0, contents =
		"ServiceVersion" => <int64: 0x*************37f>: 1
		"UsesRemoteXPC" => <bool: 0x******3d0>: true
	}
	"ExposedToUntrustedDevices" => <array: 0x******fb0> { count = 1, capacity = 1, contents =
		0: <string: 0x******0d0> { length = 27, contents = "HasInternalSecurityPolicies" }
	}
	"RequireEntitlement" => <string: 0x******180> { length = 43, contents = "com.apple.private.InstallCoordinationRemote" }
}
remoted: [com.apple.RemoteServiceDiscovery:remoted] Registered remoted service: com.apple.sysdiagnose.remote
remoted: [com.apple.RemoteServiceDiscovery:remoted] com.apple.sysdiagnose.remote: <dictionary: 0x******0c0> { count = 3, transaction: 0, voucher = 0x0, contents =
	"ServiceProperties" => <dictionary: 0x******120> { count = 1, transaction: 0, voucher = 0x0, contents =
		"UsesRemoteXPC" => <bool: 0x******3d0>: true
	}
	"ExposedToUntrustedDevices" => <array: 0x******200> { count = 1, capacity = 1, contents =
		0: <string: 0x******360> { length = 27, contents = "HasInternalSecurityPolicies" }
	}
	"RequireEntitlement" => <string: 0x******410> { length = 36, contents = "com.apple.private.sysdiagnose.remote" }
}
remoted: [com.apple.RemoteServiceDiscovery:remoted] Registered remoted service: com.apple.security.cryptexd.remote
remoted: [com.apple.RemoteServiceDiscovery:remoted] com.apple.security.cryptexd.remote: <dictionary: 0x******310> { count = 3, transaction: 0, voucher = 0x0, contents =
	"ServiceProperties" => <dictionary: 0x******370> { count = 3, transaction: 0, voucher = 0x0, contents =
		"Features" => <array: 0x******3d0> { count = 1, capacity = 1, contents =
			0: <string: 0x******570> { length = 14, contents = "CryptexInstall" }
		}
		"ServiceVersion" => <int64: 0x*************37f>: 1
		"UsesRemoteXPC" => <bool: 0x******3d0>: true
	}
	"ExposedToUntrustedDevices" => <array: 0x******510> { count = 2, capacity = 2, contents =
		0: <string: 0x******6f0> { length = 8, contents = "PreSetup" }
		1: <string: 0x******740> { length = 27, contents = "HasInternalSecurityPolicies" }
	}
	"RequireEntitlement" => <string: 0x******7f0> { length = 42, contents = "com.apple.private.security.cryptexd.remote" }
}
remoted: [com.apple.RemoteServiceDiscovery:remoted] Registered remoted service: com.apple.osanalytics.logRelay
remoted: [com.apple.RemoteServiceDiscovery:remoted] com.apple.osanalytics.logRelay: <dictionary: 0x******620> { count = 3, transaction: 0, voucher = 0x0, contents =
	"ServiceProperties" => <dictionary: 0x******680> { count = 1, transaction: 0, voucher = 0x0, contents =
		"UsesRemoteXPC" => <bool: 0x******3d0>: true
	}
	"ExposedToUntrustedDevices" => <bool: 0x******3d0>: true
	"RequireEntitlement" => <string: 0x******a20> { length = 37, contents = "com.apple.SubmitDiagInfo.tower-access" }
}
remoted: [com.apple.RemoteServiceDiscovery:remoted] Registered remoted service: com.apple.CSCSupportd
remoted: [com.apple.RemoteServiceDiscovery:remoted] com.apple.CSCSupportd: <dictionary: 0x******830> { count = 2, transaction: 0, voucher = 0x0, contents =
	"ServiceProperties" => <dictionary: 0x******890> { count = 2, transaction: 0, voucher = 0x0, contents =
		"ServiceVersion" => <int64: 0x*************357>: 4
		"UsesRemoteXPC" => <bool: 0x******3d0>: true
	}
	"RequireEntitlement" => <string: 0x******c40> { length = 43, contents = "com.apple.private.CSCSupport.antenna-access" }
}
remoted: [com.apple.RemoteServiceDiscovery:remoted] Registered remoted service: com.apple.mobile.notification_proxy.remote
remoted: [com.apple.RemoteServiceDiscovery:remoted] com.apple.mobile.notification_proxy.remote: <dictionary: 0x******a30> { count = 3, transaction: 0, voucher = 0x0, contents =
	"ServiceProperties" => <dictionary: 0x******a90> { count = 2, transaction: 0, voucher = 0x0, contents =
		"ServiceVersion" => <int64: 0x*************37f>: 1
		"UsesRemoteXPC" => <bool: 0x******3d0>: true
	}
	"ExposedToUntrustedDevices" => <array: 0x******bb0> { count = 2, capacity = 2, contents =
		0: <string: 0x******e80> { length = 8, contents = "PreSetup" }
		1: <string: 0x******ed0> { length = 27, contents = "HasInternalSecurityPolicies" }
	}
	"RequireEntitlement" => <string: 0x******f80> { length = 42, contents = "com.apple.mobile.notification_proxy.remote" }
}
remoted: [com.apple.RemoteServiceDiscovery:remoted] Registered remoted service: com.apple.mobile.storage_mounter_proxy.bridge
remoted: [com.apple.RemoteServiceDiscovery:remoted] com.apple.mobile.storage_mounter_proxy.bridge: <dictionary: 0x******cc0> { count = 3, transaction: 0, voucher = 0x0, contents =
	"ServiceProperties" => <dictionary: 0x******d20> { count = 2, transaction: 0, voucher = 0x0, contents =
		"ServiceVersion" => <int64: 0x*************37f>: 1
		"UsesRemoteXPC" => <bool: 0x******3d0>: true
	}
	"ExposedToUntrustedDevices" => <array: 0x******e40> { count = 2, capacity = 2, contents =
		0: <string: 0x******1d0> { length = 27, contents = "HasInternalSecurityPolicies" }
		1: <string: 0x******210> { length = 8, contents = "PreSetup" }
	}
	"RequireEntitlement" => <string: 0x******2d0> { length = 50, contents = "com.apple.private.mobile_storage.remote.allowedSPI" }
}
remoted: [com.apple.RemoteServiceDiscovery:remoted] Registered remoted service: com.apple.mobile.storage_mounter_proxy.bridge.macOS
remoted: [com.apple.RemoteServiceDiscovery:remoted] com.apple.mobile.storage_mounter_proxy.bridge.macOS: <dictionary: 0x******f50> { count = 3, transaction: 0, voucher = 0x0, contents =
	"ServiceProperties" => <dictionary: 0x******fb0> { count = 2, transaction: 0, voucher = 0x0, contents =
		"ServiceVersion" => <int64: 0x*************37f>: 1
		"UsesRemoteXPC" => <bool: 0x******3d0>: true
	}
	"ExposedToUntrustedDevices" => <array: 0x******0d0> { count = 2, capacity = 2, contents =
		0: <string: 0x******520> { length = 27, contents = "HasInternalSecurityPolicies" }
		1: <string: 0x******560> { length = 8, contents = "PreSetup" }
	}
	"RequireEntitlement" => <string: 0x******620> { length = 50, contents = "com.apple.private.mobile_storage.remote.allowedSPI" }
}
remoted: [com.apple.RemoteServiceDiscovery:remoted] Registered remoted service: com.apple.dt.remoteFetchSymbols
remoted: [com.apple.RemoteServiceDiscovery:remoted] com.apple.dt.remoteFetchSymbols: <dictionary: 0x******1e0> { count = 2, transaction: 0, voucher = 0x0, contents =
	"ServiceProperties" => <dictionary: 0x******240> { count = 3, transaction: 0, voucher = 0x0, contents =
		"Features" => <array: 0x******2a0> { count = 1, capacity = 1, contents =
			0: <string: 0x******7d0> { length = 52, contents = "com.apple.dt.remoteFetchSymbols.dyldSharedCacheFiles" }
		}
		"ServiceVersion" => <int64: 0x*************37f>: 1
		"UsesRemoteXPC" => <bool: 0x******3d0>: true
	}
	"RequireEntitlement" => <string: 0x******930> { length = 46, contents = "com.apple.private.dt.remoteFetchSymbols.client" }
}
remoted: [com.apple.RemoteServiceDiscovery:remoted] Registered remoted service: com.apple.corecaptured.remoteservice
remoted: [com.apple.RemoteServiceDiscovery:remoted] com.apple.corecaptured.remoteservice: <dictionary: 0x******460> { count = 2, transaction: 0, voucher = 0x0, contents =
	"ServiceProperties" => <dictionary: 0x******4c0> { count = 1, transaction: 0, voucher = 0x0, contents =
		"UsesRemoteXPC" => <bool: 0x******3d0>: true
	}
	"RequireEntitlement" => <string: 0x******b10> { length = 43, contents = "com.apple.corecaptured.remoteservice-access" }
}
remoted: [com.apple.RemoteServiceDiscovery:remoted] Registered remoted service: com.apple.testmanagerd.remote.automation
remoted: [com.apple.RemoteServiceDiscovery:remoted] com.apple.testmanagerd.remote.automation: <dictionary: 0x******620> { count = 2, transaction: 0, voucher = 0x0, contents =
	"ServiceProperties" => <dictionary: 0x******680> { count = 1, transaction: 0, voucher = 0x0, contents =
		"UsesRemoteXPC" => <bool: 0x******3f0>: false
	}
	"RequireEntitlement" => <string: 0x******cd0> { length = 13, contents = "AppleInternal" }
}
remoted: [com.apple.RemoteServiceDiscovery:remoted] Finalized the initial set of remoted services
remoted: (libsystem_info.dylib) Retrieve service by name
opendirectoryd: [com.apple.opendirectoryd:session] UID: 0, EUID: 0, GID: 0, EGID: 0, PID: 98, PROC: remoted RPC: getservbyname, Module: SystemCache, proto: <private>, rpc_version: 2, name: <private>
opendirectoryd: [com.apple.opendirectoryd:session] queuing request to connection - XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX21C - <private>
launchd: [system/com.apple.smb.preferences [139]:] service state: running
launchd: [system/com.apple.smb.preferences [139]:] internal event: INIT, code = 0
launchd: [system/com.apple.smb.preferences [139]:] Successfully spawned smb-sync-preferences[139] because speculative
remoted: [com.apple.RemoteServiceDiscovery:remoted] Registered legacy service based on services entry for "ssh".
remoted: (CoreFoundation) Loading Preferences From System CFPrefsD
remoted: [com.apple.RemoteServiceDiscovery:remoted] device-uuid: <private>
remoted: [com.apple.RemoteServiceDiscovery:remoted] Populated property with MG: BoardId
remoted: [com.apple.RemoteServiceDiscovery:remoted] Populated property with MG: CPUArchitecture
remoted: [com.apple.RemoteServiceDiscovery:remoted] Populated property with MG: CertificateProductionStatus
remoted: [com.apple.RemoteServiceDiscovery:remoted] Populated property with MG: CertificateSecurityMode
remoted: [com.apple.RemoteServiceDiscovery:remoted] Populated property with MG: ChipID
remoted: [com.apple.RemoteServiceDiscovery:remoted] Populated property with MG: DeviceClass
remoted: [com.apple.RemoteServiceDiscovery:remoted] Populated property with MG: DeviceClass
remoted: (libMobileGestalt.dylib) Creating default MGSysConfigPolicy
remoted: [com.apple.RemoteServiceDiscovery:remoted] Populated property with MG: DeviceColor
remoted: [com.apple.RemoteServiceDiscovery:remoted] Populated property with MG: DeviceEnclosureColor
remoted: [com.apple.RemoteServiceDiscovery:remoted] Populated property with MG: DeviceSupportsLockdown
remoted: [com.apple.RemoteServiceDiscovery:remoted] Populated property with MG: EffectiveProductionStatusAp
remoted: [com.apple.RemoteServiceDiscovery:remoted] Populated property with MG: EffectiveProductionStatusSEP
remoted: [com.apple.RemoteServiceDiscovery:remoted] Populated property with MG: EffectiveSecurityModeAp
remoted: [com.apple.RemoteServiceDiscovery:remoted] Populated property with MG: EffectiveSecurityModeSEP
remoted: [com.apple.RemoteServiceDiscovery:remoted] Populated property with MG: EthernetMacAddress
remoted: [com.apple.RemoteServiceDiscovery:remoted] Populated property with MG: HWModelStr
remoted: [com.apple.RemoteServiceDiscovery:remoted] Populated property with MG: HardwarePlatform
remoted: [com.apple.RemoteServiceDiscovery:remoted] Populated property with MG: HasSEP
remoted: [com.apple.RemoteServiceDiscovery:remoted] Populated property with MG: HumanReadableProductVersionString
remoted: [com.apple.RemoteServiceDiscovery:remoted] Populated property with MG: Image4CryptoHashMethod
remoted: [com.apple.RemoteServiceDiscovery:remoted] Populated property with MG: Image4Supported
remoted: [com.apple.RemoteServiceDiscovery:remoted] Populated property with MG: IsUIBuild
remoted: [com.apple.RemoteServiceDiscovery:remoted] Populated property with MG: IsVirtualDevice
remoted: [com.apple.RemoteServiceDiscovery:remoted] Populated property with MG: MobileDeviceMinimumVersion
remoted: [com.apple.RemoteServiceDiscovery:remoted] Populated property with MG: ModelNumber
remoted: [com.apple.RemoteServiceDiscovery:remoted] Unable to fetch MG property: OceanComputeCarrierID
remoted: [com.apple.RemoteServiceDiscovery:remoted] Unable to fetch MG property: OceanComputeCarrierSlot
remoted: [com.apple.RemoteServiceDiscovery:remoted] Populated property with MG: ProductName
remoted: [com.apple.RemoteServiceDiscovery:remoted] Populated property with MG: ProductType
remoted: [com.apple.RemoteServiceDiscovery:remoted] Populated property with MG: RegionCode
remoted: [com.apple.RemoteServiceDiscovery:remoted] Populated property with MG: RegionInfo
remoted: [com.apple.RemoteServiceDiscovery:remoted] Populated property with MG: SecurityDomain
remoted: [com.apple.RemoteServiceDiscovery:remoted] Populated property with MG: SerialNumber
remoted: [com.apple.RemoteServiceDiscovery:remoted] Populated property with MG: SigningFuse
remoted: (libMobileGestalt.dylib) couldn't load support library
remoted: (libMobileGestalt.dylib) called dummy function!
remoted: [com.apple.RemoteServiceDiscovery:remoted] Unable to fetch MG property: StoreDemoMode
remoted: [com.apple.RemoteServiceDiscovery:remoted] Populated property with MG: SupplementalBuildVersion
remoted: [com.apple.RemoteServiceDiscovery:remoted] Populated property with MG: ThinningProductType
remoted: [com.apple.RemoteServiceDiscovery:remoted] Populated property with MG: UniqueChipID
remoted: [com.apple.RemoteServiceDiscovery:remoted] Populated property with MG: UniqueDeviceID
remoted: (EmbeddedOSSupportHost) Could not find the 'IODeviceTree:/efi/platform' registry entry
remoted: [com.apple.RemoteServiceDiscovery:MultiverseHost] Initializing multiverse host backend.
remoted: [com.apple.RemoteServiceDiscovery:MultiverseHost] Couldn't determine platform type: MULTIVERSE_ERROR_NOT_SUPPORTED
remoted: (MultiverseSupport) [com.apple.multiverse:notifications] IOServiceAddMatchingNotification ctx->notification: 0x******350 name: IOServiceFirstMatch matching: <private> apply_io_iterator: 0x*************4f4 storage->block: 0x******520
cryptexd: (RemoteXPC) [com.apple.xpc.remote:listener] Checking in for remote service: <private>
remoted: [com.apple.RemoteServiceDiscovery:CoreDevice] initializing CoreDevice backend
remoted: [com.apple.RemoteServiceDiscovery:ncm_host] Initializing ncm host backend
remoted: [com.apple.RemoteServiceDiscovery:ncm_device] Initializing ncm device backend
remoted: [com.apple.RemoteServiceDiscovery:display_host] Initializing display host backend
remoted: [com.apple.RemoteServiceDiscovery:compute_controller] not enabling backend on this platform
remoted: [com.apple.RemoteServiceDiscovery:compute_node] not enabling backend on this platform
remoted: [com.apple.RemoteServiceDiscovery:ncm_device] Not using the public NCM interface due to the existence of private NCM interface
remoted: [com.apple.RemoteServiceDiscovery:ncm_device] Not using the public NCM interface due to the existence of private NCM interface
remoted: [com.apple.RemoteServiceDiscovery:ncm_common] initial linkstatus: kIONetworkLinkValid
remoted: [com.apple.RemoteServiceDiscovery:ncm_common] initial linkstatus: kIONetworkLinkValid
remoted: [com.apple.RemoteServiceDiscovery:compute] Finalized the initial set of compute platform xpc event
remoted: [com.apple.RemoteServiceDiscovery:ClientInterface] device_get_unique: Unable to find device with type 3
remoted: (libxpc.dylib) Could not get event name for stream/token: com.apple.remoted.service/79: 3: No such process
remoted: (RemoteServiceDiscovery) [com.apple.RemoteServiceDiscovery:RemoteServiceDiscovery] Starting browsing: <private>
remoted: [com.apple.RemoteServiceDiscovery:rsd_events] Registered for RSD events: <Unknown>
remoted: [com.apple.RemoteServiceDiscovery:rsd_events] <Unknown>: <dictionary: 0x******e90> { count = 1, transaction: 0, voucher = 0x0, contents =
	"AvailableService" => <string: 0x******c90> { length = 25, contents = "com.apple.bridgeOSUpdated" }
}
remoted: [com.apple.RemoteServiceDiscovery:ClientInterface] Registering client browse.
remoted: [com.apple.RemoteServiceDiscovery:ClientInterface] Completed immediate devices.
remoted: (libxpc.dylib) Could not get event name for stream/token: com.apple.remoted.service/78: 3: No such process
remoted: (RemoteServiceDiscovery) [com.apple.RemoteServiceDiscovery:RemoteServiceDiscovery] Starting browsing: <private>
remoted: [com.apple.RemoteServiceDiscovery:rsd_events] Registered for RSD events: <Unknown>
remoted: [com.apple.RemoteServiceDiscovery:rsd_events] <Unknown>: <dictionary: 0x******f70> { count = 2, transaction: 0, voucher = 0x0, contents =
	"AvailableService" => <string: 0x******d80> { length = 27, contents = "com.apple.CoreKDL.remoteXPC" }
	"DeviceType" => <string: 0x******df0> { length = 6, contents = "bridge" }
}
remoted: (RemoteServiceDiscovery) [com.apple.RemoteServiceDiscovery:RemoteServiceDiscovery] Started browsing.
remoted: [com.apple.RemoteServiceDiscovery:ClientInterface] Registering client browse.
remoted: [com.apple.RemoteServiceDiscovery:ClientInterface] Completed immediate devices.
remoted: (RemoteServiceDiscovery) [com.apple.RemoteServiceDiscovery:RemoteServiceDiscovery] Started browsing.
-->


TYPO CITY

<--
mount_nfs: [com.apple.mount_nfs]: Can't allocate addrinfo sturcture for local address for %s

bdsyslog:
Collecting proccesses information
COLECTING SAFARI INFO
COLECTING CHROME INFO
COLECTING FIREFOX INFO
Colecting info.plist 
Colecting preferences.
Colecting history.
Colecting downloads.
Colecting extensions.
Retriving profile DOWNLOADS.
Coult not get the size of file at path:
Archieving to Desktop.
Zipping ARCHIEVING (CRASHED)

apfsd: (com.apple.apfsd]: Reseting next report time

BCCloudKitConttoller: connectUserToConteinr

extensionkitservice: (ExtensionFoundation) [com.apple.extensionkit:default] Createing interface for dicovery and launch for connection request from '434'
PerfPowerServices: (CoreMediaIO) [com.apple.cmio:] CMIO_DAL_System.cpp:240:System security session has no grahics access, not adding a CGS callback

BlueAvengers_Geotagging_Data_Collction_V2%22&xxx=redacted_enAU

identityservicesd: (FTServices) [com.apple.IDS:WebTunnel] Diceroll Sucesss, dual query will be performed

locationd: [com.apple.locationd.Core:Simulation] {"msg":"Do we have a listener?", "listtner":"<NSXPCListener: 0x******cc0> service: com.apple.locationd.simulation"}

findmydeviced: [com.apple.icloud.findmydeviced:_] Checked in APS mach handlder development:<private>

ane: [com.apple.aned] Expunge %@ from ALL patritions.
ane: [com.apple.aned] % needs coversion to Data Vault
-->


CHROMEOS/CHROMEBOOK

'About device: Owner'

I am not Owner, that account belongs to the attackers. The OS on the Chromebook was compromised the moment Todoist 'kindly' emailed me that I'd logged in from a new device at another location and provided the attackers my IP address. As they have full access to my email accounts they used this information. Soon after, an update message popped up from the notification tray.

<--
Chrome OS • 4 m
ChromeOS update for Android apps
Update required within 30 days
Update now
-->


At the time I was unaware of the login email. I should have known something was not right as I had already updated the laptop after unboxing and it already had what was then the latest version. After it restarted I knew it had also been modified as the login screen was different. I wasn't too familiar with Chromebooks so I sent the below specs to an aquaintence who works in computer security for the Education Department. He said it all looked right for an Android tablet. It isn't a tablet but a laptop version, and it is meant to be running ChromeOS.

<--
{"clientInfo":{"command_line":"/opt/google/chrome/chrome --enable-native-gpu-memory-buffers --enable-webgl-image-chromium --enable-features=Pepper3DImageChromium,UmaStorageDimensions,ArcAdbSideloading,ArcVmDataMigration,Crostini,CrostiniGpuSupport,SmartDim,OnDeviceSpeechRecognition --num-raster-threads=2 --gpu-sandbox-failures-fatal=yes --gpu-sandbox-start-early --video-capture-use-gpu-memory-buffer --enable-logging --log-level=1 --use-cras --enable-wayland-server --user-data-dir=/home/chronos --disable-mojo-broker --ash-use-cros-mojo-service-manager --cros-healthd-uses-service-manager --scheduler-boost-urgent=40 --login-profile=user --has-chromeos-keyboard --enable-touchview --form-factor=CHROMEBOOK --guest-wallpaper-large=/usr/share/chromeos-assets/wallpaper/guest_large.jpg --guest-wallpaper-small=/usr/share/chromeos-assets/wallpaper/guest_small.jpg --child-wallpaper-large=/usr/share/chromeos-assets/wallpaper/child_large.jpg --child-wallpaper-small=/usr/share/chromeos-assets/wallpaper/child_small.jpg --default-wallpaper-large=/usr/share/chromeos-assets/wallpaper/default_large.jpg --default-wallpaper-small=/usr/share/chromeos-assets/wallpaper/default_small.jpg --device-help-content-id=fennel14 --has-internal-stylus --ozone-nnpalm-properties={} --arc-availability=officially-supported --enable-arcvm --enterprise-enrollment-initial-modulus=15 --enterprise-enrollment-modulus-limit=19 --enable-crashpad --ml_service=enabled --ondevice_handwriting=use_rootfs --ondevice_document_scanner=use_rootfs --disable-features=FederatedService --login-manager --first-exec-after-boot --enable-features=Pepper3DImageChromium,UmaStorageDimensions,ArcAdbSideloading,ArcVmDataMigration,Crostini,CrostiniGpuSupport,SmartDim,OnDeviceSpeechRecognition --disable-features=FederatedService --zygote-hugepage-remap --flag-switches-begin --flag-switches-end","name":"Google Chrome","official":"official","os_type":"Linux: 15437.42.0 (aarch64)","version":"114.0.5735.119","version_mod":""},
-->


CHROMEBOOK APPS

Apps: 
Android Shared Library, Android system, Android Services Library, Android System WebView, App Permissions Service, ARC App Launcher, ARC Backup Settings Service, ArcApkCache, ARC View Downloads Handler, ARC WebAPK service, ArcVolumeProvider, ARC Crash Collector, ARC Default Intent Redirector, ARC GMS Proxy, ARC Home, ARC Media Session Service, ARC payment app service, ARC Print Service, Certificate Installer, Chrome OS XKB, com.android.cts.priv.ctsshim, com.android.cts.ctsshim, Companion Device Manager, Dark, Device configuration for Cheets, Device configuration for Jacuzzi, External Storage, Fused Location, Intent Filter Verification Service, One Time Init, org.chromium.arc.system.stub, org.chromium.arc.accessibilityhelper, org.chromium.arc.hostvpn, Package Access Helper, Package installer, Work profile setup.


GOOGLETV TAKEOVER

We have a number of GoogleTV devices. These all now appear as 'Google Set-top box'. It appears the OS has also been modified to run as an Android Mobile Device. 
https://github.com/sussystuff/CaptiveGoogle/blob/main/Screenshots/Google-Set-top-box.jpg


CHROMEBOOK FILE STORAGE:

On Chromebook (2023 Lenovo) it is meant to be running ChromeOS.

<--
/storage/emulated/0/
Error Message
android.os.TransactionTooLargeException:dataparcelsize8337144bytes
Error Log
android.app.servertransaction.PendingTransactionActions$StopInfo.run(PendingTransactionActions.java:160)
android.os.Handler.handleCallback(Handler.java:873)
android.os.Handler.dispatchMessage(Handler.java:99)
android.os.Looper.loop(Looper.java:193)
android.app. ActivityThread.main(ActivityThread.java:6975)
java.lang.reflect.Method.invoke(Native Method)
com.android.internal.os.RuntimelnitSMethodAndArgsCaller.run(Runtimelnit.java:493)
com.android.internal.os.Zygotelnit.main(Zygotelnit.java:865)
-->


CHROMEBOOK OS AND BROWSER DETECTION

On Chromebook, the OS is detected as:

<--
User Agent: Mozilla/5.0 (X11; Linux ×86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36
Operating System: Google Chrome OS Unknown
Browser/Version: Chrome 112.0
Device: Desktop
-->

The Chromebook has been modified to be a mobile version, I am unsure why the need to.

^^Chromebook/Images/Chromebook-Mobile-Gmail-App.png
^^Chromebook/Images/Chromebook-Mobile-Gmail-App-2.png
^^Chromebook/Images/Cloud-Print-App-NonFactory.png

There is also the removal of some options in settings. To wipe the device, there were removed options to 'powerwash' the machine. Thus, a power wash only resulted in the immediate restablishment of the exploit.


USING WEBSITES AND SERVICES ON CHROMEBOOK

Trying to use websites and services on the Chromebook using Chrome is a major pain.

GOOGLE CHROME ERROR: The version of the browser you are using is no longer supported. Please upgrade to a supported browser
GOOGLE CHROME ERROR: "Couldn't sign you in. This browser or app may not be secure. Try using a different browser. If you're already using a supported browser, you can try again to sign in."
GRAMMARLY web version on Chromebook Laptop:
ERROR: Can't Connect to Grammarly Your network configuration currently blocks Grammarly services on this computer.
GRAMMARLY PlayStore App on Chromebook Laptop:
ERROR: To use Grammarly on your mobile, install the Grammarly Keyboard.
EVERNOTE URL: https://www.evernote.com/Login.action?err=true&message=login.error.suspicious
ERROR: We detected something suspicious with this login, and have temporarily blocked access to Evernote to protect your data. Please reach out to our support team for assistance. Please select "Send us an email" then "Continue as guest" under the login prompt to report this issue.
EVERNOTE URL: https://www.evernote.com/AnalyticsPitStop.action?analyticsEventDataJson=%7B"events*%3A%5B%7B"identityId"%3A0%2C"action%3A"login"%2C"exportToDatabase"..<
ISSUE: I didn't chose to export anything but they now have an export of my Evernote account.
EVERNOTE URL: https://www.evernote.com/Login.action 
ISSUE: Evernote login page stores username and password in plain text in the html:
<div pseudo="-webkit-input-placeholder" id="placeholder" style="display: none !important;">Email address or usernames</div>
<div>redacted@gmail.com</div>
<div pseudo="-webkit-input-placeholder" id="placeholder" style="display: none !important;">Password</div>
<div>redacted</div>


DEAKIN UNIVERSITY ACCOUNT SECURITY ISSUES

MICROSOFT

In the OneDrive of my university account, I was trying to move files around an kept encountering the error that I did not have permission. I checked the permission settings of a file and in the side panel under 'Recent' there was an unknown notication list:

<--
notificationSubscriptionHiddenListXXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
-->

The permissions were also very odd and related to Sharepoint and a Website. The page URL is http://deakin365-my.sharepoint.com, for one it is not a https URL; secondly I don't think 'deakin365' is even a legitimate subdomain, it appears to be one created to host a SharePoint Website. For what purpose I do not know.

The URL to my 'supposed' University Microsoft 'My Account' page:
http://myaccount.microsoft.com/?ref=MeControl

The following is a list of permissions listed of a file I checked, these are just a few of many. I also do not understand what the context of 'The following factors also affect the level of access for (my name)' means. I assume the former message that states the permissions for myself are 'none' means someone else holds the privileges. It is not clear who that is. Deakin IT were unable to explain why or how any of this is even set up under my account.


<--
http://deakin365-my.sharepoint.com/personal/redacted_deakin_edu_au/_layouts/15/mngsiteadmin.aspx
Permissions > Site Collection Administrators

Permission levels given to (REDACTED MY NAME) (i:0#.f]membership|xxxxxxxxxx@deakin.edu.au)
- None

The following factors also affect the level of access for (REDACTED NAME) (i:0#.f]membership|xxxxxxxxxx@deakin.edu.au)
- Manage Permissions: Create and change permission levels on the Web site and assign permissions to users and groups.
- Use Remote: Interlaces Use SOAP, Web DAV, the Client Object Model or SharePoint Designer interfaces to access the Web site.
- View Web Analytics Data: Grants the ability to perform all administration tasks for the Web site as well as manage content.
- Create Subsites: Add, change, or delete HTML pages or Web Part Pages, and edit the Web site using a Microsoft SharePoint Foundation-compatible editor.
- Manage Web Site: Grants the ability to perform all administration tasks for the Web site as well as manage content.
- Add and Customize Pages: Add, change, or delete HTML pages or Web Part Pages, and edit the Web site using a Microsoft SharePoint Foundation-compatible editor.
- Manage Lists: Create and delete lists, add or remove columns in a list, and add or remove public views of a list.
- Edit Items: Edit items in lists, edit documents in document libraries, and customize Web Part Pages in document libraries.
- Browse Directories: Enumerate files and folders in a Web site using SharePoint Designer and Web DAV interfaces.
- Use Self-Service Creation: Site Create a Web site using Self-Service Site Creation.
-->


APP CONNECT / DUO SINGLE SIGN ON LOGIN

The main login window uses the Universities third-party developer application AppConnect which verifies via Duo Security. I did not previously notice this until I turned HTTP URLs off. 

<--
URLs:
https://signon.deakin.edu.au/idp/profile/SAML2/Redirect/SSO?execution=e1s2
https://signon.deakin.edu.au/idp/profile/SAML2/Redirect/SSO?execution=e1s3
https://appconnect.deakin.edu.au
-->


I couldn't get a straight answer from the Deakin IT department regarding the use of their third-party connection app or the myterious 'notificationSubscriptionHiddenList' under OneDrive permissions. Nor could anyone explain the hidden iFrame in the browser containing questionable obfuscated scripts for Duo authentication. 

Similarly, Duo Security were not interested in hearing about the suspicious authentication process which appears to be using a 2019 hijack GitGub script (https://github.com/umijs/qiankun/tree/24f8858ae845211bf34fac7525d333df87a82807/src/hijackers) to intercept the login.

<--
function hijackOnerror(onerror) {
function hijackTimer(timer) {
function hijackEvent(el) {
-->


Duo uses a 2 factor text authentication. Among the scripts pulled from the login process was a script for a virtual SIM card 'esim_manager.mojom-webui.js'.

<--
$interfaceName(){return"ash.cellular_setup.mojom.ESimManagerObserver"}static getRemote(){let remote=new ESimManagerObserverRemote;remote.$.bindNewPipeAndPassReceiver().bindInBrowser();return remote}}export class ESimManagerObserverCallbackRouter{constructor(){this.helper_internal_=new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(ESimManagerObserverRemote);
-->

<--
ash.cellular_setup.mojom.ESimManagerObserver
ash.cellular_setup.mojom.ESimManager
ash.cellular_setup.mojom.Euicc
ash.cellular_setup.mojom.ESimProfile
-->


Odd errors are encountered such as:

<--
- Access denied. The server's time may be out of sync.
- Sorry, something went wrong [Error Message] Can't find variable: ResizeObserver
-->


There are also references to ADIServer in the University login page code and in unrelated data file plists on the Macs. The only reference online I could find was http://github.com/adisingh007/AdiServer/blob/master/res/hosted/MongoDbCommand.txt and parts of their scripts align with those found on my computers and devices.

I am disapointed in Deakin Universities nonchalant interest in my assertion that files on my devices were being injected with binary script that wasn't being picked up on virus detection (many examples uploaded to VirusTotal). I have submitted numerous documents by direct upload, and via email to students and staff that they will have received on work and personal computers. I was concerned that it may provide an entry point for compromise as those I communicate with outside of university are now also victims. 

Given the Universities historical track record with a July 2022 data breach that impacted nearly 47,000 students I had hoped for a less lethargic response. I'm doubtful the information was ever passed on. If there is a future breach it will probably have stemmed from the Stealth Developer Mode exploit, it is possible the 2022 incident did.


WALRUS: WHO AM I?

I have included this just as a point of my own curiosity. Walrus is mentioned here and there in logs and I haven't been able to determine what it relates to. 
Earlier logs suggest it has something to do with 'AAAFoundation' (and possibly 'AAAFoundationSwift'). It is an XPC service by the name of 'com.apple.ak.walrus.xpc'. It also appears to have something to do with AppleIDSettings, OTAccountSettings and CoreCDP. I think CoreCDP has something to do with the 'circle peers'. Walrus is something that has a schema, can be enabled and secd reports on it relating to octagon-settings. It appears reported with a 0 enabled value along with a webAccess with a 1 available value.

cptd (CoreCDPInternal) never seems to successfully fetch it, but then says it has. AppleIDSettings (CoreCDP) will start observing for a walrus state change notification along with an OT peer change notification. TrustedPeersHelper returns the trust state for a TPHPeerState and reports 'walrus: <TPPBPeerStableInfoSetting: 0x*****3a0>'. Apparently walrus also relates to siriactionsd (VoiceShortcuts), with VCCKShortcutSyncCoordinator (updateAccountStatusAndUserRecordID) reporting 'Got Walrus status from CloudKit: Disable'.

TrustedPeersHelper knows more about it than I do, with its plist data file containing references to: walrusSetting, setWalrus, bestWalrusAcrossTrustedPeers, bestWalrusForStableInfo, walrusStableChanges, walrusenabled and bestWebAccessAcrossTrustedPeers. A mystery, to me. Possibly not to you. 

<--
akd: (AAAFoundation) [com.apple.aaafoundation:log] Service: starting up xpc service - com.apple.ak.walrus.xpc
cdpd: (CoreCDPInternal) [com.apple.cdp:core] "Successfully fetched walrus status: (NO)"
cdpd: (CoreCDPInternal) [com.apple.cdp:core] "Walrus status (2) fetched successfully."
cdpd: (CoreCDPInternal) [com.apple.cdp:core] "Denying walrus access. Missing entitlement."
AppleIDSettings: (CoreCDP) [com.apple.cdp:core] "Starting to observe walrus state change notification."
AppleIDSettings: (CoreCDP) [com.apple.cdp:core] "Starting to observe OT peer change notification."
AppleIDSettings: (CoreCDP) Walrus: Fetching status.
secd: [com.apple.security.ckks:ckksaccount] moving to CK Account info(altDSID: (null)): <CKAccountInfo: accountStatus=Available, accountPartition=Prod, deviceToDeviceEncryptionAvailability=(account|device), hasValidCredentials=true, walrus=Could Not Determine>
siriactionsd: (VoiceShortcuts) [com.apple.shortcuts:Walrus] -[VCCKShortcutSyncCoordinator updateAccountStatusAndUserRecordID] Got Walrus status from CloudKit: Disabled
secd: [com.apple.securityd:SecError] octagon-settings: Succeeded fetching account settings: <OTAccountSettings: 0x******e20> {
    walrus =     {
        enabled = 0;
    };
    webAccess =     {
        enabled = 1;
    };
}
TrustedPeersHelper: [com.apple.security.trustedpeers:container] Returning trust state: <TPHPeerState: SHA256:redacted= preapproved:0 status:(ignored|partial|self) memberChanges: NO unk. mIDs: NO osVersion: macOS XX.X.X (XXXXX) walrus: <TPPBPeerStableInfoSetting: 0x******3a0> {
    clock = 0;
    value = 0;
} webAccess: <TPPBPeerStableInfoSetting: 0x******3c0> {
    clock = 0;
    value = 1;
}>
...
siriactionsd: (WorkflowKit) [com.apple.shortcuts:RemoteExecution] -[WFRemoteExecutionCoordinator mapSelectorsForIncomingProtobuf] Started listening for run requests
siriactionsd: (WorkflowKit) database walrus update
siriactionsd: (WorkflowKit) [com.apple.shortcuts:Walrus] -[WFDatabase(Sync) updateWalrusStatus] Updating Walrus status in the database - per: <private>
siriactionsd: (VoiceShortcuts) [com.apple.shortcuts:Daemon] Starting daemon
siriactionsd: (WorkflowKit) [com.apple.shortcuts:Walrus] -[WFDatabase(Sync) updateWalrusStatus]_block_invoke Looks like we want Walrus schema version 0 for <private>
siriactionsd: (WorkflowKit) [com.apple.shortcuts:Walrus] -[WFDatabase(Sync) updateWalrusStatus]_block_invoke Running predicate on <private>: <private>
siriactionsd: (WorkflowKit) [com.apple.shortcuts:Walrus] -[WFDatabase(Sync) updateWalrusStatus]_block_invoke Ran predicate on <private>, found 0 entities: <private>
siriactionsd: (WorkflowKit) [com.apple.shortcuts:Walrus] -[WFDatabase(Sync) updateWalrusStatus] Updated 0 Walrus schema versions.
-->


2019

2019 appears to be the year of choice with most of the scripts and modified browers coming from that year.

<--
mobileassetd: (libmobileassetd.dylib) [com.apple.mobileassetd:Notice] -[DownloadManager startDownloadTask:downloadSize:for:startingAt:withLength:extractWith:options:modified:session:isCachingServer:]: Setting ifModified header to: 2019-10-22 18:40:25 +0000
...
opendirectoryd[66]: [session] UID: 0, EUID: 0, GID: 0, EGID: 0, PID: 87, PROC: templateMigrator ODNodeCreateRecord request, NodeID: XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX710, RecordType: dsRecTypeStandard:Groups, RecordName: com.apple.sharepoint.group.1, Attributes: {
	    "dsAttrTypeNative:IsHidden" =     (
	        1
	    );
	    "dsAttrTypeNative:record_daemon_version" =     (
	        8602000
	    );
	    "dsAttrTypeStandard:GeneratedUID" =     (
	        "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXX9CE"
	    );
	    "dsAttrTypeStandard:PrimaryGroupID" =     (
	        701
	    );
	    "dsAttrTypeStandard:RealName" =     (
	        "XxxxU2019s Public Folder"
	    );
	    "dsAttrTypeStandard:RecordName" =     (
	        "com.apple.sharepoint.group.1"
	    );
	}
...

Google Chrome:
"To get Chrome\u2019s highest level of security, <a href=\"#\" id=\"enhanced-protection-link\">turn on enhanced protection</a>",
...
{"params":{"initiator":"chrome-untrusted://new-tab-page","load_flags":16384,"method":"GET","network_isolation_key":"chrome://new-tab-page chrome-untrusted://new-tab-page","request_type":"other","site_for_cookies":"SiteForCookies: {site=chrome://new-tab-page; schemefully_same=false}","url":"https://www.gstatic.com/og/_/js/k=og.qtm.en_US.redacted.hs.2019.O/rt=j/m=q_dnp,qmd,qcwid,qapid,qald/exm=qaaw,qabr,qadd,qaid,qalo,qebr,qein,qhaw,qhawgm3,qhba,qhbr,qhbrgm3,qhch,qhchgm3,qhga,qhid,qhidgm3,qhin,qhlo,qhlogm3,qhmn,qhpc,qhsf,qhsfgm3,qhtt/d=1/ed=1/rs=redacted"},"phase":1,"source":{"id":redacted,"start_time":"34428238","type":1},"time":"34428239","type":108},
-->




===
This is the Stealth Developers response to the latest iOS security update 16.6 https://github.com/sussystuff/apple/tree/main/logs/iPad/com-apple-MobileSoftwareUpdate-UpdateBrainService-diskwrites_resource-2023-07-26.txt This is them in action on macOS https://github.com/sussystuff/apple/blob/main/Apple-Dodgy-Developer-Mode.txt 

URLs

https://www.virustotal.com/gui/file/b2a96537b627cc5f7ed63b4b9491b9ea15b08c88dfdd5aeb7a00d903dd4d0176

https://www.virustotal.com/gui/file/884203207d39c838932c498a4a8164fc74d52850e773db00c3db38044da7bcef/behavior

https://www.virustotal.com/gui/file/aeeea7ebadd4c45696a75092b6bb4858d0d5b5430fd4df00f8f8ef1dfee868fb

https://www.virustotal.com/gui/file/e267e5b9fcdff2dff2d317df2aeb442c77e0dc9ffddcbb44f9a917d1bd6360f2/details

https://www.virustotal.com/gui/file/84d81c17790881d79ba6add2dbc16dc85b16802bb97deb51db1d5985a1edbf8f/details

https://www.virustotal.com/gui/file/7f99acecbb53c6598fc2484a4031992647d6da3f403ab59a9d37031b2dc96f1e/behavior

https://www.virustotal.com/gui/file/c668611861dabc39dc714dd950a1b68a6a16c3b287849f1af747c7f92b250a37/details
